[{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/362","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/362/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/362/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/362/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/362","id":1125967080,"node_id":"I_kwDOGhqIJ85DHOTo","number":362,"title":"Gas Optimizations","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-07T13:08:36Z","updated_at":"2022-02-07T13:08:37Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"0x765C91997511d6BAa28862a5dC5d5Ad651B106Ea","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/362/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/362/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/361","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/361/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/361/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/361/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/361","id":1102594179,"node_id":"I_kwDOGhqIJ85BuECD","number":361,"title":"Gas: Avoid expensive calculation by checking if `originalLiquidity() == 0`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T23:46:42Z","updated_at":"2022-01-27T04:56:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nChecking if the value is 0 before returning 0 is less expensive than returning a calculation that's equal to 0\n\n## Proof of Concept\nIn `PoolTemplate.sol:rate()`, the code is as follows:\n```\nFile: PoolTemplate.sol\n744:     function rate() external view returns (uint256) {\n745:         if (totalSupply() > 0) {\n746:             return (originalLiquidity() * MAGIC_SCALE_1E6) / totalSupply();\n747:         } else {\n748:             return 0;\n749:         }\n750:     }\n\n```\nIt can be optimized as such:\n```\n744:     function rate() external view returns (uint256) {\n745:         uint256 originalLiquidity = originalLiquidity();\n746:         if (originalLiquidity != 0 && totalSupply() > 0) {\n747:             return (originalLiquidity * MAGIC_SCALE_1E6) / totalSupply();\n748:         } else {\n749:             return 0;\n750:         }\n751:     }\n\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nCache the loaded storage value in a memory variable and make the 0 checks to avoid unnecessary calculations if `originalLiquidity() == 0`\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/361/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/355","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/355/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/355/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/355/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/355","id":1102576789,"node_id":"I_kwDOGhqIJ85Bt_yV","number":355,"title":"Gas: Optimize Conditional Statements in `PoolTemplate.sol:worth()`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T23:32:49Z","updated_at":"2022-01-27T04:44:34Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nIt's possible to save gas by optimizing the checks in conditional statements (`if`, `else if` and `else`). This would save a few opcodes and avoid redundant checks.\n\n## Proof of Concept\nIn `PoolTemplate.sol:worth()`, the code is as follows:\n```\n799:     function worth(uint256 _value) public view returns (uint256 _amount) {\n800:         uint256 _supply = totalSupply();\n801:         uint256 _originalLiquidity = originalLiquidity();\n802:         if (_supply > 0 && _originalLiquidity > 0) {\n803:             _amount = (_value * _supply) / _originalLiquidity;\n804:         } else if (_supply > 0 && _originalLiquidity == 0) {\n805:             _amount = _value * _supply;\n806:         } else {\n807:             _amount = _value;\n808:         }\n809:     }\n```\n\nThe conditions checks can be optimized with the following (read the `@audit-info` comments for further information):\n```\n    function worth(uint256 _value) public view returns (uint256 _amount) {\n        uint256 _supply = totalSupply();\n        uint256 _originalLiquidity = originalLiquidity();\n        if (_supply == 0) {\n            _amount = _value;\n        } else if (_originalLiquidity == 0) {\n            _amount = _value * _supply;\n        } else {\n            _amount = (_value * _supply) / _originalLiquidity;\n        }\n    }\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nCompact conditions in mentioned logic statements\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/355/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/355/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/354","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/354/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/354/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/354/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/354","id":1102574275,"node_id":"I_kwDOGhqIJ85Bt_LD","number":354,"title":"Index compensate is 0 when totalLiquidity() is enough to cover the whole amount","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637929,"node_id":"LA_kwDOGhqIJ87Y4TVp","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/2%20(Med%20Risk)","name":"2 (Med Risk)","color":"FBCA04","default":false,"description":"Assets not at direct risk, but function/availability of the protocol could be impacted or leak value"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},{"login":"oishun1112","id":40849624,"node_id":"MDQ6VXNlcjQwODQ5NjI0","avatar_url":"https://avatars.githubusercontent.com/u/40849624?v=4","gravatar_id":"","url":"https://api.github.com/users/oishun1112","html_url":"https://github.com/oishun1112","followers_url":"https://api.github.com/users/oishun1112/followers","following_url":"https://api.github.com/users/oishun1112/following{/other_user}","gists_url":"https://api.github.com/users/oishun1112/gists{/gist_id}","starred_url":"https://api.github.com/users/oishun1112/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/oishun1112/subscriptions","organizations_url":"https://api.github.com/users/oishun1112/orgs","repos_url":"https://api.github.com/users/oishun1112/repos","events_url":"https://api.github.com/users/oishun1112/events{/privacy}","received_events_url":"https://api.github.com/users/oishun1112/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-13T23:30:51Z","updated_at":"2022-02-07T03:55:14Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nIn IndexTemplate, function compensate, When _amount > _value, and <= totalLiquidity(), the value of _compensated is not set, so it gets a default value of 0:\n```solidity\nif (_value >= _amount) {\n    ...\n    _compensated = _amount;\n} else {\n    ...\n    if (totalLiquidity() < _amount) {\n        ...\n        _compensated = _value + _cds;\n    }\n    vault.offsetDebt(_compensated, msg.sender);\n}\n```\n\nBut nevertheless, in both cases, it calls vault.offsetDebt, even when the _compensated is 0 (no else block).\n\n## Recommended Mitigation Steps\nI think, in this case, it should try to redeem the premium (withdrawCredit?) to cover the whole amount, but I am not sure about the intentions as I didn't have enough time to understand this protocol in depth.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/354/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/354/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/352","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/352/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/352/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/352/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/352","id":1102572199,"node_id":"I_kwDOGhqIJ85Bt-qn","number":352,"title":"Unbounded iteration over all indexes (2)","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637929,"node_id":"LA_kwDOGhqIJ87Y4TVp","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/2%20(Med%20Risk)","name":"2 (Med Risk)","color":"FBCA04","default":false,"description":"Assets not at direct risk, but function/availability of the protocol could be impacted or leak value"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2022-01-13T23:29:14Z","updated_at":"2022-02-02T08:55:32Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nThe transactions could fail if the array get too big and the transaction would consume more gas than the block limit.\nThis will then result in a denial of service for the desired functionality and break core functionality.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L703\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nKeep the array size small.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/352/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/352/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/350","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/350/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/350/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/350/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/350","id":1102568499,"node_id":"I_kwDOGhqIJ85Bt9wz","number":350,"title":"Gas: `incident.payoutDenominator` is used only once. It shouldn't be stored in a variable.","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T23:26:26Z","updated_at":"2022-01-27T04:57:00Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nIncreased gas cost (1 MSTORE and 1 MLOAD)\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L553\nThere's no readability or gas gain from copying `incident.payoutDenominator` to a variable as it's used only once in the method.\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nDo not store this data in a variable\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/350/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/349","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/349/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/349/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/349/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/349","id":1102567721,"node_id":"I_kwDOGhqIJ85Bt9kp","number":349,"title":"Gas: `incident.payoutNumerator` is used only once. It shouldn't be stored in a variable.","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T23:25:48Z","updated_at":"2022-01-27T04:59:59Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nIncreased gas cost (1 MSTORE and 1 MLOAD)\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L552\nThere's no readability or gas gain from copying `incident.payoutNumerator` to a variable as it's used only once in the method.\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nDo not store this data in a variable\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/349/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/349/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/347","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/347/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/347/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/347/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/347","id":1102561379,"node_id":"I_kwDOGhqIJ85Bt8Bj","number":347,"title":"Insurance Pool Locking Does Not Propagate To All Markets","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T23:20:51Z","updated_at":"2022-01-19T05:04:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nleastwood\n\n\n# Vulnerability details\n\n## Impact\n\nThe `applyCover()` function locks all index markets in order to ensure compensation is properly accounted for when the insurance pool resumes trading. However, it seems that only `IndexTemplate.sol` is locked, even though it may potentially make a call to `CDSTemplate.sol` for additional compensation to cover the shortage in payout.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L655-L686\n```\nfunction applyCover(\n    uint256 _pending,\n    uint256 _payoutNumerator,\n    uint256 _payoutDenominator,\n    uint256 _incidentTimestamp,\n    bytes32 _merkleRoot,\n    string calldata _rawdata,\n    string calldata _memo\n) external override onlyOwner {\n    require(paused == false, \"ERROR: UNABLE_TO_APPLY\");\n    incident.payoutNumerator = _payoutNumerator;\n    incident.payoutDenominator = _payoutDenominator;\n    incident.incidentTimestamp = _incidentTimestamp;\n    incident.merkleRoot = _merkleRoot;\n    marketStatus = MarketStatus.Payingout;\n    pendingEnd = block.timestamp + _pending;\n    for (uint256 i = 0; i < indexList.length; i++) {\n        if (indicies[indexList[i]].credit > 0) {\n            IIndexTemplate(indexList[i]).lock();\n        }\n    }\n    emit CoverApplied(\n        _pending,\n        _payoutNumerator,\n        _payoutDenominator,\n        _incidentTimestamp,\n        _merkleRoot,\n        _rawdata,\n        _memo\n    );\n    emit MarketStatusChanged(marketStatus);\n}\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L476-L481\n```\nfunction lock() external override {\n    require(allocPoints[msg.sender] > 0);\n\n    locked = true;\n    emit Locked();\n}\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L421-L450\n```\nfunction compensate(uint256 _amount)\n    external\n    override\n    returns (uint256 _compensated)\n{\n    require(\n        allocPoints[msg.sender] > 0,\n        \"ERROR_COMPENSATE_UNAUTHORIZED_CALLER\"\n    );\n    uint256 _value = vault.underlyingValue(address(this));\n    if (_value >= _amount) {\n        //When the deposited value without earned premium is enough to cover\n        vault.offsetDebt(_amount, msg.sender);\n        //vault.transferValue(_amount, msg.sender);\n        _compensated = _amount;\n    } else {\n        //Withdraw credit to cashout the earnings\n        uint256 _shortage;\n        if (totalLiquidity() < _amount) {\n            //Insolvency case\n            _shortage = _amount - _value;\n            uint256 _cds = ICDSTemplate(registry.getCDS(address(this)))\n                .compensate(_shortage);\n            _compensated = _value + _cds;\n        }\n        vault.offsetDebt(_compensated, msg.sender);\n    }\n    adjustAlloc();\n    emit Compensated(msg.sender, _compensated);\n}\n```\n\n## Tools Used\n\nManual code review.\n\n## Recommended Mitigation Steps\n\nConsider propagating market locking to all index markets and all CDS markets.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/347/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/347/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/345","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/345/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/345/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/345/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/345","id":1102548146,"node_id":"I_kwDOGhqIJ85Bt4yy","number":345,"title":"Gas: `PoolTemplate:initialize()::_conditions` should be a fixed array of size 2","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T23:10:51Z","updated_at":"2022-01-17T08:51:57Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nFixed arrays are less expensive than dynamic arrays and would implicitely add the array.length check\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L180\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nMake `_conditions` a fixed array of size 2\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/345/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/344","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/344/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/344/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/344/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/344","id":1102543990,"node_id":"I_kwDOGhqIJ85Bt3x2","number":344,"title":"Gas: Avoid expensive calculation by checking if `valueAll() == 0`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T23:07:37Z","updated_at":"2022-01-27T05:00:12Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nChecking if the value is 0 before returning 0 is less expensive than returning a calculation that's equal to 0\n\n## Proof of Concept\nIn `Vault.sol:underlyingValue()`, the code is as follows:\n```\nVault.sol\n400:     function underlyingValue(address _target)\n401:         public\n402:         view\n403:         override\n404:         returns (uint256)\n405:     {\n406:         if (attributions[_target] > 0) {\n407:             return (valueAll() * attributions[_target]) / totalAttributions;\n408:         } else {\n409:             return 0;\n410:         }\n411:     }\n```\nIt can be optimized as such: \n```\n406:         uint256 valueAll = valueAll();\n407:         if (valueAll != 0 && attributions[_target] > 0) {\n408:             return (valueAll * attributions[_target]) / totalAttributions;\n409:         } else {\n410:             return 0;\n411:         }\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nCache the loaded storage value in a memory variable and make the 0 checks to avoid unnecessary calculations if `valueAll() == 0`\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/344/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/343","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/343/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/343/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/343/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/343","id":1102535867,"node_id":"I_kwDOGhqIJ85Bt1y7","number":343,"title":"Gas: Cache `attributions[_target]` in `Vault.sol:underlyingValue()`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T23:01:25Z","updated_at":"2022-01-27T05:00:38Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nSLOADs are expensive\n\n## Proof of Concept\nHere, `attributions[_target]` can be loaded twice from storage:\n```\nVault.sol\n400:     function underlyingValue(address _target)\n401:         public\n402:         view\n403:         override\n404:         returns (uint256)\n405:     {\n406:         if (attributions[_target] > 0) {\n407:             return (valueAll() * attributions[_target]) / totalAttributions;\n408:         } else {\n409:             return 0;\n410:         }\n411:     }\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nCache the loaded storage value in a memory variable\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/343/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/343/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/339","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/339/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/339/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/339/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/339","id":1102520083,"node_id":"I_kwDOGhqIJ85Btx8T","number":339,"title":"Pause check missing on the several functions (PoolTemplate)","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T22:49:04Z","updated_at":"2022-01-19T05:09:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ndefsec\n\n\n# Vulnerability details\n\n## Impact\n\nOn the deposit and other functions, some of the functions are checked when the contract is paused. However, other functions like unlock or transferinsturance does not have any pause protection.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L260\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nReview all the function behaviours and put extra pause check.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/339/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/339/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/337","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/337/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/337/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/337/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/337","id":1102511351,"node_id":"I_kwDOGhqIJ85Btvz3","number":337,"title":"Misleading comments and documentation","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T22:42:14Z","updated_at":"2022-01-31T05:22:35Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nThere are some issues with comments/documentation, e.g.:\nMisleading comment:\n```solidity\n   * @return true if the id within the market already exists\n  function getCDS(address _address) external view override returns (address)\n```\nNo such function (present in documentation):\n```solidity\n  function getInsuranceCount(address _user)\n```\n\"getInsuranceCount returns how many insurance policies the specified user has.\"\n\n## Recommended Mitigation Steps\nConsider revisiting and updating discrepancies between the documentation and comments.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/337/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/337/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/334","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/334/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/334/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/334/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/334","id":1102504406,"node_id":"I_kwDOGhqIJ85BtuHW","number":334,"title":"Ordering importance in a struct","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638633447,"node_id":"LA_kwDOGhqIJ87Y4SPn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/help%20wanted","name":"help wanted","color":"008672","default":true,"description":"Extra attention is needed"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T22:36:55Z","updated_at":"2022-01-27T15:19:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nKumpirmafyas\n\n\n# Vulnerability details\n\n## Impact\nThe order of the \"struct Template\" in the Factory.sol contract is as follows:\n1-bool isOpen\n2-bool approval\n3-bool allowDuplicate\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L44-L48\n\n\nThe struct above is used in functions as value, in the \"key=>value\" part in this mapping.\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L49\n\nWhen using \"template\" mapping in this function, it is not done in the defined order, Detail:\n- isOpen bool , defined in Struct in the 1st row,\n-isOpen bool ,defined in the 1st position in Mapping, naturally\n-isOpen bool is defined in the 2nd row in the \"approveTemplate\" function below.\n-The same applies to the approvel bool struct.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L101-L103\n\n\nThe problem here is; The order in which Structs are used in a Function is not.\nProblem ; The order of the structs in the \"key => value\" mapping definition affects the function.\nSequencing is important in struct definition in mappings.\n\n\n## Recommended Mitigation Steps\nThe order in the struct = the order in the mapping = the order in the function must be the same.\n\nHere ; Sorting in Mapping with Struct is a mandatory condition, while sorting in a function is within the scope of clean code.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/334/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/334/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/332","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/332/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/332/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/332/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/332","id":1102494358,"node_id":"I_kwDOGhqIJ85BtrqW","number":332,"title":"Order of statements","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T22:29:29Z","updated_at":"2022-01-27T05:01:04Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nStatements should be ordered in a way that it costs less gas, that is, less operations are performed when the validating conditions are wrong.\ne.g. this can be reordered:\n```solidity\n  //Distribute premium and fee\n  uint256 _endTime = _span + block.timestamp;\n  uint256 _premium = getPremium(_amount, _span);\n  uint256 _fee = parameters.getFeeRate(msg.sender);\n\n  require(\n      _amount <= availableBalance(),\n      \"ERROR: INSURE_EXCEEDED_AVAILABLE_BALANCE\"\n  );\n  require(_premium <= _maxCost, \"ERROR: INSURE_EXCEEDED_MAX_COST\");\n  require(_span <= 365 days, \"ERROR: INSURE_EXCEEDED_MAX_SPAN\");\n  require(\n      parameters.getMinDate(msg.sender) <= _span,\n      \"ERROR: INSURE_SPAN_BELOW_MIN\"\n  );\n\n  require(\n      marketStatus == MarketStatus.Trading,\n      \"ERROR: INSURE_MARKET_PENDING\"\n  );\n  require(paused == false, \"ERROR: INSURE_MARKET_PAUSED\");\n```\nto something like this:\n```solidity\n  require(paused == false, \"ERROR: INSURE_MARKET_PAUSED\");\n  require(\n      marketStatus == MarketStatus.Trading,\n      \"ERROR: INSURE_MARKET_PENDING\"\n  );\n\n  require(\n      _amount <= availableBalance(),\n      \"ERROR: INSURE_EXCEEDED_AVAILABLE_BALANCE\"\n  );\n\n  require(_span <= 365 days, \"ERROR: INSURE_EXCEEDED_MAX_SPAN\");\n  require(\n      parameters.getMinDate(msg.sender) <= _span,\n      \"ERROR: INSURE_SPAN_BELOW_MIN\"\n  );\n\n  //Distribute premium and fee\n  uint256 _premium = getPremium(_amount, _span);\n  require(_premium <= _maxCost, \"ERROR: INSURE_EXCEEDED_MAX_COST\");\n\n  uint256 _endTime = _span + block.timestamp;\n  uint256 _fee = parameters.getFeeRate(msg.sender);\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/332/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/332/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/320","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/320/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/320/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/320/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/320","id":1102468641,"node_id":"I_kwDOGhqIJ85BtlYh","number":320,"title":"Gas: Cache `_fee[_target]` in `Parameters.sol:getFeeRate()`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-01-13T22:12:33Z","updated_at":"2022-01-25T06:57:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nSLOADs are expensive\n\n## Proof of Concept\nHere, `_fee[_target]` can be loaded twice from storage:\n```\n271:     function getFeeRate(address _target)\n272:         external\n273:         view\n274:         override\n275:         returns (uint256)\n276:     {\n277:         if (_fee[_target] == 0) {\n278:             return _fee[address(0)];\n279:         } else {\n280:             return _fee[_target];\n281:         }\n282:     }\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nCache the storage reading in a memory variable\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/320/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/320/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/317","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/317/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/317/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/317/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/317","id":1102459898,"node_id":"I_kwDOGhqIJ85BtjP6","number":317,"title":"Gas Optimization: Use unchecked for safe math","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-13T22:06:40Z","updated_at":"2022-01-24T11:26:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ngzeon\n\n\n# Vulnerability details\n\n## Impact\nUse unchecked for safe math to save gas, for example:\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PremiumModels/BondingPremium.sol#L176\n```\n        premiumRate = premiumRate / T_1 / (u1 - u2) / BASE;\n```\nSince we have\n1) T_1 != 0 (L229)\n2) (u1 - u2) != 0 (L126-132)\n3) BASE != 0 (L28)\nwe can safely wrap this line in an unchecked block\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/317/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/317/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/315","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/315/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/315/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/315/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/315","id":1102457146,"node_id":"I_kwDOGhqIJ85Btik6","number":315,"title":"Add a timelock to `Parameters:setFeeRate`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-01-13T22:04:45Z","updated_at":"2022-01-27T21:57:58Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nTo give more trust to users: functions that set key/critical variables should be put behind a timelock.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L177-L184\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nAdd a timelock to setter functions of key/critical variables.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/315/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/315/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/314","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/314/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/314/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/314/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/314","id":1102455135,"node_id":"I_kwDOGhqIJ85BtiFf","number":314,"title":"Validate _to is not empty","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T22:03:25Z","updated_at":"2022-01-27T15:20:47Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\n_withdrawAttribution should validate that _to is not an empty address 0x0 to prevent accidental burns. Similarly, transferValue _destination param and withdrawValue _to param should also be checked against an empty address unless this is the intended functionality in some cases.\n\n## Recommended Mitigation Steps\nrequire _to != address(0)\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/314/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/312","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/312/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/312/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/312/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/312","id":1102452477,"node_id":"I_kwDOGhqIJ85Bthb9","number":312,"title":"getLockup and getWithdrawable can change after withdrawalReq is initiated","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T22:01:39Z","updated_at":"2022-01-19T06:14:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nI would like to argue for caching unlock and expire timestamps of withdrawals in the withdrawalReq itself because now the user can initiate withdrawal request but getLockup and getWithdrawable are checked only when the actual withdrawal occurs (the next step), so these values can be updated by the admin anytime in the Parameters contract. In my opinion, old withdrawal requests should not suffer from future changes in the parameters, or else the users may feel betrayed. For instance, let's imagine a situation where the user initiates a withdrawal request and the pending period is 7 days, and expiry is another 7 days, however, the next day admin changes the pending period to 6 days and expiry to 1 day, and when the user comes back after 7 days, his request is expired and he needs to start this whole process over again.\n\n## Recommended Mitigation Steps\nwithdrawalReq could store not timestamp, but unlocksAt and expiresAt or something like that.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/312/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/312/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/311","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/311/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/311/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/311/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/311","id":1102448291,"node_id":"I_kwDOGhqIJ85Btgaj","number":311,"title":"`targetLev` can be set to 0 in `IndexTemplate:setLeverage`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-01-13T21:58:54Z","updated_at":"2022-01-27T15:21:08Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact \nDivision by 0 or functionally incorrect `targetLev`\n\n## POC\nA division by `targetLev` is made here : https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L306 and `targetLev` can be set to 0 : https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L575\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nEither make a check on `targetLev` before setting it here: https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L575 or make a check before the division here: https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L306 \n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/311/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/311/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/310","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/310/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/310/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/310/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/310","id":1102448249,"node_id":"I_kwDOGhqIJ85BtgZ5","number":310,"title":"Insurance NFT","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2022-01-13T21:58:53Z","updated_at":"2022-02-02T10:28:42Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nConsider using NFTs to represent insurance, e.g. ERC721 standard. This is just a suggestion as it seems like a good use case, for instance, function transferInsurance could be replaced with a simple NFT transfer, and allInsuranceCount could return totalSupply. Having insurance as NFTs could make a more enjoyable experience and simplify the future interoperability with other protocols.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/310/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/310/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/309","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/309/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/309/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/309/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/309","id":1102445841,"node_id":"I_kwDOGhqIJ85Btf0R","number":309,"title":"deposit and _depositFrom are almost similar","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T21:57:38Z","updated_at":"2022-01-17T07:57:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nFunction deposit in PoolTemplate could just re-use _depositFrom function by passing msg.sender as the _from parameter. This will reduce the deployment costs and make the code more robust in case you decide to introduce any changes (you will need to update only 1 place).\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/309/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/309/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/308","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/308/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/308/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/308/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/308","id":1102443478,"node_id":"I_kwDOGhqIJ85BtfPW","number":308,"title":"Repeated math operations","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T21:56:05Z","updated_at":"2022-01-25T10:12:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nCan be refactored, from this:\n```solidity\n  require(\n      request.timestamp +\n          parameters.getLockup(msg.sender) <\n          block.timestamp,\n      \"ERROR: WITHDRAWAL_QUEUE\"\n  );\n  require(\n      request.timestamp +\n          parameters.getLockup(msg.sender) +\n          parameters.getWithdrawable(msg.sender) >\n          block.timestamp,\n      \"ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST\"\n  );\n```\nto this:\n```solidity\n  uint256 unlocksAt = request.timestamp + parameters.getLockup(msg.sender);\n  require(\n      unlocksAt < block.timestamp,\n      \"ERROR: WITHDRAWAL_QUEUE\"\n  );\n  require(\n      unlocksAt + parameters.getWithdrawable(msg.sender) > block.timestamp,\n      \"ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST\"\n  );\n```\n\nThere are more places where this optimization could be applied besides the provided example, but the basic idea is to cache the result of repeated math operation when the value does not change.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/308/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/308/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/307","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/307/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/307/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/307/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/307","id":1102440928,"node_id":"I_kwDOGhqIJ85Bteng","number":307,"title":"repayDebt optimization","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T21:54:17Z","updated_at":"2022-01-23T02:41:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nfunction repayDebt could be refactored to reduce deployment and operational costs\nfrom this:\n```solidity\n  uint256 _debt = debts[_target];\n  if (_debt >= _amount) {\n      debts[_target] -= _amount;\n      totalDebt -= _amount;\n      IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n  } else {\n      debts[_target] = 0;\n      totalDebt -= _debt;\n      IERC20(token).safeTransferFrom(msg.sender, address(this), _debt);\n  }\n```\nto this:\n```solidity\n  uint256 _debt = debts[_target];\n  if (_debt > _amount) {\n      debts[_target] = _debt - _amount;\n  } else {\n      debts[_target] = 0;\n      _amount = _debt;\n  }\n  totalDebt -= _amount;\n  IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/307/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/307/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/306","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/306/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/306/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/306/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/306","id":1102439649,"node_id":"I_kwDOGhqIJ85BteTh","number":306,"title":"Repeated storage reads","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T21:53:21Z","updated_at":"2022-01-23T02:57:00Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nRepeated storage read should be cached, e.g.\nattributions[_target] is read from storage twice:\n```solidity\n        if (attributions[_target] > 0) {\n            return (valueAll() * attributions[_target]) / totalAttributions;\n```\ntotalAttributions read twice:\n```solidity\n        if (totalAttributions > 0 && _attribution > 0) {\n            return (_attribution * valueAll()) / totalAttributions;\n```\navailable() called twice:\n```solidity\n        if (available() < _retVal) {\n            uint256 _shortage = _retVal - available();\n```\nwould be cheaper to use _token from memory here:\n```solidity\n    IERC20(token).safeTransfer(_to, _redundant);\n```\n\nThere are more places where this optimization could be applied besides the provided examples, but the basic idea is to cache storage variables if you need to access them multiple times when the value does not change.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/306/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/306/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/304","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/304/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/304/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/304/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/304","id":1102437577,"node_id":"I_kwDOGhqIJ85BtdzJ","number":304,"title":"Repeated external calls","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T21:51:49Z","updated_at":"2022-01-22T07:13:32Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nAvoid repeated external calls, e.g. here token balanceOf is queried 4 times:\n```solidity\nif (\n    ...\n    balance < IERC20(token).balanceOf(address(this))\n) {\n    uint256 _redundant = IERC20(token).balanceOf(address(this)) - balance;\n    ...\n} else if (IERC20(_token).balanceOf(address(this)) > 0) {\n    IERC20(_token).safeTransfer(\n        _to,\n        IERC20(_token).balanceOf(address(this))\n    );\n}\n```\nYou should query it only once and then use the cached value as it doesn't change between the statements.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/304/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/304/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/303","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/303/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/303/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/303/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/303","id":1102436912,"node_id":"I_kwDOGhqIJ85Btdow","number":303,"title":"Eliminate else block","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T21:51:18Z","updated_at":"2022-01-23T02:59:56Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nYou dont need this else block, code can be refactored from this:\n```solidity\n  if (address(controller) != address(0)) {\n      controller.migrate(address(_controller));\n      controller = IController(_controller);\n  } else {\n      controller = IController(_controller);\n  }\n```\nto this:\n```solidity\n  if (address(controller) != address(0)) {\n      controller.migrate(address(_controller));\n  }\n  controller = IController(_controller);\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/303/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/303/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/301","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/301/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/301/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/301/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/301","id":1102434658,"node_id":"I_kwDOGhqIJ85BtdFi","number":301,"title":"Gas: Cache `totalLiquidity()` in `IndexTemplate:leverage()`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T21:49:38Z","updated_at":"2022-01-22T07:08:04Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nSLOADs are expensive\n\n## Proof of Concept\nHere, `totalLiquidity()` is loaded twice from storage\n```\n491:     function leverage() public view returns (uint256 _rate) {\n492:         //check current leverage rate\n493:         if (totalLiquidity() > 0) {\n494:             return (totalAllocatedCredit * MAGIC_SCALE_1E6) / totalLiquidity();\n495:         } else {\n496:             return 0;\n497:         }\n498:     }\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nCache `totalLiquidity()` in a variable\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/301/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/300","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/300/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/300/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/300/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/300","id":1102428525,"node_id":"I_kwDOGhqIJ85Btblt","number":300,"title":"Gas: Optimize Conditional Statements in `IndexTemplate.sol:deposit()`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T21:45:14Z","updated_at":"2022-01-25T07:07:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nIt's possible to save gas by optimizing the checks in conditional statements (`if`, `else if` and `else`). This would save a few opcodes and avoid redundant checks.\n\n## Proof of Concept\nIn `IndexTemplate.sol:deposit()`, the code is as follows:\n```\n172:         if (_supply > 0 && _totalLiquidity > 0) {  \n173:             _mintAmount = (_amount * _supply) / _totalLiquidity;\n174:         } else if (_supply > 0 && _totalLiquidity == 0) {\n175:             //when\n176:             _mintAmount = _amount * _supply;\n177:         } else {\n178:             _mintAmount = _amount;\n179:         }\n```\n\nThe conditions checks can be optimized with the following (read the `@audit-info` comments for further information):\n```\n      if (_supply == 0) {\n          _mintAmount = _amount;\n      } else if (_totalLiquidity == 0) { // @audit-info : implicit _supply > 0 as above condition is false\n          _mintAmount = _amount * _supply;\n      } else { // @audit-info : implicit _supply > 0 and _totalLiquidity > 0 as both the previous conditions are false\n          _mintAmount = (_amount * _supply) / _totalLiquidity;\n      }\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nCompact conditions in mentioned logic statements\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/300/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/300/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/298","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/298/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/298/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/298/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/298","id":1102422752,"node_id":"I_kwDOGhqIJ85BtaLg","number":298,"title":"`Factory:approveTemplate` could make 1 SSTORE instead of 3","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T21:41:03Z","updated_at":"2022-01-22T07:06:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nIncreased gas cost as SSTOREs are very expensive\n\n## Proof of Concept\nThe code is as follows :\n```\n094:     function approveTemplate(\n095:         IUniversalMarket _template,\n096:         bool _approval,\n097:         bool _isOpen,\n098:         bool _duplicate\n099:     ) external override onlyOwner {\n100:         require(address(_template) != address(0));\n101:         templates[address(_template)].approval = _approval; //@audit-info SSTORE\n102:         templates[address(_template)].isOpen = _isOpen; //@audit-info SSTORE\n103:         templates[address(_template)].allowDuplicate = _duplicate; //@audit-info SSTORE\n104:         emit TemplateApproval(_template, _approval, _isOpen, _duplicate);\n105:     }\n```\nAs we can see, it's making 3 SSTORE operations, one for each boolean. The code could be optimized as follows to save gas :\n```\n    function approveTemplate(\n        IUniversalMarket _template,\n        bool _approval,\n        bool _isOpen,\n        bool _duplicate\n    ) external override onlyOwner {\n        require(address(_template) != address(0));\n        Template memory approvedTemplate = new Template(_isOpen, _approval, _duplicate);\n        templates[address(_template)] = approvedTemplate; //@audit-info only one SSTORE\n        emit TemplateApproval(_template, _approval, _isOpen, _duplicate);\n    }\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nUse a memory `Template ` struct and write in storage only once\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/298/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/298/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/297","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/297/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/297/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/297/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/297","id":1102409031,"node_id":"I_kwDOGhqIJ85BtW1H","number":297,"title":"Spec error on function: `Factory:setCondition` (difference with code comment)","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T21:30:39Z","updated_at":"2022-01-31T07:19:02Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\nThe spec says the function should be called `approveCondition()` instead of `setCondition`: https://insuredao.gitbook.io/developers/market/factory#approvecondition\n\nWhile this might still be understood nonetheless as `setCondition` is also mentioned, the spec says that the parameter `_slot` is the `index of the reference array`, whereas the code comment says it's the `index within condition array`: https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L133\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nMy guess is that the spec should be corrected\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/297/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/297/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/296","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/296/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/296/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/296/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/296","id":1102401361,"node_id":"I_kwDOGhqIJ85BtU9R","number":296,"title":"Spec error on function: `Factory:approveTemplate`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T21:24:58Z","updated_at":"2022-01-31T12:22:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\nThe spec doesn't match with the comments in the code here: \n\nCode: https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L90-L91\nSpec: https://insuredao.gitbook.io/developers/market/factory#approvetemplate\n\nHere, the spec doesn't mention `_isOpen` and seem to confuse the `_approval` description with what `_isOpen` should be.\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nMy guess is that the spec should be corrected\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/296/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/296/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/295","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/295/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/295/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/295","id":1102400259,"node_id":"I_kwDOGhqIJ85BtUsD","number":295,"title":"`requestWithdraw` without obligation to withdraw allow underwriter to avoid payout","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637929,"node_id":"LA_kwDOGhqIJ87Y4TVp","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/2%20(Med%20Risk)","name":"2 (Med Risk)","color":"FBCA04","default":false,"description":"Assets not at direct risk, but function/availability of the protocol could be impacted or leak value"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T21:24:15Z","updated_at":"2022-01-19T06:22:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ngzeon\n\n\n# Vulnerability details\n\n## Impact\nTo prevent withdrawal front-running, a lockup period is set between withdrawal request and withdrawal. However, there are no obligation to withdraw after the lockup period and the capital will keep earning premium during lockup. A strategy for underwriter is to keep requesting withdrawal every `lockup period` to keep their average lockup to `lockup period/2`. \n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L279\n\nAssuming\n1) Reporting DAO vote last for 24 hours (according to docs) plus there will be delay between the hack and vote creation \n2) the `lockup period` is set to 86400 (24 hours) in the supplied test cases\nIt is very likely an underwriter can avoid payout by such strategy since their effective lockup would be 12 hours only. They will continue to earn yield in the pool and only require some extra gas cost for the `requestWithdraw` every 24 hours.\n\n## Recommended Mitigation Steps\nExtend the lockup period at least by a factor of 2 or force underwriter to withdraw after lockup period.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/295/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/295/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/287","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/287/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/287/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/287/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/287","id":1102334447,"node_id":"I_kwDOGhqIJ85BtEnv","number":287,"title":"Inconsistent divide by 0 checks for `totalSupply()`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T20:37:49Z","updated_at":"2022-01-22T07:40:37Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nA division by 0 could occur\n\n## Proof of Concept\nWhile at some places, a check is made to make sure that `totalSupply() > 0`, it's not consistently the case, such as in the following places: \n```\ncontracts\\CDSTemplate.sol:235:        _retVal = (vault.attributionValue(crowdPool) * _amount) / totalSupply();\ncontracts\\CDSTemplate.sol:318:                _balance * vault.attributionValue(crowdPool) / totalSupply();\ncontracts\\IndexTemplate.sol:216:        _retVal = (_liquidty * _amount) / totalSupply();\ncontracts\\IndexTemplate.sol:530:            return (_balance * totalLiquidity()) / totalSupply();\ncontracts\\PoolTemplate.sol:768:            return (_balance * originalLiquidity()) / totalSupply();\n```\n\nAt the following places, the check is indeed made:\n```\ncontracts\\IndexTemplate.sol:514:            return (totalLiquidity() * MAGIC_SCALE_1E6) / totalSupply();\ncontracts\\PoolTemplate.sol:747:            return (originalLiquidity() * MAGIC_SCALE_1E6) / totalSupply();\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nIf this check is at least made at some places, this means that `totalSupply()` can indeed take a value of 0. Therefore, a check should always be made to prevent the div by 0\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/287/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/287/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/285","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/285/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/285/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/285/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/285","id":1102319095,"node_id":"I_kwDOGhqIJ85BtA33","number":285,"title":"Gas: Optimize Conditional Statements in `CDSTemplate.sol:deposit()`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T20:27:21Z","updated_at":"2022-01-25T10:27:10Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nIt's possible to save gas by optimizing the checks in conditional statements (`if`, `else if` and `else`). This would save a few opcodes and avoid redundant checks.\n\n## Proof of Concept\nIn `CDSTemplate.sol:deposit()`, the code is as follows:\n```\n140:         if (_supply > 0 && _liquidity > 0) { \n141:             _mintAmount = (_amount * _supply) / _liquidity;\n142:         } else if (_supply > 0 && _liquidity == 0) {\n143:             //when vault lose all underwritten asset = \n144:             _mintAmount = _amount * _supply; //dilute LP token value af. Start CDS again.\n145:         } else {\n146:             //when _supply == 0,\n147:             _mintAmount = _amount;\n148:         }\n```\n\nThe conditions checks can be optimized with the following (read the `@audit-info` comments for futher information):\n```\n        if (_supply == 0) { \n            _mintAmount = _amount;\n        } else if (_liquidity == 0) { // @audit-info : implicit _supply > 0 as above condition is false\n            //when vault lose all underwritten asset = \n            _mintAmount = _amount * _supply; //dilute LP token value af. Start CDS again.\n        } else { // @audit-info : implicit _supply > 0 and _liquidity > 0 as both the previous conditions are false\n            _mintAmount = (_amount * _supply) / _liquidity;\n        }\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nCompact conditions in mentioned logic statements\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/285/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/285/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/284","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/284/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/284/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/284/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/284","id":1102268371,"node_id":"I_kwDOGhqIJ85Bs0fT","number":284,"title":"Wrong comment on fund function","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T19:55:58Z","updated_at":"2022-01-31T12:23:47Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nFitraldys\n\n\n# Vulnerability details\n\n## Impact\nIn the https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L157 it is the descriptionof the depoist function, and not the correct description for the fund function.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L156-L173\n\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/284/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/284/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/283","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/283/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/283/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/283/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/283","id":1102262256,"node_id":"I_kwDOGhqIJ85Bsy_w","number":283,"title":"[WP-H39] `PoolTemplate.sol#resume()` Wrong implementation of `resume()` will compensate overmuch redeem amount from index pools","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-13T19:52:01Z","updated_at":"2022-01-25T10:15:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\n## Root Cause\n\nWrong arithmetic.\n\n---\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L700-L717\n\n```solidity\nuint256 _deductionFromIndex = (_debt * _totalCredit * MAGIC_SCALE_1E6) /\n            totalLiquidity();\n    uint256 _actualDeduction;\n    for (uint256 i = 0; i < indexList.length; i++) {\n        address _index = indexList[i];\n        uint256 _credit = indicies[_index].credit;\n        if (_credit > 0) {\n            uint256 _shareOfIndex = (_credit * MAGIC_SCALE_1E6) /\n                _totalCredit;\n            uint256 _redeemAmount = _divCeil(\n                _deductionFromIndex,\n                _shareOfIndex\n            );\n            _actualDeduction += IIndexTemplate(_index).compensate(\n                _redeemAmount\n            );\n        }\n    }\n```\n\n\n### PoC\n\n- totalLiquidity = 200,000* 10**18;\n- totalCredit = 100,000 * 10**18;\n- debt = 10,000 * 10**18;\n\n- [Index Pool 1] Credit = 20,000 * 10**18;\n- [Index Pool 2] Credit = 30,000 * 10**18;\n\n```\nuint256 _deductionFromIndex = (_debt * _totalCredit * MAGIC_SCALE_1E6) /\n            totalLiquidity();\n// _deductionFromIndex = 10,000 * 10**6 * 10**18;\n\n```\n\n[Index Pool 1]:\n\n```\nuint256 _shareOfIndex = (_credit * MAGIC_SCALE_1E6) / _totalCredit;  \n//  _shareOfIndex = 200000\n\nuint256 _redeemAmount = _divCeil(\n    _deductionFromIndex,\n    _shareOfIndex\n);\n\n// _redeemAmount = 25,000 * 10**18;\n```\n\n[Index Pool 2]:\n\n```\nuint256 _shareOfIndex = (_credit * MAGIC_SCALE_1E6) / _totalCredit;  \n//  _shareOfIndex = 300000\n\nuint256 _redeemAmount = _divCeil(\n    _deductionFromIndex,\n    _shareOfIndex\n);\n\n// _redeemAmount = 16666666666666666666667 (~ 16,666 * 10**18)\n```\n\nIn most cases, the transaction will revet on underflow at:\n```\nuint256 _shortage = _deductionFromIndex /\n            MAGIC_SCALE_1E6 -\n            _actualDeduction;\n```\n\nIn some cases, specific pools will be liable for unfair compensation:\n\nIf the CSD is empty, `Index Pool 1` only have `6,000 * 10**18` and `Index Pool 2` only have `4,000 * 10**18`, the `_actualDeduction` will be `10,000 * 10**18`, `_deductionFromPool` will be `0`.\n\n\n`Index Pool 1` should only pay `1,000 * 10**18`, but actually paid `6,000 * 10**18`, the LPs of `Index Pool 1` now suffer funds loss.\n\n### Recommendation\n\nChange to:\n\n```solidity\nuint256 _deductionFromIndex = (_debt * _totalCredit * MAGIC_SCALE_1E6) / totalLiquidity();\nuint256 _actualDeduction;\nfor (uint256 i = 0; i < indexList.length; i++) {\n    address _index = indexList[i];\n    uint256 _credit = indicies[_index].credit;\n    if (_credit > 0) {\n        uint256 _shareOfIndex = (_credit * MAGIC_SCALE_1E6) /\n            _totalCredit;\n        uint256 _redeemAmount = _divCeil(\n            _deductionFromIndex * _shareOfIndex,\n            MAGIC_SCALE_1E6 * MAGIC_SCALE_1E6\n        );\n        _actualDeduction += IIndexTemplate(_index).compensate(\n            _redeemAmount\n        );\n    }\n}\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/283/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/283/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/282","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/282/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/282/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/282/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/282","id":1102261020,"node_id":"I_kwDOGhqIJ85Bsysc","number":282,"title":"[WP-G37] Change `public` constant variables to `private` / `internal` can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T19:51:20Z","updated_at":"2022-01-25T10:16:45Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L146-L146\n\n```solidity\nuint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L95-L95\n\n```solidity\nuint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\n```\n\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L55-L55\n\n```solidity\nuint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\n```\n\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L38-L38\n\n```solidity\nuint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\n```\n\nFor the constants that should not be `public`, changing them to `private` / `internal` can save some gas. To avoid unnecessary getter functions.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/282/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/282/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/281","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/281/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/281/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/281/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/281","id":1102259373,"node_id":"I_kwDOGhqIJ85BsySt","number":281,"title":"[WP-H36] Admin of the index pool can `withdrawCredit()` after `applyCover()` to avoid taking loss for the compensation paid for a certain pool","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2022-01-13T19:50:26Z","updated_at":"2022-02-02T09:04:03Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nIn the current implementation, when an incident is reported for a certain pool, the index pool can still `withdrawCredit()` from the pool, which in the best interest of an index pool, the admin of the index pool is preferred to do so.\n\nThis allows the index pool to escape from the responsibility for the risks of invested pools.\n\nMaking the LPs of the pool take an unfair share of the responsibility.\n\n### PoC\n\n- Pool A `totalCredit` = 10,000\n- Pool A `rewardPerCredit` = 1\n\n1. [Index Pool 1] allocates 1,000 credits to Pool `A`:\n\n- `totalCredit` = 11,000\n- indicies[Index Pool 1] = 1,000\n\n2. After a while, Pool A `rewardPerCredit` has grown to `1.1`, and `applyCover()` has been called, [Index Pool 1] call `withdrawCredit()` get 100 premium\n\n- `totalCredit` = 10,000\n- indicies[Index Pool 1] = 0\n\n3. After `pendingEnd`, the pool `resume()`,[ Index Pool 1] will not be paying for the compensation since `credit` is 0.\n\nIn our case, [Index Pool 1] earned premium without paying for a part of the compensation.\n\n### Recommendation\n\nChange to:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L416-L421\n\n```solidity\n    function withdrawCredit(uint256 _credit)\n        external\n        override\n        returns (uint256 _pending)\n    {\n        require(\n            marketStatus == MarketStatus.Trading,\n            \"ERROR: WITHDRAW_CREDIT_BAD_CONDITIONS\"\n        );\n        IndexInfo storage _index = indicies[msg.sender];\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/281/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/281/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/278","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/278/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/278/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/278/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/278","id":1102256140,"node_id":"I_kwDOGhqIJ85BsxgM","number":278,"title":"[WP-H33] `IndexTemplate.sol` Wrong implementation allows lp of the index pool to resume a locked `PayingOut` pool and escape the responsibility for the compensation","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T19:48:38Z","updated_at":"2022-01-27T21:29:56Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nBased on the context, the system intends to lock all the lps during PayingOut period.\n\nHowever, the current implementation allows anyone, including LPs to call `resume()` and unlock the index pool.\n\nIt allows a malicious LP to escape the responsibility for the compensation, at the expense of other LPs paying more than expected.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L459-L471\n\n```solidity\nfunction resume() external override {\n    uint256 _poolLength = poolList.length;\n\n    for (uint256 i = 0; i < _poolLength; i++) {\n        require(\n            IPoolTemplate(poolList[i]).paused() == false,\n            \"ERROR: POOL_IS_PAUSED\"\n        );\n    }\n\n    locked = false;\n    emit Resumed();\n}\n```\n\n## Recommendation\n\nChange to:\n\n ```solidity\nfunction resume() external override {\n    uint256 _poolLength = poolList.length;\n\n    for (uint256 i = 0; i < _poolLength; i++) {\n        require(\n            IPoolTemplate(poolList[i]).marketStatus() == MarketStatus.Trading,\n            \"ERROR: POOL_IS_PAYINGOUT\"\n        );\n    }\n\n    locked = false;\n    emit Resumed();\n}\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/278/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/278/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/274","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/274/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/274/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/274/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/274","id":1102164838,"node_id":"I_kwDOGhqIJ85BsbNm","number":274,"title":"using operator `&&` used more gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T18:48:06Z","updated_at":"2022-01-29T05:50:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomio\n\n\n# Vulnerability details\n\n## Impact\nusing double require instead of operator `&&` can save more gas\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Vault.sol#L154\n\n## Recommended Mitigation Steps\nexample:\n\nusing &&:\n```\nfunction check(uint x)public view{\n    require(x == 0 && x < 1 );\n}\n```\n// gas cost 21630\n\nusing double require:\n```function check(uint x)public view{\n    require(x == 0 );\n    require( x < 1);\n    }\n}\n// gas cost 21622\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/274/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/274/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/272","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/272/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/272/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/272/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/272","id":1102145473,"node_id":"I_kwDOGhqIJ85BsWfB","number":272,"title":"[WP-H30] A malicious/compromised Registry or Factory admin can drain all the funds from the Vault contracts","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T18:32:52Z","updated_at":"2022-01-27T15:22:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L52-L58\n\n```solidity\nmodifier onlyMarket() {\n    require(\n        IRegistry(registry).isListed(msg.sender),\n        \"ERROR_ONLY_MARKET\"\n    );\n    _;\n}\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L201-L206\n\n```solidity\nfunction borrowValue(uint256 _amount, address _to) external onlyMarket override {\n    debts[msg.sender] += _amount;\n    totalDebt += _amount;\n\n    IERC20(token).safeTransfer(_to, _amount);\n}\n```\n\nThe current design/implementation allows a market address (registered on the `registry`) to call `Vault#borrowValue()` and transfer tokens to an arbitrary address.\n\n## PoC\n\nSee the PoC section on [WP-H24].\n\n## Recommendation\n\n1. Consider adding constrains (eg. timelock) to `Registry#supportMarket()`.\n2. Consdier adding constrains (upper bound for each pool, and index pool for example) to `Vault#borrowValue()`.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/272/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/272/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/271","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/271/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/271/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/271/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/271","id":1102145063,"node_id":"I_kwDOGhqIJ85BsWYn","number":271,"title":"[WP-H29] `Vault#setController()` owner of the Vault contracts can drain funds from the Vault","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T18:32:28Z","updated_at":"2022-01-27T15:22:00Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L485-L496\n\n```solidity\nfunction setController(address _controller) public override onlyOwner {\n    require(_controller != address(0), \"ERROR_ZERO_ADDRESS\");\n\n    if (address(controller) != address(0)) {\n        controller.migrate(address(_controller));\n        controller = IController(_controller);\n    } else {\n        controller = IController(_controller);\n    }\n\n    emit ControllerSet(_controller);\n}\n```\n\nThe owner of the Vault contract can set an arbitrary address as the `controller`.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L342-L352\n\n```solidity\nfunction utilize() external override returns (uint256 _amount) {\n    if (keeper != address(0)) {\n        require(msg.sender == keeper, \"ERROR_NOT_KEEPER\");\n    }\n    _amount = available(); //balance\n    if (_amount > 0) {\n        IERC20(token).safeTransfer(address(controller), _amount);\n        balance -= _amount;\n        controller.earn(address(token), _amount);\n    }\n}\n```\n\nA malicious `controller` contract can transfer funds from the Vault to the attacker.\n\n## PoC\n\nA malicious/compromised can:\n\n1. Call `Vault#setController()` and set `controller` to a malicious contract;\n    -   L489 the old controller will transfer funds to the new, malicious controller.\n2. Call `Vault#utilize()` to deposit all the balance in the Vault contract into the malicious controller contract.\n3. Withdraw all the funds from the malicious controller contract.\n\n## Recommendation\n\nConsider disallowing `Vault#setController()` to set a new address if a controller is existing, which terminates the possibility of migrating funds to a specified address provided by the owner. Or, putting a timelock to this function at least.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/271/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/271/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/270","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/270/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/270/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/270/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/270","id":1102144143,"node_id":"I_kwDOGhqIJ85BsWKP","number":270,"title":"[WP-L28] `Vault#_unutilize()` Lack of validation for the amount of funds received","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T18:31:35Z","updated_at":"2022-01-25T10:56:38Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L429-L434\n\n```solidity\nfunction _unutilize(uint256 _amount) internal {\n    require(address(controller) != address(0), \"ERROR_CONTROLLER_NOT_SET\");\n\n    controller.withdraw(address(this), _amount);\n    balance += _amount;\n}\n```\n\n### Recommendation\n\nCan be changed to:\n\n```solidity\nfunction _unutilize(uint256 _amount) internal {\n    require(address(controller) != address(0), \"ERROR_CONTROLLER_NOT_SET\");\n\n    uint256 beforeBalance = IERC20(token).balanceOf(address(this));\n    controller.withdraw(address(this), _amount);\n    uint256 received = IERC20(token).balanceOf(address(this)) - beforeBalance;\n    require(received >= _amount, \"...\");\n    balance += received;\n}\n```\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/270/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/269","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/269/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/269/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/269/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/269","id":1102143845,"node_id":"I_kwDOGhqIJ85BsWFl","number":269,"title":"[WP-H27] `IndexTemplate.sol#compensate()` will most certainly fail","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-01-13T18:31:18Z","updated_at":"2022-01-31T08:39:10Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\n## Root Cause\n\nPrecision loss while converting between `the amount of shares` and `the amount of underlying tokens` back and forth is not handled properly.\n\n---\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L438-L447\n\n```solidity\nuint256 _shortage;\nif (totalLiquidity() < _amount) {\n    //Insolvency case\n    _shortage = _amount - _value;\n    uint256 _cds = ICDSTemplate(registry.getCDS(address(this)))\n        .compensate(_shortage);\n    _compensated = _value + _cds;\n}\nvault.offsetDebt(_compensated, msg.sender);\n```\n\nIn the current implementation, when someone tries to resume the market after a pending period ends by calling `PoolTemplate.sol#resume()`, `IndexTemplate.sol#compensate()` will be called internally to make a payout. If the index pool is unable to cover the compensation, the CDS pool will then be used to cover the shortage.\n\nHowever, while `CDSTemplate.sol#compensate()` takes a parameter for the amount of underlying tokens, it uses `vault.transferValue()` to transfer corresponding `_attributions` (shares) instead of underlying tokens.\n\nDue to precision loss, the `_attributions` transferred in the terms of underlying tokens will most certainly be less than the shortage.\n\nAt L444, the contract believes that it's been compensated for `_value + _cds`, which is lower than the actual value, due to precision loss.\n\nAt L446, when it calls `vault.offsetDebt(_compensated, msg.sender)`, the tx will revert at `require(underlyingValue(msg.sender) >= _amount)`.\n\nAs a result, `resume()` can not be done, and the debt can't be repaid.\n\n### PoC \n\nGiven:\n\n- vault.underlyingValue = 10,000\n- vault.valueAll = 30,000\n- totalAttributions = 2,000,000\n- _amount = 1,010,000\n\n0. _shortage = _amount - vault.underlyingValue = 1,000,000\n1. _attributions = (_amount * totalAttributions) / valueAll = 67,333,333\n2. actualValueTransfered = (valueAll * _attributions) / totalAttributions = 1009999\n\n**Expected results**: actualValueTransfered = _shortage;\n\n**Actual results**: actualValueTransfered < _shortage.\n\n## Impact\n\nThe precision loss isn't just happening on special numbers, but will most certainly always revert the txs.\n\nThis will malfunction the contract as the index pool can not `compensate()`, therefore the pool can not `resume()`. Causing the funds of the LPs of the pool and the index pool to be frozen, and other stakeholders of the same vault will suffer fund loss from an unfair share of the funds compensated before.\n\n## Recommendation\n\nChange to:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L439-L446\n\n```solidity\nif (totalLiquidity() < _amount) {\n    //Insolvency case\n    _shortage = _amount - _value;\n    uint256 _cds = ICDSTemplate(registry.getCDS(address(this)))\n        .compensate(_shortage);\n    _compensated = vault.underlyingValue(address(this));\n}\nvault.offsetDebt(_compensated, msg.sender);\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/269/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/269/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/268","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/268/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/268/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/268/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/268","id":1102142946,"node_id":"I_kwDOGhqIJ85BsV3i","number":268,"title":"[WP-L26] `Vault#setController()` Lack of validation for the amount of migrated funds","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T18:30:22Z","updated_at":"2022-01-25T11:00:11Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L485-L496\n\n```solidity\nfunction setController(address _controller) public override onlyOwner {\n    require(_controller != address(0), \"ERROR_ZERO_ADDRESS\");\n\n    if (address(controller) != address(0)) {\n        controller.migrate(address(_controller));\n        controller = IController(_controller);\n    } else {\n        controller = IController(_controller);\n    }\n\n    emit ControllerSet(_controller);\n}\n```\n\n`controller.migrate()` is a critical operation, we recommend adding validation for the amount of migrated funds.\n\n### Recommendation\n\nCan be changed to:\n\n```solidity\nfunction setController(address _controller) public override onlyOwner {\n    require(_controller != address(0), \"ERROR_ZERO_ADDRESS\");\n\n    if (address(controller) != address(0)) {\n        uint256 beforeUnderlying = controller.valueAll();\n        controller.migrate(address(_controller));\n        require(IController(_controller).valueAll() >= beforeUnderlying, \"...\");\n        controller = IController(_controller);\n    } else {\n        controller = IController(_controller);\n    }\n\n    emit ControllerSet(_controller);\n}\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/268/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/268/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/266","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/266/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/266/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/266/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/266","id":1102141009,"node_id":"I_kwDOGhqIJ85BsVZR","number":266,"title":"[WP-H24] Wrong design/implementation of permission control allows malicious/compromised Registry or Factory admin to steal funds from users' wallet balances","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T18:28:27Z","updated_at":"2022-01-27T15:19:57Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThe current design/implementation allows a `market` address (registered on `registry`) to call `Vault#addValue()` and transfer tokens from an arbitrary address to a specified `_beneficiary` up the approved amount at any time, and the `_beneficiary` can withdraw the funds by calling `Vault#withdrawAllAttribution()` immediately.\n\nThis poses a very dangerous risk to all the users that approved their tokens to the Vault contracts (each one holds all users' allowances for that token).\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L52-L58\n\n```solidity=52\nmodifier onlyMarket() {\n    require(\n        IRegistry(registry).isListed(msg.sender),\n        \"ERROR_ONLY_MARKET\"\n    );\n    _;\n}\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L124-L140\n\n```solidity=124\nfunction addValue(\n    uint256 _amount,\n    address _from,\n    address _beneficiary\n) external override onlyMarket returns (uint256 _attributions) {\n\n    if (totalAttributions == 0) {\n        _attributions = _amount;\n    } else {\n        uint256 _pool = valueAll();\n        _attributions = (_amount * totalAttributions) / _pool;\n    }\n    IERC20(token).safeTransferFrom(_from, address(this), _amount);\n    balance += _amount;\n    totalAttributions += _attributions;\n    attributions[_beneficiary] += _attributions;\n}\n```\n\nRegistry owner can call `Registry#supportMarket()` and mark an arbitrary address as a `market`.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Registry.sol#L49-L60\n\n```solidity=49\nfunction supportMarket(address _market) external override {\n    require(!markets[_market], \"ERROR: ALREADY_REGISTERED\");\n    require(\n        msg.sender == factory || msg.sender == ownership.owner(),\n        \"ERROR: UNAUTHORIZED_CALLER\"\n    );\n    require(_market != address(0), \"ERROR: ZERO_ADDRESS\");\n\n    allMarkets.push(_market);\n    markets[_market] = true;\n    emit NewMarketRegistered(_market);\n}\n```\n\nOr, the owner of the Factory can call `createMarket()` to add a malicous market contract via a custom template contract to the `markets` list.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L214-L216\n\n## PoC\n\nA malicious/compromised Registry owner can:\n\n1. Call `Registry#supportMarket()` and set `markets[attackerAddress]` to `true`;\n2. Call `Vault#addValue(token.balanceOf(victimAddress), victimAddress, attackerAddress)` and transferring all the balanceOf victim's wallet to the vault, owned by `attackerAddress`.\n3. Call `Vault#withdrawAllAttribution(attackerAddress)` and retrive the funds.\n\nThe malicious/compromised Registry owner can repeat the steps above for all the users who approved the Vault contract for all the Vault contracts.\n\nAs a result, the attacker can steal all the wallet balances of the tokens approved to the protocol.\n\n## Root Cause\n\nImproper access control for using users' allowances.\n\n## Recommendation\n\nConsider changing the design/implementation to make sure that the allowances approved by the users can only be used by themselves.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/266/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/266/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/265","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/265/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/265/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/265/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/265","id":1102137045,"node_id":"I_kwDOGhqIJ85BsUbV","number":265,"title":"[WP-G23] Avoiding unnecessary storage read can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T18:24:53Z","updated_at":"2022-01-25T11:50:26Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Ownership.sol#L17-L20\n\n```solidity\nconstructor() {\n    _owner = msg.sender;\n    emit AcceptNewOwnership(_owner);\n}\n```\n\nAt L19, the parameter of `AcceptNewOwnership` can use `msg.sender` directly to avoid unnecessary storage read of `_owner` to save some gas.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Ownership.sol#L65-L71\n\n```solidity\nfunction acceptTransferOwnership() external override onlyFutureOwner {\n    /***\n        *@notice Accept a transfer of ownership\n        */\n    _owner = _futureOwner;\n    emit AcceptNewOwnership(_owner);\n}\n```\n\nAt L69, `_futureOwner` can use `msg.sender` directly to avoid unnecessary storage read of `_futureOwner` to save some gas.\n\nAs `onlyFutureOwner()` ensures that `require(_futureOwner == msg.sender, \"...\");`.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/265/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/265/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/264","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/264/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/264/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/264/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/264","id":1102136770,"node_id":"I_kwDOGhqIJ85BsUXC","number":264,"title":"[WP-G21] Cache external call results can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"pontagon333","id":87188356,"node_id":"MDQ6VXNlcjg3MTg4MzU2","avatar_url":"https://avatars.githubusercontent.com/u/87188356?v=4","gravatar_id":"","url":"https://api.github.com/users/pontagon333","html_url":"https://github.com/pontagon333","followers_url":"https://api.github.com/users/pontagon333/followers","following_url":"https://api.github.com/users/pontagon333/following{/other_user}","gists_url":"https://api.github.com/users/pontagon333/gists{/gist_id}","starred_url":"https://api.github.com/users/pontagon333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pontagon333/subscriptions","organizations_url":"https://api.github.com/users/pontagon333/orgs","repos_url":"https://api.github.com/users/pontagon333/repos","events_url":"https://api.github.com/users/pontagon333/events{/privacy}","received_events_url":"https://api.github.com/users/pontagon333/received_events","type":"User","site_admin":false},"assignees":[{"login":"pontagon333","id":87188356,"node_id":"MDQ6VXNlcjg3MTg4MzU2","avatar_url":"https://avatars.githubusercontent.com/u/87188356?v=4","gravatar_id":"","url":"https://api.github.com/users/pontagon333","html_url":"https://github.com/pontagon333","followers_url":"https://api.github.com/users/pontagon333/followers","following_url":"https://api.github.com/users/pontagon333/following{/other_user}","gists_url":"https://api.github.com/users/pontagon333/gists{/gist_id}","starred_url":"https://api.github.com/users/pontagon333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pontagon333/subscriptions","organizations_url":"https://api.github.com/users/pontagon333/orgs","repos_url":"https://api.github.com/users/pontagon333/repos","events_url":"https://api.github.com/users/pontagon333/events{/privacy}","received_events_url":"https://api.github.com/users/pontagon333/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-13T18:24:38Z","updated_at":"2022-01-26T08:43:46Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nEvery call to an external contract costs a decent amount of gas. For optimization of gas usage, external call results should be cached if they are being used for more than one time.\n\nFor example:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L153-L158\n\n```solidity\nrequire(\n    attributions[msg.sender] > 0 &&\n        underlyingValue(msg.sender) >= _amount,\n    \"ERROR_WITHDRAW-VALUE_BADCONDITOONS\"\n);\n_attributions = (totalAttributions * _amount) / valueAll();\n```\n\nIn `Vault#withdrawValue()`, `controller.valueAll()` is called twice:\n\n1. L155 `underlyingValue(msg.sender)` -> `valueAll()` -> `controller.valueAll()`;\n1. L158 `valueAll()` ->  `controller.valueAll()`.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L400-L411\n\n```solidity\nfunction underlyingValue(address _target)\n    public\n    view\n    override\n    returns (uint256)\n{\n    if (attributions[_target] > 0) {\n        return (valueAll() * attributions[_target]) / totalAttributions;\n    } else {\n        return 0;\n    }\n}\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L417-L423\n\n```solidity\nfunction valueAll() public view returns (uint256) {\n    if (address(controller) != address(0)) {\n        return balance + controller.valueAll();\n    } else {\n        return balance;\n    }\n}\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/264/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/264/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/263","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/263/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/263/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/263/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/263","id":1102068623,"node_id":"I_kwDOGhqIJ85BsDuP","number":263,"title":"the first depositor to a pool can drain all users","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-01-13T17:24:11Z","updated_at":"2022-01-27T15:24:46Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ndanb\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L807\nif there is no liquidity in the pool, the first deposit determines the total liquidity, if the amount is too small the minted liquidity for the next liquidity providers will round down to zero.\n## Impact\nAn attacker can steal all money from liquidity providers.\n## Proof of Concept\nconsider the following scenario:\na pool is created.\nthe attacker is the first one to deposit, they deposit with _amount == 1, the smallest amount possible. meaning the total liquidity is 1.\nthen they join another pool in order to get attributions in the vault.\nthey transfer the attributions to the pool using `transferAttribution`.\nfor example, they transferred 1M dollar worth of attributions.\nthe next person deposits in the index, for example, 500,000 dollars.\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L803\nthe amount they will get is:\n```\n_amount = (_value * _supply) / _originalLiquidity;\n```\nas we know:\n_amount = 500,000 dollar\n_supply = 1\n_totalLiquidity = 1,000,000 dollar (the attacker transferred directly)\nthe investor will get (500,000 dollar * 1) / (1,000,000 dollar) = 0\nand they will pay 500,000\nthis money will go to the index, and the attacker holds all of the shares, so they can withdraw it and get 1,500,000 stealing 500,000 dollars from the second investor.\n\n## Tools Used\nmanual review\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/263/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/263/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/262","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/262/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/262/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/262/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/262","id":1102059720,"node_id":"I_kwDOGhqIJ85BsBjI","number":262,"title":"PoolTemplate.availableBalance calls totalLiquidity twice","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"pontagon333","id":87188356,"node_id":"MDQ6VXNlcjg3MTg4MzU2","avatar_url":"https://avatars.githubusercontent.com/u/87188356?v=4","gravatar_id":"","url":"https://api.github.com/users/pontagon333","html_url":"https://github.com/pontagon333","followers_url":"https://api.github.com/users/pontagon333/followers","following_url":"https://api.github.com/users/pontagon333/following{/other_user}","gists_url":"https://api.github.com/users/pontagon333/gists{/gist_id}","starred_url":"https://api.github.com/users/pontagon333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pontagon333/subscriptions","organizations_url":"https://api.github.com/users/pontagon333/orgs","repos_url":"https://api.github.com/users/pontagon333/repos","events_url":"https://api.github.com/users/pontagon333/events{/privacy}","received_events_url":"https://api.github.com/users/pontagon333/received_events","type":"User","site_admin":false},"assignees":[{"login":"pontagon333","id":87188356,"node_id":"MDQ6VXNlcjg3MTg4MzU2","avatar_url":"https://avatars.githubusercontent.com/u/87188356?v=4","gravatar_id":"","url":"https://api.github.com/users/pontagon333","html_url":"https://github.com/pontagon333","followers_url":"https://api.github.com/users/pontagon333/followers","following_url":"https://api.github.com/users/pontagon333/following{/other_user}","gists_url":"https://api.github.com/users/pontagon333/gists{/gist_id}","starred_url":"https://api.github.com/users/pontagon333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pontagon333/subscriptions","organizations_url":"https://api.github.com/users/pontagon333/orgs","repos_url":"https://api.github.com/users/pontagon333/repos","events_url":"https://api.github.com/users/pontagon333/events{/privacy}","received_events_url":"https://api.github.com/users/pontagon333/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-13T17:16:11Z","updated_at":"2022-01-25T10:24:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nhyh\n\n\n# Vulnerability details\n\n## Impact\n\nGas is overspent on the function call\n\n## Proof of Concept\n\navailableBalance calls totalLiquidity() twice:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L835\n\n## Recommended Mitigation Steps\n\nSave the call result to memory and use it\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/262/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/262/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/259","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/259/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/259/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/259/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/259","id":1101994951,"node_id":"I_kwDOGhqIJ85BrxvH","number":259,"title":"Keeper, not controller: Vault.setKeeper and utilize descriptions are incorrect","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T16:17:08Z","updated_at":"2022-01-26T08:52:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nhyh\n\n\n# Vulnerability details\n\n\n\n## Impact\n\n`setKeeper` / `utilize` descriptions state that it is controller who is set / can run utilize, while keeper and controller are two separate roles, which don't have to coincide.\n\nI.e. the descriptions now mix up the roles and are confusing this way.\n\n## Proof of Concept\n\nsetKeeper:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Vault.sol#L499\n\n\nutilize:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Vault.sol#L339\n\n\n## Recommended Mitigation Steps\n\nUpdate the descriptions to relate to the `keeper` role.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/259/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/259/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/253","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/253/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/253/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/253/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/253","id":1101968013,"node_id":"I_kwDOGhqIJ85BrrKN","number":253,"title":"Struct layout","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-01-13T15:54:18Z","updated_at":"2022-01-28T07:42:47Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nJujic\n\n\n# Vulnerability details\n\n## Impact\nInsurance struct in `PoolTemplate .sol` can be optimized to reduce 2 storage slot\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L127-L128\n```\nstruct Insurance {\n        uint256 id; //each insuance has their own id\n        uint256 startTime; //timestamp of starttime\n        uint256 endTime; //timestamp of endtime\n        uint256 amount; //insured amount\n        bytes32 target; //target id in bytes32\n        address insured; //the address holds the right to get insured\n        bool status; //true if insurance is not expired or redeemed\n    }\n```\n`startTime` and `endTime `store block numbers, and 2^48 is being enough for a very long time.\n## Tools Used\nhttps://docs.soliditylang.org/en/v0.8.0/internals/layout_in_storage.html?highlight=Structs#layout-of-state-variables-in-storage\n\n\n## Recommended Mitigation Steps\nThe struct can be changed into:\n```\nstruct Insurance {\n        uint256 id; //each insuance has their own id\n        uint48 startTime; //timestamp of starttime\n        uint48 endTime; //timestamp of endtime\n        address insured; //the address holds the right to get insured\n        uint256 amount; //insured amount\n        bytes32 target; //target id in bytes32\n        bool status; //true if insurance is not expired or redeemed\n    }\n```\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/253/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/253/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/252","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/252/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/252/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/252/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/252","id":1101938998,"node_id":"I_kwDOGhqIJ85BrkE2","number":252,"title":"backdoor in `withdrawRedundant`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2022-01-13T15:29:17Z","updated_at":"2022-02-02T09:13:07Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nThe `Vault.withdrawRedundant` has wrong logic that allows the admins to steal the underlying vault token.\n\n```solidity\nfunction withdrawRedundant(address _token, address _to)\n     external\n     override\n     onlyOwner\n{\n     if (\n          _token == address(token) &&\n          balance < IERC20(token).balanceOf(address(this))\n     ) {\n          uint256 _redundant = IERC20(token).balanceOf(address(this)) -\n               balance;\n          IERC20(token).safeTransfer(_to, _redundant);\n     } else if (IERC20(_token).balanceOf(address(this)) > 0) {\n          // @audit they can rug users. let's say balance == IERC20(token).balanceOf(address(this)) => first if false => transfers out everything\n          IERC20(_token).safeTransfer(\n               _to,\n               IERC20(_token).balanceOf(address(this))\n          );\n     }\n}\n```\n\n#### POC\n- Vault deposits increase as `Vault.addValue` is called and the `balance` increases by `_amount` as well as the actual `IERC20(token).balanceOf(this)`. Note that `balance == IERC20(token).balanceOf(this)`\n- Admins call `vault.withdrawRedundant(vault.token(), attacker)` which goes into the `else if` branch due to the balance inequality condition being `false`. It will transfer out all `vault.token()` amounts to the attacker.\n\n## Impact\nThere's a backdoor in the `withdrawRedundant` that allows admins to steal all user deposits.\n\n## Recommended Mitigation Steps\nI think the devs wanted this logic from the code instead:\n\n```solidity\nfunction withdrawRedundant(address _token, address _to)\n     external\n     override\n     onlyOwner\n{\n     if (\n          _token == address(token)\n     ) {\n          if (balance < IERC20(token).balanceOf(address(this))) {\n               uint256 _redundant = IERC20(token).balanceOf(address(this)) -\n                    balance;\n               IERC20(token).safeTransfer(_to, _redundant);\n          }\n     } else if (IERC20(_token).balanceOf(address(this)) > 0) {\n          IERC20(_token).safeTransfer(\n               _to,\n               IERC20(_token).balanceOf(address(this))\n          );\n     }\n}\n```\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/252/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/252/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/250","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/250/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/250/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/250/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/250","id":1101937353,"node_id":"I_kwDOGhqIJ85BrjrJ","number":250,"title":"Initial pool deposit can be stolen","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-13T15:27:58Z","updated_at":"2022-02-03T03:01:57Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nNote that the `PoolTemplate.initialize` function, called when creating a market with `Factory.createMarket`, calls a vault function to transfer an initial deposit amount (`conditions[1]`) _from_ the initial depositor (`_references[4]`):\n\n```solidity\n// PoolTemplate\nfunction initialize(\n     string calldata _metaData,\n     uint256[] calldata _conditions,\n     address[] calldata _references\n) external override {\n     // ...\n\n     if (_conditions[1] > 0) {\n          // @audit vault calls asset.transferFrom(_references[4], vault, _conditions[1])\n          _depositFrom(_conditions[1], _references[4]);\n     }\n}\n\nfunction _depositFrom(uint256 _amount, address _from)\n     internal\n     returns (uint256 _mintAmount)\n{\n     require(\n          marketStatus == MarketStatus.Trading && paused == false,\n          \"ERROR: DEPOSIT_DISABLED\"\n     );\n     require(_amount > 0, \"ERROR: DEPOSIT_ZERO\");\n\n     _mintAmount = worth(_amount);\n     // @audit vault calls asset.transferFrom(_from, vault, _amount)\n     vault.addValue(_amount, _from, address(this));\n\n     emit Deposit(_from, _amount, _mintAmount);\n\n     //mint iToken\n     _mint(_from, _mintAmount);\n}\n```\n\nThe initial depositor needs to first approve the vault contract for the `transferFrom` to succeed.\n\nAn attacker can then frontrun the `Factory.createMarket` transaction with their own market creation (it does not have access restrictions) and create a market _with different parameters_ but still passing in `_conditions[1]=amount` and `_references[4]=victim`.\n\nA market with parameters that the initial depositor did not want (different underlying, old whitelisted registry/parameter contract, etc.) can be created with their tokens and these tokens are essentially lost.\n\n## Recommended Mitigation Steps\nCan the initial depositor be set to `Factory.createMarket`'s `msg.sender`, instead of being able to pick a whitelisted one as `_references[4]`?\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/250/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/250/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/249","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/249/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/249/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/249/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/249","id":1101936846,"node_id":"I_kwDOGhqIJ85BrjjO","number":249,"title":"Premium payments can be timed","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2022-01-13T15:27:32Z","updated_at":"2022-01-27T22:07:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nThe Index pool allows depositing / withdrawing and the amount is a share on the `totalLiquidity = vault.underlyingValue(address(this)) + _accruedPremiums();`.\nThe premiums are increased only when a `PoolTemplate.invest()` transaction is run.\n\nAn attacker can therefore steal part of the premiums by:\n1. Depositing into an index with `IndexTemplate.deposit` right before the `PoolTemplate.invest()` transaction. Request the withdrawal with `requestWithdraw`\n2. Withdraw after the transaction again (or after the minimum withdrawal time passed) using `IndexTemplate.withdraw`\n\n## Recommended Mitigation Steps\nMake sure `_lockup = parameters.getLockup(msg.sender);` is a reasonable long time to make these premium timing attacks less interesting.\nAlternatively, stream the premium over time to every depositor instead of as a single big reward to all current depositors.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/249/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/249/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/248","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/248/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/248/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/248/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/248","id":1101936398,"node_id":"I_kwDOGhqIJ85BrjcO","number":248,"title":"Lower slack can be higher than upper slack","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"},{"id":3638637962,"node_id":"LA_kwDOGhqIJ87Y4TWK","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20disputed","name":"sponsor disputed","color":"B60205","default":false,"description":"Sponsor cannot duplicate the issue, or otherwise disagrees this is an issue"}],"state":"open","locked":false,"assignee":{"login":"aoki0430","id":31432520,"node_id":"MDQ6VXNlcjMxNDMyNTIw","avatar_url":"https://avatars.githubusercontent.com/u/31432520?v=4","gravatar_id":"","url":"https://api.github.com/users/aoki0430","html_url":"https://github.com/aoki0430","followers_url":"https://api.github.com/users/aoki0430/followers","following_url":"https://api.github.com/users/aoki0430/following{/other_user}","gists_url":"https://api.github.com/users/aoki0430/gists{/gist_id}","starred_url":"https://api.github.com/users/aoki0430/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aoki0430/subscriptions","organizations_url":"https://api.github.com/users/aoki0430/orgs","repos_url":"https://api.github.com/users/aoki0430/repos","events_url":"https://api.github.com/users/aoki0430/events{/privacy}","received_events_url":"https://api.github.com/users/aoki0430/received_events","type":"User","site_admin":false},"assignees":[{"login":"aoki0430","id":31432520,"node_id":"MDQ6VXNlcjMxNDMyNTIw","avatar_url":"https://avatars.githubusercontent.com/u/31432520?v=4","gravatar_id":"","url":"https://api.github.com/users/aoki0430","html_url":"https://github.com/aoki0430","followers_url":"https://api.github.com/users/aoki0430/followers","following_url":"https://api.github.com/users/aoki0430/following{/other_user}","gists_url":"https://api.github.com/users/aoki0430/gists{/gist_id}","starred_url":"https://api.github.com/users/aoki0430/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aoki0430/subscriptions","organizations_url":"https://api.github.com/users/aoki0430/orgs","repos_url":"https://api.github.com/users/aoki0430/repos","events_url":"https://api.github.com/users/aoki0430/events{/privacy}","received_events_url":"https://api.github.com/users/aoki0430/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-01-13T15:27:11Z","updated_at":"2022-02-07T09:20:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nThe `Parameters.setLowerSlack/setUpperSlack` functions do not check that the new value does still satisfy the `_lowerSlack <= _upperSlack` condition.\n\n## Recommended Mitigation Steps\nCheck that `_lowerSlack <= _upperSlack`  is still satisfied in these functions.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/248/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/248/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/247","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/247/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/247/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/247/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/247","id":1101935998,"node_id":"I_kwDOGhqIJ85BrjV-","number":247,"title":"Future owner is not cleared","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T15:26:52Z","updated_at":"2022-01-25T10:39:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nThe `Ownership.acceptTransferOwnership` function does not reset `_futureOwner` to zero.\n\n## Impact\nThe future owner can repeatedly accept the governance, emitting an `AcceptNewOwnership` event each time, bloating listeners for this event with unnecessary data.\n\n## Recommended Mitigation Steps\nReset `_futureOwner` to zero in `acceptTransferOwnership`.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/247/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/247/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/246","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/246/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/246/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/246/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/246","id":1101935465,"node_id":"I_kwDOGhqIJ85BrjNp","number":246,"title":"Can create market without some conditions","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2022-01-13T15:26:25Z","updated_at":"2022-01-20T09:22:43Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nThe `Factory.createMarket` function copies the conditions from the `conditionlist` only according to the length of provided `_conditions` parameter:\n\n```solidity\nif (_conditions.length > 0) {\n     for (uint256 i = 0; i < _conditions.length; i++) {\n          if (conditionlist[address(_template)][i] > 0) {\n          // @audit can only partially use conditions by passing _conditions.length < conditionlist[..].length\n          _conditions[i] = conditionlist[address(_template)][i];\n          }\n     }\n}\n```\n\n## Impact\nThe user can create markets that don't use all (or none) of the conditions for the template.\nIf they only want condition at index 2 they cannot do that as it will always also copy conditions 0 and 1.\n\n## Recommended Mitigation Steps\nEither always use all conditions or allow a more selective choice of conditions that does not require using all conditions `i < j` when condition `j` is desired.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/246/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/246/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/244","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/244/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/244/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/244/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/244","id":1101925596,"node_id":"I_kwDOGhqIJ85Brgzc","number":244,"title":"Typo for withdawable in multiple places in Parameters.sol  ","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T15:18:00Z","updated_at":"2022-01-27T22:51:53Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nhubble\n\n\n# Vulnerability details\n\nFeel free to lower the severity of the issue to Non-critical.\n\n## Impact\nCorrectness of variable name\n\n## Proof of Concept\nFile : Parameters.sol\n\n  line 39 :    mapping(address => uint256) private _withdawable;\n  line 153 :         _withdawable[_address] = _target;\n  line 349-352 :\n        if (_withdawable[_target] == 0) {\n            return _withdawable[address(0)];\n        } else {\n            return _withdawable[_target];\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nChange typo to _withdrawable\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/244/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/244/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/243","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/243/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/243/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/243/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/243","id":1101922032,"node_id":"I_kwDOGhqIJ85Brf7w","number":243,"title":"Input validation not done in few important functions in Parameters.sol","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-01-13T15:14:59Z","updated_at":"2022-02-07T09:21:47Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nhubble\n\n\n# Vulnerability details\n\n\n## Impact\nInput validation required for few important parameters as mentioned in the below functions.\n\n## Proof of Concept\nFile : Parameters.sol\n   line 120 :     function setUpperSlack(address _address, uint256 _target)  \n        Need to check that the _target value should be less than or equal to 100% (1000)\n\n   line 134 :     function setLowerSlack(address _address, uint256 _target) \n        Need to check that the _target value should be less than or equal to corresponding UpperSlack Value\n\n   line 177 :     function setFeeRate(address _address, uint256 _target)  \n        Need to check that the _target value should be less than or equal to 1e6 (1000000)\n\n   line 191 :     function setMaxList(address _address, uint256 _target)  \n        Need to check that the _target value should be greater than 1\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nAdd require statements with proper value and comments for the respective input fields as given above\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/243/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/243/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/242","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/242/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/242/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/242/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/242","id":1101916180,"node_id":"I_kwDOGhqIJ85BregU","number":242,"title":"Inconsistency in pragma solidity version definition in InsureDAOERC20.sol","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T15:10:10Z","updated_at":"2022-01-25T09:12:34Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nhubble\n\n\n# Vulnerability details\n\n\n## Impact\nInconsistency in pragma solidity versions in different solidity files.\n\n## Proof of Concept\nFile : InsureDAOERC20.sol\n       pragma solidity ^0.8.0;\n\nAll other solidity files in the project\n       pragma solidity 0.8.7;\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nSet the version to 0.8.7 in the InsureDAOERC20.sol file\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/242/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/242/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/240","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/240/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/240/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/240/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/240","id":1101825828,"node_id":"I_kwDOGhqIJ85BrIck","number":240,"title":"Constructor not used","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-13T14:18:14Z","updated_at":"2022-01-27T05:58:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nJujic\n\n\n# Vulnerability details\n\n## Impact\nThe constructor is empty. You should remove constructor to save some gas.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/InsureDAOERC20.sol#L21\n```\nconstructor() {}\n```\n\n## Tools Used\n\n## Recommended Mitigation Steps\nRemove unused constructor\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/240/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/240/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/238","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/238/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/238/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/238/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/238","id":1101775670,"node_id":"I_kwDOGhqIJ85Bq8M2","number":238,"title":"[WP-G19] Changing bool to uint256 can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-13T13:54:19Z","updated_at":"2022-01-16T06:52:19Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nBooleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L46-L46\n\n```solidity\nbool public paused;\n```\n\n## Recommendation\n\nConsider changing to:\n\n```solidity\nuint256 private constant _NOT_PAUSED = 0;\nuint256 private constant _PAUSED = 1;\n\nuint256 public paused;\n```\n\nOther examples include:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L45-L45\n\n```solidity\nbool public initialized;\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L59-L61\n\n```solidity\nbool public initialized;\nbool public paused;\nbool public locked;\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/238/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/238/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/237","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/237/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/237/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/237/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/237","id":1101774052,"node_id":"I_kwDOGhqIJ85Bq7zk","number":237,"title":"[WP-G18] Avoiding repeated `marketStatus` checks can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-13T13:53:33Z","updated_at":"2022-01-25T11:58:07Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nCheck `marketStatus` before for loops can save gas from unnecessary repeated checks.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L342-L365\n\n```solidity\nfunction unlockBatch(uint256[] calldata _ids) external {\n    for (uint256 i = 0; i < _ids.length; i++) {\n        unlock(_ids[i]);\n    }\n}\n\nfunction unlock(uint256 _id) public {\n    require(\n        insurances[_id].status == true &&\n            marketStatus == MarketStatus.Trading &&\n            insurances[_id].endTime + parameters.getGrace(msg.sender) <\n            block.timestamp,\n        \"ERROR: UNLOCK_BAD_COINDITIONS\"\n    );\n    insurances[_id].status == false;\n\n    lockedAmount = lockedAmount - insurances[_id].amount;\n\n    emit Unlocked(_id, insurances[_id].amount);\n}\n```\n\n### Recomandation\n\nChange to:\n\n```solidity\nfunction unlockBatch(uint256[] calldata _ids) external {\n    require(marketStatus == MarketStatus.Trading, \"ERROR: UNLOCK_BAD_COINDITIONS\")\n    for (uint256 i = 0; i < _ids.length; i++) {\n        _unlock(_ids[i]);\n    }\n}\n\nfunction unlock(uint256 _id) external {\n    require(marketStatus == MarketStatus.Trading, \"ERROR: UNLOCK_BAD_COINDITIONS\");\n    _unlock(_id);\n}\n\nfunction _unlock(uint256 _id) internal {\n    require(\n        insurances[_id].status == true &&\n            insurances[_id].endTime + parameters.getGrace(msg.sender) <\n            block.timestamp,\n        \"ERROR: UNLOCK_BAD_COINDITIONS\"\n    );\n    insurances[_id].status == false;\n\n    lockedAmount = lockedAmount - insurances[_id].amount;\n\n    emit Unlocked(_id, insurances[_id].amount);\n}\n```\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/237/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/236","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/236/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/236/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/236/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/236","id":1101771204,"node_id":"I_kwDOGhqIJ85Bq7HE","number":236,"title":"[WP-M17] `Vault.sol` Tokens with fee on transfer are not supported","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637929,"node_id":"LA_kwDOGhqIJ87Y4TVp","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/2%20(Med%20Risk)","name":"2 (Med Risk)","color":"FBCA04","default":false,"description":"Assets not at direct risk, but function/availability of the protocol could be impacted or leak value"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T13:52:11Z","updated_at":"2022-01-27T22:27:38Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThere are ERC20 tokens that charge fee for every `transfer()` / `transferFrom()`.\n\n`Vault.sol#addValue()` assumes that the received amount is the same as the transfer amount, and uses it to calculate attributions, balance amounts, etc. While the actual transferred amount can be lower for those tokens.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L124-L140\n\n```solidity\nfunction addValue(\n    uint256 _amount,\n    address _from,\n    address _beneficiary\n) external override onlyMarket returns (uint256 _attributions) {\n\n    if (totalAttributions == 0) {\n        _attributions = _amount;\n    } else {\n        uint256 _pool = valueAll();\n        _attributions = (_amount * totalAttributions) / _pool;\n    }\n    IERC20(token).safeTransferFrom(_from, address(this), _amount);\n    balance += _amount;\n    totalAttributions += _attributions;\n    attributions[_beneficiary] += _attributions;\n}\n```\n\n### Recommendation\n\nConsider comparing before and after balance to get the actual transferred amount.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/236/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/236/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/233","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/233/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/233/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/233/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/233","id":1101767053,"node_id":"I_kwDOGhqIJ85Bq6GN","number":233,"title":"[WP-G14] `AuctionBurnReserveSkew.sol#deposit()` Implementation can be simpler and save some gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-13T13:50:10Z","updated_at":"2022-01-28T01:10:18Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L260-L270\n\n```solidity\nif (_available >= _amount) {\n    _compensated = _amount;\n    _attributionLoss = vault.transferValue(_amount, msg.sender);\n    emit Compensated(msg.sender, _amount);\n} else {\n    //when CDS cannot afford, pay as much as possible\n    _compensated = _available;\n    _attributionLoss = vault.transferValue(_available, msg.sender);\n    emit Compensated(msg.sender, _available);\n}\n\n```\n\n### Recommendation\n\nChange to:\n\n```solidity\n_compensated = _available >= _amount? _amount: _available;\n\n_attributionLoss = vault.transferValue(_compensated, msg.sender);\nemit Compensated(msg.sender, _compensated);\n```\n\n- Duplicated codes removed;\n- Shorter and simpler code.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/233/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/233/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/231","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/231/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/231/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/231/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/231","id":1101764611,"node_id":"I_kwDOGhqIJ85Bq5gD","number":231,"title":"[WP-G12] Cache function call results in the stack can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-13T13:48:57Z","updated_at":"2022-01-28T01:09:05Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nCache and reusing the function call results, instead of calling it again, can save gas from unnecessary code execution.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L163-L173\n\n```solidity\nif (available() < _amount) { \n    //when USDC in this contract isn't enough\n    uint256 _shortage = _amount - available();\n    _unutilize(_shortage);\n\n    assert(available() >= _amount);\n}\n\nbalance -= _amount;\nIERC20(token).safeTransfer(_to, _amount);\n```\n\n### Recommendation\n\nChange to:\n\n```solidity\nuint256 availableAmount = available()\nif ( availableAmount < _amount) { \n    //when USDC in this contract isn't enough\n    uint256 _shortage = _amount - available();\n    _unutilize(_shortage);\n\n    assert(availableAmount >= _amount);\n}\n\nbalance -= _amount;\nIERC20(token).safeTransfer(_to, _amount);\n```\n\nOther examples include:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L295-L304\n\n```solidity\nfunction rate() external view returns (uint256) {\n    if (totalSupply() > 0) {\n        return\n            (vault.attributionValue(crowdPool) * MAGIC_SCALE_1E6) /\n            totalSupply();\n    } else {\n        return 0;\n    }\n}\n```\n\n`totalSupply()`\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L309-L312\n\n```solidity\nif (available() < _retVal) {\n    uint256 _shortage = _retVal - available();\n    _unutilize(_shortage);\n}\n```\n\n`available()`\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/231/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/231/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/230","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/230/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/230/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/230/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/230","id":1101764127,"node_id":"I_kwDOGhqIJ85Bq5Yf","number":230,"title":"[WP-G11] Check of `_amount > 0` can be done earlier to save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-13T13:48:42Z","updated_at":"2022-01-28T01:08:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nWhen there are multiple checks, adjusting the sequence to allow the tx to fail earlier can save some gas.\n\nChecks using less gas should be executed earlier than those with higher gas costs, to avoid unnecessary storage read, arithmetic operations, etc when it reverts.\n\nFor example:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L238-L256\n\n```solidity\nrequire(paused == false, \"ERROR: PAUSED\");\nrequire(\n    request.timestamp +\n        parameters.getLockup(msg.sender) <\n        block.timestamp,\n    \"ERROR: WITHDRAWAL_QUEUE\"\n);\nrequire(\n    request.timestamp +\n        parameters.getLockup(msg.sender) +\n        parameters.getWithdrawable(msg.sender) >\n        block.timestamp,\n    \"ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST\"\n);\nrequire(\n    request.amount >= _amount,\n    \"ERROR: WITHDRAWAL_EXCEEDED_REQUEST\"\n);\nrequire(_amount > 0, \"ERROR: WITHDRAWAL_ZERO\");\n```\n\nThe check of `_amount > 0` can be done earlier to avoid reading from storage when `_amount = 0`.\n\n## Recommendation\n\nChange to:\n\n```solidity\n        require(paused == false, \"ERROR: PAUSED\");\n        require(_amount > 0, \"ERROR: WITHDRAWAL_ZERO\");\n        require(\n            request.amount >= _amount,\n            \"ERROR: WITHDRAWAL_EXCEEDED_REQUEST\"\n        );\n        require(\n            request.timestamp +\n                parameters.getLockup(msg.sender) <\n                block.timestamp,\n            \"ERROR: WITHDRAWAL_QUEUE\"\n        );\n        require(\n            request.timestamp +\n                parameters.getLockup(msg.sender) +\n                parameters.getWithdrawable(msg.sender) >\n                block.timestamp,\n            \"ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST\"\n        );\n```\n\nOther examples include:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L189-L191\n\n```solidity\nuint256 _balance = balanceOf(msg.sender);\nrequire(_balance >= _amount, \"ERROR: REQUEST_EXCEED_BALANCE\");\nrequire(_amount > 0, \"ERROR: REQUEST_ZERO\");\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L217-L236\n\n```solidity\nrequire(locked == false, \"ERROR: WITHDRAWAL_PENDING\");\nrequire(\n    _requestTime + _lockup < block.timestamp,\n    \"ERROR: WITHDRAWAL_QUEUE\"\n);\nrequire(\n    _requestTime + _lockup + parameters.getWithdrawable(msg.sender) >\n        block.timestamp,\n    \"ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST\"\n);\nrequire(\n    withdrawalReq[msg.sender].amount >= _amount,\n    \"ERROR: WITHDRAWAL_EXCEEDED_REQUEST\"\n);\nrequire(_amount > 0, \"ERROR: WITHDRAWAL_ZERO\");\n\nrequire(\n    _retVal <= withdrawable(),\n    \"ERROR: WITHDRAW_INSUFFICIENT_LIQUIDITY\"\n);\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/230/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/229","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/229/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/229/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/229/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/229","id":1101674707,"node_id":"I_kwDOGhqIJ85BqjjT","number":229,"title":"Improper Upper Bound Definition on the Fee","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-01-13T12:49:08Z","updated_at":"2022-01-31T06:43:18Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ndefsec\n\n\n# Vulnerability details\n\nThe setFeeRate function does not have any upper or lower bounds. Values that are too large will lead to reversions in several critical functions.\n\n## Proof of Concept\n\n- The setFeeRate function sets the transaction fee rates for the market in which the function is called. In this context, the transaction fee is the percentage of a transaction that is taken by the protocol and moved to a designated reserve account. As the name suggests, transaction fees factor in to many of the essential transaction types performed within the system.\n- Navigate to \"https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Parameters.sol#L177\".\n- On the function there is no upper and lower bound defined. Therefore, users can pay higher fees.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider to define upper and lower bounds on the fee array.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/229/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/229/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/228","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/228/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/228/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/228/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/228","id":1101672364,"node_id":"I_kwDOGhqIJ85Bqi-s","number":228,"title":"System Debt Is Not Handled When Insurance Pools Become Insolvent","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637929,"node_id":"LA_kwDOGhqIJ87Y4TVp","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/2%20(Med%20Risk)","name":"2 (Med Risk)","color":"FBCA04","default":false,"description":"Assets not at direct risk, but function/availability of the protocol could be impacted or leak value"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T12:47:13Z","updated_at":"2022-01-18T08:31:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nleastwood\n\n\n# Vulnerability details\n\n## Impact\n\nIf an incident has occurred where an insurance policy is to be redeemed. The market is put into the `MarketStatus.Payingout` mode where the `_insurance.insured` account is allowed to redeem their cover and receive a payout amount. Upon paying out the insurance cover, any user is able to resume the market by calling `PoolTemplate.resume()`. This function will compensate the insurance pool if it is insolvent by querying `IndexTemplate.compensate()` which in turn queries `CDSTemplate.compensate()` to cover any shortage. \n\nIn the event none of these entities are able to cover the shortage in debt, the system accrues the debt. However, there is currently no mechanism to ensure when `transferDebt()` is called in `PoolTemplate.resume()`, the accrued system debt is paid off. Therefore, the system may incorrectly handle insolvency on an extreme edge case, generating system instability.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L691-L734\n```\nfunction resume() external {\n    require(\n        marketStatus == MarketStatus.Payingout &&\n            pendingEnd < block.timestamp,\n        \"ERROR: UNABLE_TO_RESUME\"\n    );\n\n    uint256 _debt = vault.debts(address(this));\n    uint256 _totalCredit = totalCredit;\n    uint256 _deductionFromIndex = (_debt * _totalCredit * MAGIC_SCALE_1E6) /\n        totalLiquidity();\n    uint256 _actualDeduction;\n    for (uint256 i = 0; i < indexList.length; i++) {\n        address _index = indexList[i];\n        uint256 _credit = indicies[_index].credit;\n        if (_credit > 0) {\n            uint256 _shareOfIndex = (_credit * MAGIC_SCALE_1E6) /\n                _totalCredit;\n            uint256 _redeemAmount = _divCeil(\n                _deductionFromIndex,\n                _shareOfIndex\n            );\n            _actualDeduction += IIndexTemplate(_index).compensate(\n                _redeemAmount\n            );\n        }\n    }\n\n    uint256 _deductionFromPool = _debt -\n        _deductionFromIndex /\n        MAGIC_SCALE_1E6;\n    uint256 _shortage = _deductionFromIndex /\n        MAGIC_SCALE_1E6 -\n        _actualDeduction;\n\n    if (_deductionFromPool > 0) {\n        vault.offsetDebt(_deductionFromPool, address(this));\n    }\n\n    vault.transferDebt(_shortage);\n\n    marketStatus = MarketStatus.Trading;\n    emit MarketStatusChanged(MarketStatus.Trading);\n}\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L421-L450\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L248-L277\n\n## Tools Used\n\nManual code review.\n\n## Recommended Mitigation Steps\n\nConsider devising a mechanism to ensure system debt is properly handled. After discussions with the sponsor, it seems that they will be implementing a way to mint `INSURE` tokens which will be used to cover the shortfall.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/228/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/228/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/227","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/227/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/227/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/227/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/227","id":1101668056,"node_id":"I_kwDOGhqIJ85Bqh7Y","number":227,"title":"Implement check effect interaction to align with best practices","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2022-01-13T12:43:52Z","updated_at":"2022-02-02T05:44:15Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ndefsec\n\n\n# Vulnerability details\n\n## Impact\n\nOn the InsureDAOERC20, transferFrom function is vulnerable on the re-entrancy.\n\n## Proof of Concept\n\n1. Navigate to the following contract. Approve function is written after transfer call. It is not possible to exploit on the current environment but that can be possible on the EVM.\n\n```\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n```\n\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\n\nFollow check effect interaction pattern. Consider to use openzeppelin erc20 contract. The sample transferFrom function can be seen from below.\n\n\n```\n  function transferFrom(\n      address sender,\n      address recipient,\n      uint256 amount\n  ) public virtual override returns (bool) {\n      uint256 currentAllowance = _allowances[sender][_msgSender()];\n      if (currentAllowance != type(uint256).max) {\n          require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n          unchecked {\n              _approve(sender, _msgSender(), currentAllowance - amount);\n          }\n      }\n\n      _transfer(sender, recipient, amount);\n\n      return true;\n  }\n```\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L161\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/227/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/227/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/226","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/226/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/226/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/226/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/226","id":1101662005,"node_id":"I_kwDOGhqIJ85Bqgc1","number":226,"title":"Allowance checks not correctly implemented","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-13T12:39:00Z","updated_at":"2022-01-27T07:01:43Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ndefsec\n\n\n# Vulnerability details\n\n## Impact\n\nOn the ERC20, There is a known problem named as Approve/TransferFrom race condition. On the transferFrom, allowance max check has not been added.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/InsureDAOERC20.sol#L152\n\n```\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        }\n\n        _transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n```\n\n2. Max Allowance check has not been added into the function. ERC20 standart (Openzeppelin) is not followed.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider to use openzeppelin erc20 contract. The sample transferFrom function can be seen from below.\n\n\n```\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        }\n\n        _transfer(sender, recipient, amount);\n\n        return true;\n    }\n```\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L161\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/226/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/226/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/224","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/224/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/224/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/224/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/224","id":1101604581,"node_id":"I_kwDOGhqIJ85BqSbl","number":224,"title":"Malicious Market Creators Can Steal Tokens From Unsuspecting Approved Reference Accounts","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-13T11:51:44Z","updated_at":"2022-02-07T05:42:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nleastwood\n\n\n# Vulnerability details\n\n## Impact\n\nThe current method of market creation involves calling `Factory.createMarket()` with a list of approved `_conditions` and `_references` accounts. If a registered template address has `templates[address(_template)].isOpen == true`, then any user is able to call `createMarket()` using this template. If the template points to `PoolTemplate.sol`, then a malicious market creator can abuse `PoolTemplate.initialize()` as it makes a vault deposit from an account that they control. The vulnerable internal function, `_depositFrom()`, makes a vault deposit from the `_references[4]` address (arbitrarily set to an approved reference address upon market creation).\n\nHence, if approved `_references` accounts have set an unlimited approval amount for `Vault.sol` before deploying their market, a malicious user can frontrun market creation and cause these tokens to be transferred to the incorrect market.\n\nThis issue can cause honest market creators to have their tokens transferred to an incorrectly configured market, leading to unrecoverable funds. If their approval to `Vault.sol` was set to the unlimited amount, malicious users will also be able to force honest market creators to transfer more tokens than they would normally want to allow.\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L158-L231\n```\nfunction createMarket(\n    IUniversalMarket _template,\n    string memory _metaData,\n    uint256[] memory _conditions,\n    address[] memory _references\n) public override returns (address) {\n    //check eligibility\n    require(\n        templates[address(_template)].approval == true,\n        \"ERROR: UNAUTHORIZED_TEMPLATE\"\n    );\n    if (templates[address(_template)].isOpen == false) {\n        require(\n            ownership.owner() == msg.sender,\n            \"ERROR: UNAUTHORIZED_SENDER\"\n        );\n    }\n    if (_references.length > 0) {\n        for (uint256 i = 0; i < _references.length; i++) {\n            require(\n                reflist[address(_template)][i][_references[i]] == true ||\n                    reflist[address(_template)][i][address(0)] == true,\n                \"ERROR: UNAUTHORIZED_REFERENCE\"\n            );\n        }\n    }\n\n    if (_conditions.length > 0) {\n        for (uint256 i = 0; i < _conditions.length; i++) {\n            if (conditionlist[address(_template)][i] > 0) {\n                _conditions[i] = conditionlist[address(_template)][i];\n            }\n        }\n    }\n\n    if (\n        IRegistry(registry).confirmExistence(\n            address(_template),\n            _references[0]\n        ) == false\n    ) {\n        IRegistry(registry).setExistence(\n            address(_template),\n            _references[0]\n        );\n    } else {\n        if (templates[address(_template)].allowDuplicate == false) {\n            revert(\"ERROR: DUPLICATE_MARKET\");\n        }\n    }\n\n    //create market\n    IUniversalMarket market = IUniversalMarket(\n        _createClone(address(_template))\n    );\n\n    IRegistry(registry).supportMarket(address(market));\n    \n    markets.push(address(market));\n\n\n    //initialize\n    market.initialize(_metaData, _conditions, _references);\n\n    emit MarketCreated(\n        address(market),\n        address(_template),\n        _metaData,\n        _conditions,\n        _references\n    );\n\n    return address(market);\n}\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L178-L221\n```\nfunction initialize(\n    string calldata _metaData,\n    uint256[] calldata _conditions,\n    address[] calldata _references\n) external override {\n    require(\n        initialized == false &&\n            bytes(_metaData).length > 0 &&\n            _references[0] != address(0) &&\n            _references[1] != address(0) &&\n            _references[2] != address(0) &&\n            _references[3] != address(0) &&\n            _references[4] != address(0) &&\n            _conditions[0] <= _conditions[1],\n        \"ERROR: INITIALIZATION_BAD_CONDITIONS\"\n    );\n    initialized = true;\n\n    string memory _name = string(\n        abi.encodePacked(\n            \"InsureDAO-\",\n            IERC20Metadata(_references[1]).name(),\n            \"-PoolInsurance\"\n        )\n    );\n    string memory _symbol = string(\n        abi.encodePacked(\"i-\", IERC20Metadata(_references[1]).symbol())\n    );\n    uint8 _decimals = IERC20Metadata(_references[0]).decimals();\n\n    initializeToken(_name, _symbol, _decimals);\n\n    registry = IRegistry(_references[2]);\n    parameters = IParameters(_references[3]);\n    vault = IVault(parameters.getVault(_references[1]));\n\n    metadata = _metaData;\n\n    marketStatus = MarketStatus.Trading;\n\n    if (_conditions[1] > 0) {\n        _depositFrom(_conditions[1], _references[4]);\n    }\n}\n```\n\n## Tools Used\n\nManual code review.\nDiscussions with kohshiba.\n\n## Recommended Mitigation Steps\n\nAfter discussions with the sponsor, they have opted to parse a `_creator` address to `PoolTemplate.sol` which will act as the depositor and be set to `msg.sender` in `Factory.createMarket()`. This will prevent malicious market creators from forcing vault deposits from unsuspecting users who are approved in `Factory.sol` and have also approved `Vault.sol` to make transfers on their behalf.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/224/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/224/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/219","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/219/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/219/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/219/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/219","id":1101563589,"node_id":"I_kwDOGhqIJ85BqIbF","number":219,"title":"[WP-G7] `InsureDAOERC20#transferFrom()` Check of allowance can be done earlier to save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-13T11:16:29Z","updated_at":"2022-01-28T01:07:12Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nCheck of allowance can be done earlier (before `_transfer()`) to save some gas for failure transactions.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/InsureDAOERC20.sol#L152-L168\n\n```solidity\nfunction transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n) public virtual override returns (bool) {\n    _transfer(sender, recipient, amount);\n\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\n    require(\n        currentAllowance >= amount,\n        \"ERC20: transfer amount exceeds allowance\"\n    );\n\n    _approve(sender, _msgSender(), currentAllowance - amount);\n\n    return true;\n}\n```\n\n\nSee:\n-   https://github.com/OpenZeppelin/openzeppelin-contracts/blob/80d8da05644ceef3cd8e81860882571f037f8667/contracts/token/ERC20/ERC20.sol#L162-L169\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/219/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/219/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/218","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/218/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/218/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/218/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/218","id":1101563125,"node_id":"I_kwDOGhqIJ85BqIT1","number":218,"title":"[WP-G6] Remove redundant code can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-13T11:16:06Z","updated_at":"2022-01-25T12:37:00Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nRemoving `return 0` can make the code simpler and save some gas.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L295-L303\n\n```solidity\n    function rate() external view returns (uint256) {\n        if (totalSupply() > 0) {\n            return\n                (vault.attributionValue(crowdPool) * MAGIC_SCALE_1E6) /\n                totalSupply();\n        } else {\n            return 0;\n        }\n    }\n```\n\n### Recommendation\n\nCan be changed to:\n\n```solidity\n    function rate() external view returns (uint256) {\n        if (totalSupply() > 0) {\n            return\n                (vault.attributionValue(crowdPool) * MAGIC_SCALE_1E6) /\n                totalSupply();\n        } \n    }\n```\n\nOther examples include:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L312-L317\n\n```solidity\n        if (_balance == 0) {\n            return 0;\n        } else {\n            return\n                _balance * vault.attributionValue(crowdPool) / totalSupply();\n        }\n```\n\nCan be changed to:\n\n```solidity\nif (_balance > 0) {\n    return\n        _balance * vault.attributionValue(crowdPool) / totalSupply();\n} \n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L176-L176\n\n```solidity\nfor (uint256 i = 0; i < _references.length; i++)\n```\n\nCan be changed to:\n\n```solidity\nfor (uint256 i; i < _references.length; i++)\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L493-L497\n\n```solidity\nif (totalLiquidity() > 0) {\n    return (totalAllocatedCredit * MAGIC_SCALE_1E6) / totalLiquidity();\n} else {\n    return 0;\n}\n```\n\nCan be changed to:\n\n```solidity\nif (totalLiquidity() > 0) {\n    return (totalAllocatedCredit * MAGIC_SCALE_1E6) / totalLiquidity();\n} \n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/218/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/218/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/217","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/217/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/217/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/217/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/217","id":1101562244,"node_id":"I_kwDOGhqIJ85BqIGE","number":217,"title":"[WP-N5] Missing error messages in require statements","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-01-13T11:15:21Z","updated_at":"2022-01-31T12:28:18Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L288-L288\n\n```solidity\nrequire(registry.isListed(msg.sender));\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L100-L100\n\n```solidity\nrequire(address(_template) != address(0));\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/217/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/217/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/216","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/216/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/216/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/216/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/216","id":1101561861,"node_id":"I_kwDOGhqIJ85BqIAF","number":216,"title":"[WP-G4] Remove unnecessary variables can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-13T11:15:02Z","updated_at":"2022-01-28T01:05:47Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L109-L113\n\n```solidity\nstring memory _name = \"InsureDAO-CDS\";\nstring memory _symbol = \"iCDS\";\nuint8 _decimals = IERC20Metadata(_references[0]).decimals();\n\ninitializeToken(_name, _symbol, _decimals);\n```\n\nThe local variable `_name`, `_symbol`, `_decimals` is used only once. Making the expression inline can save gas.\n\n### Recommendation\n\nChange to:\n\n```solidity\ninitializeToken(\"InsureDAO-CDS\", \"iCDS\", IERC20Metadata(_references[0]).decimals());\n```\n\nOther examples include:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L189-L190\n\n```solidity\nuint256 _balance = balanceOf(msg.sender);\nrequire(_balance >= _amount, \"ERROR: REQUEST_EXCEED_BALANCE\");\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L257-L257\n\n```solidity\nuint256 _surplusAttribution = surplusPool;\n```\n\nhttps://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/Callback.sol#L62-L63\n\n```solidity\nuint256 _assetReserve = asset.safeBalance();\nrequire(_assetReserve >= assetReserve + assetIn, 'E304');\n```\n\nhttps://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/Callback.sol#L51-L52\n\n```solidity\nuint256 _collateralReserve = collateral.safeBalance();\nrequire(_collateralReserve >= collateralReserve + collateralIn, 'E305');\n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L456-L463\n\n```solidity\nuint256 _shortage;\nif (totalLiquidity() < _amount) {\n    //Insolvency case\n    _shortage = _amount - _value;\n    uint256 _cds = ICDSTemplate(registry.getCDS(address(this)))\n        .compensate(_shortage);\n    _compensated = _value + _cds;\n}\n```\n\n`_shortage` and `_cds`.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/216/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/216/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/215","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/215/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/215/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/215/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/215","id":1101561142,"node_id":"I_kwDOGhqIJ85BqH02","number":215,"title":"[WP-G3] `AuctionBurnReserveSkew.sol#deposit()` Implementation can be simpler and save some gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-01-13T11:14:24Z","updated_at":"2022-01-27T06:43:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L140-L148\n\n```solidity\nif (_supply > 0 && _liquidity > 0) {\n    _mintAmount = (_amount * _supply) / _liquidity;\n} else if (_supply > 0 && _liquidity == 0) {\n    //when vault lose all underwritten asset = \n    _mintAmount = _amount * _supply; //dilute LP token value af. Start CDS again.\n} else {\n    //when _supply == 0,\n    _mintAmount = _amount;\n}\n```\n\n### Recommendation\n\nChange to:\n\n```solidity\nif (_supply == 0) {\n    _mintAmount = _amount;\n} else {\n    _mintAmount = _liquidity == 0 ? _amount * _supply : (_amount * _supply) / _liquidity;\n} \n```\n\n- Removed 2 checks;\n- Removed 1 branch;\n- Simpler branch (costs less gas) goes first.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/215/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/215/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/213","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/213/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/213/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/213/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/213","id":1101558860,"node_id":"I_kwDOGhqIJ85BqHRM","number":213,"title":"[WP-G1] `InsureDAOERC20#transferFrom()` Do not reduce approval on transferFrom if current allowance is type(uint256).max","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-13T11:12:28Z","updated_at":"2022-01-28T01:05:14Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThe Wrapped Ether (WETH) ERC-20 contract has a gas optimization that does not update the allowance if it is the max uint.\n\nThe latest version of OpenZeppelin's ERC20 token contract also adopted this optimization.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/InsureDAOERC20.sol#L152-L168\n\n```solidity\nfunction transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n) public virtual override returns (bool) {\n    _transfer(sender, recipient, amount);\n\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\n    require(\n        currentAllowance >= amount,\n        \"ERC20: transfer amount exceeds allowance\"\n    );\n\n    _approve(sender, _msgSender(), currentAllowance - amount);\n\n    return true;\n}\n```\n\nSee:\n-   https://github.com/OpenZeppelin/openzeppelin-contracts/blob/80d8da05644ceef3cd8e81860882571f037f8667/contracts/token/ERC20/ERC20.sol#L162\n-   https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3085\n\n### Recommendation\n\nChange to:\n\n```solidity\nfunction transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n) public virtual override returns (bool) {\n    _transfer(sender, recipient, amount);\n\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\n    if (currentAllowance != type(uint256).max) {\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n\n        _approve(sender, _msgSender(), currentAllowance - amount);\n    }\n\n    return true;\n}\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/213/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/213/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/212","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/212/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/212/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/212/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/212","id":1101557812,"node_id":"I_kwDOGhqIJ85BqHA0","number":212,"title":"[WP-N0] Race condition on ERC20 approval","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-13T11:11:37Z","updated_at":"2022-01-27T06:49:36Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/InsureDAOERC20.sol#L325-L335\n\n```solidity\nfunction _approve(\n    address owner,\n    address spender,\n    uint256 amount\n) internal virtual {\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n}\n```\n\nUsing approve() to manage allowances opens yourself and users of the token up to frontrunning.\n\n[Explanation](https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit) of this possible attack vector.\n\nSee also: [0xProject/0x-monorepo#850](https://github.com/0xProject/0x-monorepo/issues/850)\n\nA potential fix includes preventing a call to approve if all the previous tokens are not spent through adding a check that the allowed balance is 0:\n\n`require(allowed[msg.sender][_spender] == 0)`.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/212/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/212/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/210","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/210/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/210/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/210/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/210","id":1101477889,"node_id":"I_kwDOGhqIJ85BpzgB","number":210,"title":"Avoid unnecessary code execution can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-13T10:06:27Z","updated_at":"2022-01-28T00:59:09Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nJujic\n\n\n# Vulnerability details\n\n## Impact\n```\nfunction rate() external view returns (uint256) {\n        if (totalSupply() > 0) {\n            return (totalLiquidity() * MAGIC_SCALE_1E6) / totalSupply();\n        } else {\n            return 0;\n        }\n    }\n```\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L512-L518\n\n## Tools Used\nRemix\n\n## Recommended Mitigation Steps\nChange to:\n```\nfunction rate() external view returns (uint256) {\n        if (totalSupply() != 0) {\n            return (totalLiquidity() * MAGIC_SCALE_1E6) / totalSupply();\n        \n    }\n\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/210/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/210/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/198","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/198/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/198/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/198/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/198","id":1100887100,"node_id":"I_kwDOGhqIJ85BnjQ8","number":198,"title":"Factory. createMarket doesn't check if input array length is too big","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-12T23:07:43Z","updated_at":"2022-01-18T07:51:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nhyh\n\n\n# Vulnerability details\n\n## Impact\n\nSystem will fail with obscure low-level array access message without proper logic level error, which can be an issue for troubleshooting and further programmatic usages by other projects.\n\n\n## Proof of Concept\n\nWhenever _references or _conditions are too big the system will fail on index out of bounds error:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L175-191\n\n\n\n## Recommended Mitigation Steps\n\nConsider adding a check for the upper bound of arrays length\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/198/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/198/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/197","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/197/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/197/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/197/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/197","id":1100857758,"node_id":"I_kwDOGhqIJ85BncGe","number":197,"title":"Vault. withdrawValue will fail on subtraction if there are not enough _attributions","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"pontagon333","id":87188356,"node_id":"MDQ6VXNlcjg3MTg4MzU2","avatar_url":"https://avatars.githubusercontent.com/u/87188356?v=4","gravatar_id":"","url":"https://api.github.com/users/pontagon333","html_url":"https://github.com/pontagon333","followers_url":"https://api.github.com/users/pontagon333/followers","following_url":"https://api.github.com/users/pontagon333/following{/other_user}","gists_url":"https://api.github.com/users/pontagon333/gists{/gist_id}","starred_url":"https://api.github.com/users/pontagon333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pontagon333/subscriptions","organizations_url":"https://api.github.com/users/pontagon333/orgs","repos_url":"https://api.github.com/users/pontagon333/repos","events_url":"https://api.github.com/users/pontagon333/events{/privacy}","received_events_url":"https://api.github.com/users/pontagon333/received_events","type":"User","site_admin":false},"assignees":[{"login":"pontagon333","id":87188356,"node_id":"MDQ6VXNlcjg3MTg4MzU2","avatar_url":"https://avatars.githubusercontent.com/u/87188356?v=4","gravatar_id":"","url":"https://api.github.com/users/pontagon333","html_url":"https://github.com/pontagon333","followers_url":"https://api.github.com/users/pontagon333/followers","following_url":"https://api.github.com/users/pontagon333/following{/other_user}","gists_url":"https://api.github.com/users/pontagon333/gists{/gist_id}","starred_url":"https://api.github.com/users/pontagon333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pontagon333/subscriptions","organizations_url":"https://api.github.com/users/pontagon333/orgs","repos_url":"https://api.github.com/users/pontagon333/repos","events_url":"https://api.github.com/users/pontagon333/events{/privacy}","received_events_url":"https://api.github.com/users/pontagon333/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-12T22:37:06Z","updated_at":"2022-01-26T08:49:02Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nhyh\n\n\n# Vulnerability details\n\n## Impact\n\nSystem will fail on low-level subtraction without proper logic level error, which can be an issue for troubleshooting and further programmatic usages by other projects.\n\n\n## Proof of Concept\n\nWhenever user lacks _attributions (Vault shares) for the withdraw amount requested, the system will fail on subtraction:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Vault.sol#L160\n\n\n## Recommended Mitigation Steps\n\nConsider adding a check for the enough _attributions throwing a corresponding error\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/197/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/197/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/194","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/194/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/194/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/194/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/194","id":1100802616,"node_id":"I_kwDOGhqIJ85BnOo4","number":194,"title":"Multiple boolean comparrisons","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-12T21:23:59Z","updated_at":"2022-01-27T06:52:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nloop\n\n\n# Vulnerability details\n\nWhen checking boolean values in a require or if statement it's an unnecessary operation to compare them to `true`, as it's already checked whether the condition is `true`. For comparison to `false`, it is cheaper to use the `!` operator rather than compare the value.\n\n## Proof of Concept\nLines where boolean comparison is used:\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L99\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L131\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L161\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L176\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L205\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L122\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L142\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L166-L169\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L178-L179\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Factory.sol#L204\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L132\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L165\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L217\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L365\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L464\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L184\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L234\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L260\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L354\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L388\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L491\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L550\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L612\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L664\n\n## Recommended Mitigation Steps\nRemove the `== true` part from boolean comparisons and change `_variableName == false` to `!_variableName` to save some gas.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/194/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/194/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/192","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/192/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/192/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/192/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/192","id":1100793030,"node_id":"I_kwDOGhqIJ85BnMTG","number":192,"title":"Typo in PoolTemplate unlock function results in user being able to unlock multiple times","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-12T21:10:54Z","updated_at":"2022-01-27T21:32:25Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nloop\n\n\n# Vulnerability details\n\nThe function `unlock()` in PoolTemplate has a typo where it compares `insurances[_id].status` to `false` rather than setting it to `false`. If the conditions are met to unlock the funds for an id, the user should be able to call the `unlock()` function once for that id as `insurances[_id].amount` is subtracted from `lockedAmount`. However, since `insurances[_id].status` does not get set to `false`, a user can call `unlock()` multiple times for the same id, resulting in `lockedAmount` being way smaller than it should be since `insurances[_id].amount` is subtracted multiple times. \n\n## Impact\n`lockedAmount` is used to calculate the amount of underlying tokens available for withdrawals. If `lockedAmount` is lower than it should be users are able to withdraw more underlying tokens than available for withdrawals.\n\n## Proof of Concept\nTypo in `unlock()`:\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L360-L362\n\nCalculation of underlying tokens available for withdrawal:\n- https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L836\n\n## Recommended Mitigation Steps\nChange `insurances[_id].status == false;` to `insurances[_id].status = false;`\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/192/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/192/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/189","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/189/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/189/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/189/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/189","id":1100753559,"node_id":"I_kwDOGhqIJ85BnCqX","number":189,"title":"PoolTemplate worth function description is incorrect","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-12T20:19:42Z","updated_at":"2022-01-27T07:11:08Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nhyh\n\n\n# Vulnerability details\n\n## Impact\n\nUnderlying and index tokens are mixed up in the worth() function description, making code and its description conflicting\n\n## Proof of Concept\n\nWorth() computes how many iTokens correspond to given amount of underlying. The description says otherwise, mixing them up:\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L794-798\n\n\n\n## Recommended Mitigation Steps\n\nFix the description to say that ‘_value' is the amount of underlying, while the '_amount' is the corresponding output quantity of iTokens\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/189/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/189/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/188","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/188/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/188/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/188/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/188","id":1100751623,"node_id":"I_kwDOGhqIJ85BnCMH","number":188,"title":"set  `_mintAmount = _amount;` in the memory can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2022-01-12T20:17:14Z","updated_at":"2022-01-31T10:15:00Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomio\n\n\n# Vulnerability details\n\n## Impact\nexpensive gas\n\n## Proof of Concept\nBefore: https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L164\n// gas 21512\n\n## Tools Used\nRemix\n\n## Recommended Mitigation Steps\n```\nfunction deposit(uint256 _amount) public returns (uint256 _mintAmount ) {\n\n        uint256 _supply = 0;\n        uint256 _totalLiquidity = 10;\n\n        _mintAmount = _amount;\n\n        if (_supply > 0 ){\n            if (_totalLiquidity == 0){\n                _mintAmount = _amount * _supply;\n            }else{\n                _mintAmount = (_amount * _supply) / _totalLiquidity;\n            }\n        }\n    }\n```\n/// 21444\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/188/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/188/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/186","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/186/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/186/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/186/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/186","id":1100723426,"node_id":"I_kwDOGhqIJ85Bm7Ti","number":186,"title":"Remove unnecessary if statements for gas optimization ","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-12T19:42:55Z","updated_at":"2022-01-26T07:58:42Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nospwner\n\n\n# Vulnerability details\n\n## Impact\nChecking arrays' length before using it in a for loop is unnecessary when array's length is used in loop exit condition. \n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L175\n\n```\n        if (_references.length > 0) {\n            for (uint256 i = 0; i < _references.length; i++) \n```\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L185\n```\n        if (_conditions.length > 0) {\n            for (uint256 i = 0; i < _conditions.length; i++) \n```\n\n\n## Recommended Mitigation Steps\n\nRemove the two unnecessary  if statements.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/186/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/186/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/184","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/184/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/184/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/184/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/184","id":1100633761,"node_id":"I_kwDOGhqIJ85Bmlah","number":184,"title":"Signature replay","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637929,"node_id":"LA_kwDOGhqIJ87Y4TVp","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/2%20(Med%20Risk)","name":"2 (Med Risk)","color":"FBCA04","default":false,"description":"Assets not at direct risk, but function/availability of the protocol could be impacted or leak value"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2022-01-12T17:59:03Z","updated_at":"2022-02-02T05:28:12Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\n0x1f8b\n\n\n# Vulnerability details\n\n## Impact\nSignature replay in `PoolTemplate`.\n\n## Proof of Concept\nThe `redeem` method of `PoolTemplate` verifies the data stored in `incident`, and the verification logic of this process is performed as following:\n\n```\nrequire(\n            MerkleProof.verify(\n                _merkleProof,\n                _targets,\n                keccak256(\n                    abi.encodePacked(_insurance.target, _insurance.insured)\n                )\n            ) ||\n                MerkleProof.verify(\n                    _merkleProof,\n                    _targets,\n                    keccak256(abi.encodePacked(_insurance.target, address(0)))\n                ),\n            \"ERROR: INSURANCE_EXEMPTED\"\n        );\n```\n\nAs can be seen, the only data related to the `_insurance` are` target` and `insured`, so as the incident has no relation with the` Insurance`, apparently nothing prevents a user to call `insure` with high amounts, after receive the incident, the only thing that prevents this from being reused is that the owner creates the incident with an `_incidentTimestamp` from the past.\n\nSo if a owner create a incident from the future it's possible to create a new `insure` that could be reused by the same affected address.\n\nAnother lack of input verification that could facilitate this attack is the `_span=0` in the `insure` method.\n\n## Tools Used\nManual review.\n\n## Recommended Mitigation Steps\nIt is mandatory to add a check in `applyCover` that` _incidentTimestamp` is less than the current date and the `span` argument is greater than 0 in the` insure` method.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/184/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/184/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/183","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/183/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/183/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/183/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/183","id":1100560714,"node_id":"I_kwDOGhqIJ85BmTlK","number":183,"title":"anyone can get money from an incident without paying beforehand","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637962,"node_id":"LA_kwDOGhqIJ87Y4TWK","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20disputed","name":"sponsor disputed","color":"B60205","default":false,"description":"Sponsor cannot duplicate the issue, or otherwise disagrees this is an issue"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-01-12T16:44:49Z","updated_at":"2022-01-27T15:36:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ndanb\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L655\n\napplyCover can be frontrun with `insure` call in order to get the incident money.\n\nI suggest you add the same mechanism in withdraw, add `requestInsure` which must be called some time before `insure`.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/183/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/182","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/182/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/182/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/182/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/182","id":1100469156,"node_id":"I_kwDOGhqIJ85Bl9Ok","number":182,"title":"Avoid use of state variables in event emissions to save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638633445,"node_id":"LA_kwDOGhqIJ87Y4SPl","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/duplicate","name":"duplicate","color":"cfd3d7","default":true,"description":"This issue or pull request already exists"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-12T15:22:56Z","updated_at":"2022-01-26T08:56:47Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nJujic\n\n\n# Vulnerability details\n\n## Impact\nWhere possible, use equivalent function parameters or local variables in event emits instead of state variables to prevent expensive SLOADs.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L364\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L733\n```\nmarketStatus = MarketStatus.Trading;\n        emit MarketStatusChanged(MarketStatus.Trading);\n    }\n```\n\n## Tools Used\nRemix\n## Recommended Mitigation Steps\nUse equivalent function parameters or local variables in event emits instead of state variables.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/182/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/182/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/181","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/181/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/181/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/181/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/181","id":1100441124,"node_id":"I_kwDOGhqIJ85Bl2Yk","number":181,"title":"Checking non-zero value can avoid an external call to save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-01-12T14:58:27Z","updated_at":"2022-01-31T05:30:44Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nJujic\n\n\n# Vulnerability details\n\n## Impact\nChecking if  `_amount != 0 ` before making the transfer call  can save gas by avoiding the external call in such situations.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L201-L206\n\n```\nfunction borrowValue(uint256 _amount, address _to) external onlyMarket override {\n        debts[msg.sender] += _amount;\n        totalDebt += _amount;\n\n        IERC20(token).safeTransfer(_to, _amount);\n    }\n\n```\n\n## Tools Used\nRemix\n\n## Recommended Mitigation Steps\nAdd additional check for non zero ` _amount`.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/181/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/181/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/178","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/178/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/178/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/178/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/178","id":1100406392,"node_id":"I_kwDOGhqIJ85Blt54","number":178,"title":"Caching variables","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-12T14:27:03Z","updated_at":"2022-01-28T00:55:32Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nJujic\n\n\n# Vulnerability details\n\n## Impact\nSome of the variables can be cached to slightly reduce gas usage\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L343\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L406-L407\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L461-L479\n\n```\nfunction withdrawRedundant(address _token, address _to)\n        external\n        override\n        onlyOwner\n    {\n        if (\n            _token == address(token) &&\n            balance < IERC20(token).balanceOf(address(this))\n        ) {\n            uint256 _redundant = IERC20(token).balanceOf(address(this)) -\n                balance;\n            IERC20(token).safeTransfer(_to, _redundant);\n        } else if (IERC20(_token).balanceOf(address(this)) > 0) {\n            IERC20(_token).safeTransfer(\n                _to,\n                IERC20(_token).balanceOf(address(this))\n            );\n        }\n    }\n```\n\n## Tools Used\nRemix\n## Recommended Mitigation Steps\nConsider caching those variable for read and make sure write back to storage\nExample:\n```\nbal =  IERC20(_token).balanceOf(address(this);\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/178/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/178/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/176","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/176/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/176/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/176/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/176","id":1100355501,"node_id":"I_kwDOGhqIJ85Blhet","number":176,"title":"Incorrect Natspec can lead to errors","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-12T13:39:28Z","updated_at":"2022-02-02T06:15:26Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\n0xngndev\n\n\n# Vulnerability details\n\n## Impact\n\nUnclear Natspec may confuse the user.\n\nIn the `fund` function:\n\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L160](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L160)\n\nThe Natspec is a copy-paste of the `deposit` function:\n\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L130](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L130)\n\nThe problem here is the **receives ITokens** part of the Natspec. The deposit function indeed mints tokens to the `msg.sender` but the `fund` function doesn’t. I would clarify that the `fund` function adds attributions to the surplusPool.\n\nAnother minor and unclear bit of Natspec happens here:\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Vault.sol#L177](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Vault.sol#L177)\n\nIt describes `_amount` as sender of value instead of something like **amount of value to send.**\n\n## Recommended Mitigation Steps\n\nExplain the Natspec of the `fund` function in more detail. Fix the `transferValue` amount natspec. Also it would be good to add some Natspec to the `defund` function too.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/176/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/176/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/174","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/174/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/174/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/174/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/174","id":1100338697,"node_id":"I_kwDOGhqIJ85BldYJ","number":174,"title":"Edge case in withdrawValue may lead to failed transactions","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-12T13:24:15Z","updated_at":"2022-02-02T06:28:20Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\n0xngndev\n\n\n# Vulnerability details\n\n## Impact\n\nIn `Vault.sol` when `Controller` is set to `address(0)` and `available()` is less than the `amount` the user wants to withdraw, the function `withdrawValue` will revert. This happens because when `available() < _amount` the internal function `_unutilize` is called, and that internal function has a check that reverts if the `controller` is set to the zero address. This very same thing happens with `_withdrawAttribution`\n\nI’m not aware whether this is a conscious decision, or if I’m missing something, but I thought I’d bring it up just in case it wasn’t. Although I understand this is an edge case and shouldn’t happen often, and the user could simply reduce the amount it wants to withdraw to avoid entering into the block that causes `_unutilize` to be called, I believe it may be quite troublesome for a user to figure out the true error in a real situation as the error he would face is `ERROR_CONTROLLER_NOT_SET`, instead of something like `AMOUNT_EXCEEDS_RESERVES`, which would prompt the user to withdraw a lower amount.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/174/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/174/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/172","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/172/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/172/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/172/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/172","id":1100315577,"node_id":"I_kwDOGhqIJ85BlXu5","number":172,"title":"Grouping Repeated Logic Into a Modifier To Save on Deployment Costs","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-12T13:03:21Z","updated_at":"2022-01-13T17:57:29Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\n0xngndev\n\n\n# Vulnerability details\n\n## Impact\n\nIn `PoolTemplate.sol` you can group repetitive logic into a modifier to save on deployment costs. There’s a tradeoff to doing this though, so this is mostly a suggestion. The tradeoff is that declaring the logic inline is cheaper than having it in a modifier when you call the function that uses that modifier. So, you would be decluttering your code a bit and saving on deployment costs because your code size will be reduced, but calling the functions that implement the modifier will be slightly more expensive.\n\nThe logic that can be moved into a modifier is the following:  \n\n```solidity\nrequire(\n    marketStatus == MarketStatus.Trading && paused == false,\n    \"ERROR: DEPOSIT_DISABLED\"\n);\n```\n\nThis logic is used three times across `PoolTemplate.sol`:\n\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L232](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L232)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L255](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L255)\n- `insure` function: here you had the paused as a separate requirements instead of in the same, you could group it together.\n    - [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L465](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L465)\n\n## Recommended Mitigation Steps\n\nIf you are okay with the tradeoff, move the logic stated above into its own modifier and apply it to the functions that make the marketStatus and paused checks.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/172/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/172/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/170","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/170/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/170/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/170/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/170","id":1100296032,"node_id":"I_kwDOGhqIJ85BlS9g","number":170,"title":"Moving Variable Declarations Before Error Checks Can Save Gas on Failure","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-12T12:42:15Z","updated_at":"2022-01-28T00:53:33Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\n0xngndev\n\n\n# Vulnerability details\n\n## Impact\n\nIn `PoolTemplate.sol` there are multiple instances where variables are declared before the error checks of the functions. In cases where a function reverts due to these error checks, that extra computation of calculating the variable being declared can be avoided by simply moving the declaration after the error checks.\n\nHere are all the functions I found where this can be applied:\n\n- `withdraw` function: [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L293](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L293)\n- `withdrawCredit` function: [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L416](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L416)\n- `insure` function: [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L465](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L465)\n- `reedem` function: [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L548](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L548)\n\n## Recommended Mitigation Steps\n\n- Change `withdraw` function to:\n\n```solidity\nfunction withdraw(uint256 _amount) external returns (uint256 _retVal) {\n  require(\n      marketStatus == MarketStatus.Trading,\n      \"ERROR: WITHDRAWAL_PENDING\"\n  );\n  require(\n      withdrawalReq[msg.sender].timestamp +\n          parameters.getLockup(msg.sender) <\n          block.timestamp,\n      \"ERROR: WITHDRAWAL_QUEUE\"\n  );\n  require(\n      withdrawalReq[msg.sender].timestamp +\n          parameters.getLockup(msg.sender) +\n          parameters.getWithdrawable(msg.sender) >\n          block.timestamp,\n      \"ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST\"\n  );\n  require(\n      withdrawalReq[msg.sender].amount >= _amount,\n      \"ERROR: WITHDRAWAL_EXCEEDED_REQUEST\"\n  );\n  require(_amount > 0, \"ERROR: WITHDRAWAL_ZERO\");\n  require(\n      _retVal <= availableBalance(),\n      \"ERROR: WITHDRAW_INSUFFICIENT_LIQUIDITY\"\n  );\n\n  uint256 _supply = totalSupply();\n  require(_supply != 0, \"ERROR: NO_AVAILABLE_LIQUIDITY\");\n\n  uint256 _liquidity = originalLiquidity();\n  _retVal = (_amount * _liquidity) / _supply;\n\n  //reduce requested amount\n  withdrawalReq[msg.sender].amount -= _amount;\n\n  //Burn iToken\n  _burn(msg.sender, _amount);\n\n  //Withdraw liquidity\n  vault.withdrawValue(_retVal, msg.sender);\n\n  emit Withdraw(msg.sender, _amount, _retVal);\n}\n```\n\n- Change `withdrawCredit` function to:\n\n```solidity\nfunction withdrawCredit(uint256 _credit)\n        external\n        override\n        returns (uint256 _pending)\n    {\n      IndexInfo storage _index = indicies[msg.sender];\n      require(\n          IRegistry(registry).isListed(msg.sender) &&\n              _index.credit >= _credit &&\n              _credit <= availableBalance(),\n          \"ERROR: WITHDRAW_CREDIT_BAD_CONDITIONS\"\n      );\n\n      uint256 _rewardPerCredit = rewardPerCredit;\n\n      //calculate acrrued premium\n      _pending = _sub(\n          (_index.credit * _rewardPerCredit) / MAGIC_SCALE_1E6,\n          _index.rewardDebt\n      );\n\n      //Withdraw liquidity\n      if (_credit > 0) {\n          totalCredit -= _credit;\n          _index.credit -= _credit;\n          emit CreditDecrease(msg.sender, _credit);\n      }\n\n      //withdraw acrrued premium\n      if (_pending > 0) {\n          vault.transferAttribution(_pending, msg.sender);\n          attributionDebt -= _pending;\n          _index.rewardDebt =\n              (_index.credit * _rewardPerCredit) /\n              MAGIC_SCALE_1E6;\n      }\n}\n```\n\n- Change `insure` function to:\n\n```solidity\nfunction insure(\n        uint256 _amount,\n        uint256 _maxCost,\n        uint256 _span,\n        bytes32 _target\n    ) external returns (uint256) {\n      //Distribute premium and fee\n      uint256 _premium = getPremium(_amount, _span);\n\n      require(\n          _amount <= availableBalance(),\n          \"ERROR: INSURE_EXCEEDED_AVAILABLE_BALANCE\"\n      );\n      require(_premium <= _maxCost, \"ERROR: INSURE_EXCEEDED_MAX_COST\");\n      require(_span <= 365 days, \"ERROR: INSURE_EXCEEDED_MAX_SPAN\");\n      require(\n          parameters.getMinDate(msg.sender) <= _span,\n          \"ERROR: INSURE_SPAN_BELOW_MIN\"\n      );\n\n      require(\n          marketStatus == MarketStatus.Trading,\n          \"ERROR: INSURE_MARKET_PENDING\"\n      );\n      require(paused == false, \"ERROR: INSURE_MARKET_PAUSED\");\n\n      uint256 _endTime = _span + block.timestamp;\n      uint256 _fee = parameters.getFeeRate(msg.sender);\n\n      //current liquidity\n      uint256 _liquidity = totalLiquidity();\n      uint256 _totalCredit = totalCredit;\n\n      //accrue premium/fee\n      uint256[2] memory _newAttribution = vault.addValueBatch(\n          _premium,\n          msg.sender,\n          [address(this), parameters.getOwner()],\n          [MAGIC_SCALE_1E6 - _fee, _fee]\n      );\n\n      //Lock covered amount\n      uint256 _id = allInsuranceCount;\n      lockedAmount += _amount;\n      Insurance memory _insurance = Insurance(\n          _id,\n          block.timestamp,\n          _endTime,\n          _amount,\n          _target,\n          msg.sender,\n          true\n      );\n      insurances[_id] = _insurance;\n      allInsuranceCount += 1;\n\n      //Calculate liquidity for index\n      if (_totalCredit > 0) {\n          uint256 _attributionForIndex = (_newAttribution[0] * _totalCredit) /\n              _liquidity;\n          attributionDebt += _attributionForIndex;\n          rewardPerCredit += ((_attributionForIndex * MAGIC_SCALE_1E6) /\n              _totalCredit);\n      }\n\n      emit Insured(\n          _id,\n          _amount,\n          _target,\n          block.timestamp,\n          _endTime,\n          msg.sender,\n          _premium\n      );\n\n        return _id;\n  }\n```\n\n- Change `redeem` function to:\n\n```solidity\nfunction redeem(uint256 _id, bytes32[] calldata _merkleProof) external {\n      require(\n          marketStatus == MarketStatus.Payingout,\n          \"ERROR: NO_APPLICABLE_INCIDENT\"\n      );\n      Insurance storage _insurance = insurances[_id];\n      require(_insurance.status == true, \"ERROR: INSURANCE_NOT_ACTIVE\");\n      require(_insurance.insured == msg.sender, \"ERROR: NOT_YOUR_INSURANCE\");\n      uint256 _incidentTimestamp = incident.incidentTimestamp;\n      require(\n          marketStatus == MarketStatus.Payingout &&\n              _insurance.startTime <= _incidentTimestamp &&\n              _insurance.endTime >= _incidentTimestamp,\n          \"ERROR: INSURANCE_NOT_APPLICABLE\"\n      );\n      bytes32 _targets = incident.merkleRoot;\n      require(\n          MerkleProof.verify(\n              _merkleProof,\n              _targets,\n              keccak256(\n                  abi.encodePacked(_insurance.target, _insurance.insured)\n              )\n          ) ||\n              MerkleProof.verify(\n                  _merkleProof,\n                  _targets,\n                  keccak256(abi.encodePacked(_insurance.target, address(0)))\n              ),\n          \"ERROR: INSURANCE_EXEMPTED\"\n      );\n      uint256 _payoutNumerator = incident.payoutNumerator;\n      uint256 _payoutDenominator = incident.payoutDenominator;\n\n      _insurance.status = false;\n      lockedAmount -= _insurance.amount;\n\n      uint256 _payoutAmount = (_insurance.amount * _payoutNumerator) /\n          _payoutDenominator;\n\n      vault.borrowValue(_payoutAmount, msg.sender);\n\n      emit Redeemed(\n          _id,\n          msg.sender,\n          _insurance.target,\n          _insurance.amount,\n          _payoutAmount\n      );\n  }\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/170/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/170/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/166","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/166/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/166/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/166/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/166","id":1100273833,"node_id":"I_kwDOGhqIJ85BlNip","number":166,"title":"Unnecessary use of _msgSender()","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-12T12:17:59Z","updated_at":"2022-01-25T12:57:25Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nJujic\n\n\n# Vulnerability details\n\n## Impact\nThe use of _msgSender() when there is no implementation of a meta transaction mechanism that uses it, such as EIP-2771, very slightly increases gas consumption.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/InsureDAOERC20.sol#L105\n\n```\nfunction transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n```\n\n## Tools Used\nRemix\n## Recommended Mitigation Steps\nReplace _msgSender() with msg.sender if there is no mechanism to support meta-transactions like EIP-2771 implemented.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/166/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/161","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/161/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/161/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/161/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/161","id":1099951398,"node_id":"I_kwDOGhqIJ85Bj-0m","number":161,"title":"The fund function of the CDSTemplate contract does not match the description","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-01-12T07:00:19Z","updated_at":"2022-02-02T06:28:48Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ncccz\n\n\n# Vulnerability details\n\n## Impact\n\nThe fund function of the CDSTemplate contract does not match the description, the caller will not receive any iToken after sending tokens, and the owner can take away the tokens in surplusPool.\n\n```\n    /**\n     * @notice A liquidity provider supplies collatral to the pool and receives iTokens\n     * @param _amount amount of token to deposit\n     */\n    function fund(uint256 _amount) external {\n        require(paused == false, \"ERROR: PAUSED\");\n\n        //deposit and pay fees\n        uint256 _attribution = vault.addValue(\n            _amount,\n            msg.sender,\n            address(this)\n        );\n\n        surplusPool += _attribution;\n\n        emit Fund(msg.sender, _amount, _attribution);\n    }\n\n    function defund(uint256 _amount) external override onlyOwner {\n        require(paused == false, \"ERROR: PAUSED\");\n\n        uint256 _attribution = vault.withdrawValue(_amount, msg.sender);\n        surplusPool -= _attribution;\n\n        emit Defund(msg.sender, _amount, _attribution);\n    }\n```\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L156-L182\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nChange the description of the fund function or send iToken to the caller\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/161/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/161/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/160","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/160/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/160/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/160/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/160","id":1099871492,"node_id":"I_kwDOGhqIJ85BjrUE","number":160,"title":"Owner can call `applyCover` multiple times in `PoolTemplate.sol`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637929,"node_id":"LA_kwDOGhqIJ87Y4TVp","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/2%20(Med%20Risk)","name":"2 (Med Risk)","color":"FBCA04","default":false,"description":"Assets not at direct risk, but function/availability of the protocol could be impacted or leak value"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-01-12T04:38:49Z","updated_at":"2022-02-11T06:28:53Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ncamden\n\n\n# Vulnerability details\n\n## Impact\nThe owner could potentially extend the insurance period indefinitely in the `applyCover` function without ever allowing the market to resume. This is because there is no check in `applyCover` to ensure that the market is in a `Trading` state.\n\nThis can also allow the owner to emit fraudulent `MarketStatusChanged` events.\n\n## Recommended Mitigation Steps\nRequire that the market be in a `Trading` state to allow another `applyCover` call.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/160/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/160/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/159","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/159/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/159/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/159/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/159","id":1099676331,"node_id":"I_kwDOGhqIJ85Bi7qr","number":159,"title":"Remove unnecessary address cast in Vault.sol","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T22:30:30Z","updated_at":"2022-01-25T13:02:12Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nsirhashalot\n\n\n# Vulnerability details\n\n## Impact\n\nThe Vault.sol contract contains several state variables of type address. There is no need to cast these variable to type address because they are already of type address. Removing the cast function can save gas.\n\n## Proof of Concept\n\nThe token address state variable is unnecessarily cast to address type in two places in Vault.sol:\n- [Line 350](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L350)\n- [Line 467](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L467)\n\n## Recommended Mitigation Steps\n\nRemove the unnecessary address cast from address variables.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/159/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/158","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/158/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/158/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/158/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/158","id":1099676056,"node_id":"I_kwDOGhqIJ85Bi7mY","number":158,"title":"Tokens can be burned with no access control","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637937,"node_id":"LA_kwDOGhqIJ87Y4TVx","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/3%20(High%20Risk)","name":"3 (High Risk)","color":"B60205","default":false,"description":"Assets can be stolen/lost/compromised directly"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"oishun1112","id":40849624,"node_id":"MDQ6VXNlcjQwODQ5NjI0","avatar_url":"https://avatars.githubusercontent.com/u/40849624?v=4","gravatar_id":"","url":"https://api.github.com/users/oishun1112","html_url":"https://github.com/oishun1112","followers_url":"https://api.github.com/users/oishun1112/followers","following_url":"https://api.github.com/users/oishun1112/following{/other_user}","gists_url":"https://api.github.com/users/oishun1112/gists{/gist_id}","starred_url":"https://api.github.com/users/oishun1112/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/oishun1112/subscriptions","organizations_url":"https://api.github.com/users/oishun1112/orgs","repos_url":"https://api.github.com/users/oishun1112/repos","events_url":"https://api.github.com/users/oishun1112/events{/privacy}","received_events_url":"https://api.github.com/users/oishun1112/received_events","type":"User","site_admin":false},"assignees":[{"login":"oishun1112","id":40849624,"node_id":"MDQ6VXNlcjQwODQ5NjI0","avatar_url":"https://avatars.githubusercontent.com/u/40849624?v=4","gravatar_id":"","url":"https://api.github.com/users/oishun1112","html_url":"https://github.com/oishun1112","followers_url":"https://api.github.com/users/oishun1112/followers","following_url":"https://api.github.com/users/oishun1112/following{/other_user}","gists_url":"https://api.github.com/users/oishun1112/gists{/gist_id}","starred_url":"https://api.github.com/users/oishun1112/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/oishun1112/subscriptions","organizations_url":"https://api.github.com/users/oishun1112/orgs","repos_url":"https://api.github.com/users/oishun1112/repos","events_url":"https://api.github.com/users/oishun1112/events{/privacy}","received_events_url":"https://api.github.com/users/oishun1112/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-11T22:30:02Z","updated_at":"2022-01-31T04:54:13Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nsirhashalot\n\n\n# Vulnerability details\n\n## Impact\n\nThe Vault.sol contract has two address state variables, the `keeper` variable and the `controller` variable, which are both permitted to be the zero address. If both variables are zero simultaneously, any address can burn the available funds (available funds = balance - totalDebt) by sending these tokens to the zero address with the unprotected `utilitize()` function. If a user has no totalDebt, the user can lose their entire underlying token balance because of this.\n\n## Proof of Concept\n\nThe problematic `utilize()` function is [found here](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L342-L352). To see how the two preconditions can occur:\n1. The keeper state variable is only changed by the `setKeeper()` function [found here](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L502). If this function is not called, the keeper variable will retain the default value of address(0), which bypasses [the only access control for the utilize function](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L344).\n2. There is a comment [here on line 69](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L502https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L502) stating the controller state variable can be zero. There is no zero address check for the controller state variable in the Vault constructor.\n\nIf both address variables are left at their defaults of address(0), then the safeTransfer() call [on line 348](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L348) would send the tokens to address(0).\n\n## Recommended Mitigation Steps\n\nAdd the following line to the very beginning of the `utilize()` function:\n`require(address(controller) != address(0))`\n\nThis check is already found in many other functions in Vault.sol, including the `_unutilize()` function.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/158/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/158/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/157","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/157/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/157/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/157/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/157","id":1099675779,"node_id":"I_kwDOGhqIJ85Bi7iD","number":157,"title":"Incorrect return value comment","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637939,"node_id":"LA_kwDOGhqIJ87Y4TVz","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/disagree%20with%20severity","name":"disagree with severity","color":"E99695","default":false,"description":"Sponsor confirms validity, but disagrees with warden’s risk assessment (sponsor explain in comments)"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"shogo0525","id":6888594,"node_id":"MDQ6VXNlcjY4ODg1OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/6888594?v=4","gravatar_id":"","url":"https://api.github.com/users/shogo0525","html_url":"https://github.com/shogo0525","followers_url":"https://api.github.com/users/shogo0525/followers","following_url":"https://api.github.com/users/shogo0525/following{/other_user}","gists_url":"https://api.github.com/users/shogo0525/gists{/gist_id}","starred_url":"https://api.github.com/users/shogo0525/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shogo0525/subscriptions","organizations_url":"https://api.github.com/users/shogo0525/orgs","repos_url":"https://api.github.com/users/shogo0525/repos","events_url":"https://api.github.com/users/shogo0525/events{/privacy}","received_events_url":"https://api.github.com/users/shogo0525/received_events","type":"User","site_admin":false},"assignees":[{"login":"shogo0525","id":6888594,"node_id":"MDQ6VXNlcjY4ODg1OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/6888594?v=4","gravatar_id":"","url":"https://api.github.com/users/shogo0525","html_url":"https://github.com/shogo0525","followers_url":"https://api.github.com/users/shogo0525/followers","following_url":"https://api.github.com/users/shogo0525/following{/other_user}","gists_url":"https://api.github.com/users/shogo0525/gists{/gist_id}","starred_url":"https://api.github.com/users/shogo0525/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shogo0525/subscriptions","organizations_url":"https://api.github.com/users/shogo0525/orgs","repos_url":"https://api.github.com/users/shogo0525/repos","events_url":"https://api.github.com/users/shogo0525/events{/privacy}","received_events_url":"https://api.github.com/users/shogo0525/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-11T22:29:35Z","updated_at":"2022-01-27T23:04:38Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nsirhashalot\n\n\n# Vulnerability details\n\n## Impact\n\nThe comment for the return value of the `getCDS()` function in Registry.sol is incorrectly copied from elsewhere, possibly the `confirmExistence()` function. The return value is an address, not a boolean. This is considered low risk based on C4's [risk ratings](https://docs.code4rena.com/roles/wardens/judging-criteria#estimating-risk-tl-dr).\n\n## Proof of Concept\n\nThe problematic comment is from the `getCDS()` function [here](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Registry.sol#L99). It is an incorrect duplicate of the comment for the `confirmExistence()` function [found here](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Registry.sol#L113).\n\n## Recommended Mitigation Steps\n\nReplace the comment with something like `@return CDS contract address`, which is used to describe this value in the `setCDS()` function.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/157/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/157/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/155","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/155/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/155/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/155/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/155","id":1099675262,"node_id":"I_kwDOGhqIJ85Bi7Z-","number":155,"title":"Inaccurate return value from `getCDS()` possible","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637962,"node_id":"LA_kwDOGhqIJ87Y4TWK","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20disputed","name":"sponsor disputed","color":"B60205","default":false,"description":"Sponsor cannot duplicate the issue, or otherwise disagrees this is an issue"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-11T22:28:53Z","updated_at":"2022-01-27T23:03:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nsirhashalot\n\n\n# Vulnerability details\n\n## Impact\n\nThe `getCDS()` function in Registry.sol may return an unexpected value when `cds[_address] == address(0)`. The return value for the case of  `cds[_address] == address(0)` is `cds[address(0)]`, but `cds[address(0)]` can be set to a non-default value in the `setCDS()` function. Returning `cds[address(0)]` may return an address instead of returning address(0) or another value indicating there is no CDS for this address.\n\nThis issue is due to either a lack of a zero address check  in the `setCDS()` function or a typo, it is unclear which.\n\n## Proof of Concept\n\nThe issue is [this if statement branch](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Registry.sol#L102-L103) in Registry.sol.\n\n## Recommended Mitigation Steps\n\nA few solutions exist:\n1. The `setCDS()` function should add a require statement like `require(_address != address(0))` to include a zero address check to prevent cds[0] from being set to a non-default value\n2. The `getCDS()` function should use `return address(0)` instead of `return cds[address(0)];`. If this solution is chosen, the if/else statement can be removed entirely to save gas so that the only line of code in this function is `return cds[_address];`\n3. If the goal of the `if (cds[_address] == address(0))` check is to return a default value if no custom value has been set, then a separate variable containing a default value would be better than relying on the existing array.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/155/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/155/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/153","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/153/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/153/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/153/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/153","id":1099674767,"node_id":"I_kwDOGhqIJ85Bi7SP","number":153,"title":"No slippage control in CDSTemplate.sol = frontrun or sandwich","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637962,"node_id":"LA_kwDOGhqIJ87Y4TWK","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20disputed","name":"sponsor disputed","color":"B60205","default":false,"description":"Sponsor cannot duplicate the issue, or otherwise disagrees this is an issue"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-11T22:28:10Z","updated_at":"2022-01-27T22:17:30Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nsirhashalot\n\n\n# Vulnerability details\n\n## Impact\n\nThe InsureDao protocol is a type of DEX and therefore should protect users against frontrunning and sandwich attacks. The approach used by Uniswap is to set bounds on the slippage that can occur in a trade by specifying a minimum amount for the DEX user to receive, as seen in the Uniswap [addLiquity function](https://github.com/Uniswap/v2-periphery/blob/2efa12e0f2d808d9b49737927f0e416fafa5af68/contracts/UniswapV2Router01.sol#L33-L34). In InsureDao, there is no slippage protection, so an attacker could use a flashloan to cause a large change in liquidity of a trading pair, causing a change in price for the pair. Since a user cannot set a minimum value they expect to receive, they could receive far fewer assets than expected, and the attacker may profit.\n\nHere is [a similar finding in a public audit](https://consensys.net/diligence/audits/2021/06/growthdefi-wheat/#proactive-sandwiching-of-the-gulp-calls) and here is [an example of this weakness in a DEX](https://github.com/maAPPsDEV/dex-attack).\n\n## Proof of Concept\n\nThe `deposit()` [function in CDSTemplate.sol](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/CDSTemplate.sol#L130) should have some guarantees for the user to receive a minimum amount of value. No guarantees or minimum values are currently used. With the current code, is an attacker makes a large change to the `totalSupply()` or `totalLiquidity()` values of the pool, they will alter the `_mintAmount` calculation. Because this can occur in the same block as the user's deposit, the user will be unaware of what happened until it is too late.\n\n## Recommended Mitigation Steps\n\nAdd slippage protection to provide guarantees for the user that they will receive at least a certain amount of tokens in return for their deposit.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/153/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/145","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/145/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/145/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/145/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/145","id":1099599895,"node_id":"I_kwDOGhqIJ85BipAX","number":145,"title":"Use `calldata` instead of `memory` for function parameters","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T20:44:10Z","updated_at":"2022-01-27T08:02:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ndefsec\n\n\n# Vulnerability details\n\n## Impact\n\nIn some cases, having function arguments in calldata instead of\nmemory is more optimal.\n\nConsider the following generic example:\n\n```\ncontract C {\nfunction add(uint[] memory arr) external returns (uint sum) {\nuint length = arr.length;\nfor (uint i = 0; i < arr.length; i++) {\nsum += arr[i];\n}\n}\n}\n```\nIn the above example, the dynamic array arr has the storage location\nmemory. When the function gets called externally, the array values are\nkept in calldata and copied to memory during ABI decoding (using the\nopcode calldataload and mstore). And during the for loop, arr[i]\naccesses the value in memory using a mload. However, for the above\nexample this is inefficient. Consider the following snippet instead:\n\n```\ncontract C {\nfunction add(uint[] calldata arr) external returns (uint sum) {\nuint length = arr.length;\nfor (uint i = 0; i < arr.length; i++) {\nsum += arr[i];\n}\n}\n}\n```\n\nIn the above snippet, instead of going via memory, the value is directly\nread from calldata using calldataload. That is, there are no\nintermediate memory operations that carries this value.\n\nGas savings: In the former example, the ABI decoding begins with\ncopying value from calldata to memory in a for loop. Each iteration\nwould cost at least 60 gas. In the latter example, this can be\ncompletely avoided. This will also reduce the number of instructions and\ntherefore reduces the deploy time cost of the contract.\n\nIn short, use calldata instead of memory if the function argument\nis only read.\n\nNote that in older Solidity versions, changing some function arguments\nfrom memory to calldata may cause \"unimplemented feature error\".\nThis can be avoided by using a newer (0.8.*) Solidity compiler.\n\nExamples\nNote: The following pattern is prevalent in the codebase:\n\n```\nfunction f(bytes memory data) external {\n(...) = abi.decode(data, (..., types, ...));\n}\n```\n\nHere, changing to bytes calldata will decrease the gas. The total\nsavings for this change across all such uses would be quite\nsignificant.\n\n\n## Proof Of Concept\n\nExamples:\n\n```\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L176\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L186\n\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nChange memory definition with calldata.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/145/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/145/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/142","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/142/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/142/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/142/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/142","id":1099583710,"node_id":"I_kwDOGhqIJ85BilDe","number":142,"title":"Save gas in requestWithdraw()","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T20:21:56Z","updated_at":"2022-01-25T13:05:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\nUsers that incorrectly ask for a withdrawal equal to zero, will waste more gas (a storage read) since the check for `amount > 0` is put after the check for the available amount\n\n## Proof of Concept\n\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L191](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L191)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L199](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L199)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L282](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L282)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nMove this require at the top of the `requestWithdraw` function:\n\n```jsx\nrequire(_amount > 0, \"ERROR: REQUEST_ZERO\");\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/142/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/142/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/140","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/140/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/140/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/140/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/140","id":1099583419,"node_id":"I_kwDOGhqIJ85Bik-7","number":140,"title":"totalAllocPoint in IndexTemplate.sol can be cached","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T20:21:34Z","updated_at":"2022-01-25T13:11:56Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\n`totalAllocPoint` in `set()` function is read several times from storage. It can be assigned to a local variable so the function is less expensive overall\n\n## Proof of Concept\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L612](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L612)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nAssign `totalAllocPoint` to `localTotalAllocPoint` (or `cachedTotalAllocPoint`)\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/140/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/140/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/139","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/139/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/139/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/139/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/139","id":1099583260,"node_id":"I_kwDOGhqIJ85Bik8c","number":139,"title":"commitTransferOwnership() could save gas 1","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T20:21:21Z","updated_at":"2022-01-27T04:30:05Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\nWhen emitting the event, the function argument could be used, instead of reading from storage again\n\n## Proof of Concept\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Ownership.sol#L62](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Ownership.sol#L62)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nChange to:\n\n```jsx\nemit CommitNewOwnership(newOwner);\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/139/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/139/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/138","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/138/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/138/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/138/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/138","id":1099583080,"node_id":"I_kwDOGhqIJ85Bik5o","number":138,"title":"acceptTransferOwnership() could save gas by using msg.sender","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638633445,"node_id":"LA_kwDOGhqIJ87Y4SPl","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/duplicate","name":"duplicate","color":"cfd3d7","default":true,"description":"This issue or pull request already exists"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-11T20:21:07Z","updated_at":"2022-01-25T13:24:25Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\nWhen assigning the new owner, as well as emitting the event, `msg.sender` could be used to avoid reading from the storage\n\n## Proof of Concept\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Ownership.sol#L65](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Ownership.sol#L65)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nChange to:\n\n```jsx\nfunction acceptTransferOwnership() external override onlyFutureOwner {\n    /***\n     *@notice Accept a transfer of ownership\n     */\n    _owner = msg.sender;\n    emit AcceptNewOwnership(msg.sender);\n}\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/138/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/138/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/137","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/137/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/137/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/137/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/137","id":1099582914,"node_id":"I_kwDOGhqIJ85Bik3C","number":137,"title":"Avoid expensive storage reads in Parameters.sol","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T20:20:52Z","updated_at":"2022-01-27T04:30:26Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\nMany functions that read params, check whether the value is set for the given `target`, otherwise return the value for the zero-address. When doing this kind of check, the value of the `target` is read twice:\n\n- once for checking if it’s set\n- if it’s set, it’s read once more to read the actual params\n\nThese functions are used a lot of times inside all the contracts, so having them optimized as much as possible is required in order to save gas\n\n## Proof of Concept\n\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L240](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L240)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L271](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L271)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L289](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L289)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L313](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L313)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L331](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L331)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L343](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L343)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L379](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L379)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L397](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol#L397)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nAssign the target value and, if the check returns a value different from the zero-address, use it. For example, `getFeeRate` becomes:\n\n```jsx\nfunction getFeeRate(address _target)\n    external\n    view\n    override\n    returns (uint256)\n{\n    uint256 _targetFee = _fee[_target];\n    if (_targetFee == 0) {\n        return _fee[address(0)];\n    } else {\n        return _targetFee;\n    }\n}\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/137/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/137/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/133","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/133/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/133/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/133/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/133","id":1099582262,"node_id":"I_kwDOGhqIJ85Biks2","number":133,"title":"In PoolTemplate.sol, deposit() and _depositFrom() can re-use the same code","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-11T20:20:03Z","updated_at":"2022-01-27T07:16:01Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\nThe public `deposit` uses basically the same code of the internal `_depositFrom`. The only difference between them is that the former uses `msg.sender`, while the latter uses a parameter as `from` address. In order to minimize code duplication, `deposit` should be calling `_depositFrom` rather than being reimplemented using copy-paste\n\n## Proof of Concept\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L232](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L232)\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L255](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L255)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nWrite `deposit` like this:\n\n```jsx\nfunction deposit(uint256 _amount) public returns (uint256 _mintAmount) {\n    _depositFrom(_amount, msg.sender);\n}\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/133/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/133/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/132","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/132/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/132/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/132/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/132","id":1099582056,"node_id":"I_kwDOGhqIJ85Bikpo","number":132,"title":"Emit an event in setKeeper()","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-01-11T20:19:46Z","updated_at":"2022-01-25T13:37:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\nThe `setKeeper()` function is operated only by the owner, and should emit an event when the keeper is set for the first time and/or changes\n\n## Proof of Concept\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Vault.sol#L502](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Vault.sol#L502)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nAdd `emit KeeperChanged(address)` after changing the keeper\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/132/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/132/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/130","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/130/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/130/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/130/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/130","id":1099581689,"node_id":"I_kwDOGhqIJ85Bikj5","number":130,"title":"No-op in CDSTemplate.sol' withdraw()","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T20:19:19Z","updated_at":"2022-01-31T10:14:45Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\nThe amount of the withdrawal request is not correctly updated after a withdrawal in `CDSTemplate.sol`. This happens because the withdrawal request is read from storage and put in memory, like this:\n\n```jsx\nWithdrawal memory request = withdrawalReq[msg.sender];\n```\n\nHowever, the requested amount is not updated properly since the `withdrawalReq` in the storage is never updated. Instead, its in-memory version is updated, but it’s useless because that object is never used again:\n\n```jsx\n//reduce requested amount\nrequest.amount -= _amount;\n```\n\nThis issue is non critical because there is a function that takes care of updating the withdrawal requests’ amount on every token transfer: [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L358](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L358)\n\nThe issue lies in the fact that the code seems to behave differently from how it looks at a first glance. Furthermore, the other two templates correctly update the value of the withdrawal request, so the version in `CDSTemplate.sol` should be aligned as well:\n\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L239](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L239)\n- [https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L327](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L327)\n\n## Proof of Concept\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L230](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/CDSTemplate.sol#L230)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nUpdate the `amount` of the current withdrawal request as well\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/130/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/130/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/129","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/129/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/129/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/129/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/129","id":1099581495,"node_id":"I_kwDOGhqIJ85Bikg3","number":129,"title":"resume() can be called by anyone in IndexTemplate.sol","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-11T20:19:05Z","updated_at":"2022-01-25T09:26:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\nThe `resume` function can be called by any user, at any time, even when the Index contract is not locked. There should be a check preventing it from being called unless the contract is `locked`\n\n## Proof of Concept\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L459](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L459)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nAdd a require on top:\n\n```jsx\nrequire(locked);\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/129/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/129/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/128","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/128/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/128/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/128/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/128","id":1099581256,"node_id":"I_kwDOGhqIJ85BikdI","number":128,"title":"Wrong revert string in withdraw functions","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-11T20:18:46Z","updated_at":"2022-01-25T09:18:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\n`PoolTemplate.sol` and `IndexTemplate.sol` report this same error when trying to withdraw and some conditions are not met: \"ERROR: WITHDRAWAL_PENDING”\n\nHowever, `PoolTemplate.sol` does that when the `marketStatus` is not `Trading`; `IndexTemplate.sol` when the contract is locked. Since `CDSTemplate.sol`, instead, implement a different revert string, it’s best for understanding what revert strings are related to by making them as explicit and clear as possible. `CDSTemplate.sol` has this in the `withdraw` function:\n\n```jsx\nrequire(paused == false, \"ERROR: PAUSED\");\n```\n\n## Proof of Concept\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L217](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/IndexTemplate.sol#L217)\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L302](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L302)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nImprove revert strings wording\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/128/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/128/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/126","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/126/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/126/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/126/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/126","id":1099580842,"node_id":"I_kwDOGhqIJ85BikWq","number":126,"title":"repayDebt in Vault.sol could DOS functionality for markets","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637929,"node_id":"LA_kwDOGhqIJ87Y4TVp","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/2%20(Med%20Risk)","name":"2 (Med Risk)","color":"FBCA04","default":false,"description":"Assets not at direct risk, but function/availability of the protocol could be impacted or leak value"},{"id":3638637962,"node_id":"LA_kwDOGhqIJ87Y4TWK","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20disputed","name":"sponsor disputed","color":"B60205","default":false,"description":"Sponsor cannot duplicate the issue, or otherwise disagrees this is an issue"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-11T20:18:14Z","updated_at":"2022-01-28T06:03:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\np4st13r4\n\n\n# Vulnerability details\n\n## Impact\n\nAny user can pay the debt for any borrower in `Vault.sol`, by using `repayDebt()`. This function allows anyone to repay any amount of borrowed value, up-to and including the `totalDebt` value; it works by setting the `debts[_target]` to zero, and decreasing `totalDebt` by the given amount, up to zero. However, all debts of the other borrowers are left untouched.\n\nIf a malicious (but generous) user were to repay the debt for all the borrowers, markets functionality regarding borrowing would be DOSed: the vault would try to decrease the debt of the market, successfully, but would fail to decrease `totalDebt` as it would result in an underflow\n\n## Proof of Concept\n\n[https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Vault.sol#L257](https://github.com/code-423n4/2022-01-insure/blob/main/contracts/Vault.sol#L257)\n\n## Tools Used\n\nEditor\n\n## Recommended Mitigation Steps\n\nMake `repayDebt()` accept an amount up-to and including the value of the debt for the given borrower\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/126/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/126/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/124","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/124/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/124/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/124/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/124","id":1099543461,"node_id":"I_kwDOGhqIJ85BibOl","number":124,"title":"call emit from storage is more expensive","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T19:31:00Z","updated_at":"2022-01-26T07:47:01Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nFitraldys\n\n\n# Vulnerability details\n\n## Impact\nin line https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L685 the function emitted a `MarketStatusChanged` event with storage variable which is `marketStatus`.\nwhen we emit an event using storage data is more expensive than emitted an event using `MarketStatus.Payingout` value. \n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L685\n```\ncontract emitstatust {\n\n    enum MarketStatus {\n        Trading,\n        Payingout\n    }\n    MarketStatus public marketStatus;\n\n    event MarketStatusChanged(MarketStatus statusValue);\n\n    function amit() public {\n    \n    marketStatus = MarketStatus.Payingout;\n\n    emit MarketStatusChanged(marketStatus);\n\n    }\n}\n//44792 gas\n```\n\ncan change to :\n\n```\ncontract emitstatust {\n\n    enum MarketStatus {\n        Trading,\n        Payingout\n    }\n    MarketStatus public marketStatus;\n\n    event MarketStatusChanged(MarketStatus statusValue);\n\n    function amit() public {\n    \n    marketStatus = MarketStatus.Payingout;\n\n    emit MarketStatusChanged(MarketStatus.Payingout);\n\n    }\n}\n//44659 gas\n```\n\n## Tools Used\nremix\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/124/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/124/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/122","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/122/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/122/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/122/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/122","id":1099516520,"node_id":"I_kwDOGhqIJ85BiUpo","number":122,"title":"save Insurance data directly to storage can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T18:58:42Z","updated_at":"2022-01-25T13:48:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nFitraldys\n\n\n# Vulnerability details\n\n## Impact\nin line https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L508 instead of save `Insurance` value to memory then save to `insurences` storage it's better to save the `Insurence` value directly to `insurences`  storage or mapping to save gas.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L508\n```\ncontract insur {\n\n    struct Insurance {\n        uint256 id; //each insuance has their own id\n        uint256 startTime; //timestamp of starttime\n        uint256 endTime; //timestamp of endtime\n        uint256 amount; //insured amount\n        bytes32 target; //target id in bytes32\n        address insured; //the address holds the right to get insured\n        bool status; //true if insurance is not expired or redeemed\n    }\n\n     mapping(uint256 => Insurance) public insurances;\n\n    function coba() public {\n\n        uint256 _id = 10;\n        uint256 _endTime = 10;\n        uint256 _amount = 12;\n        bytes32 _target = bytes32(uint256(10));\n\n\n        Insurance memory _insurance = Insurance(\n            _id,\n            block.timestamp,\n            _endTime,\n            _amount,\n            _target,\n            msg.sender,\n            true\n        );\n        insurances[_id] = _insurance;\n\n    }\n}\n//154623 gas\n```\n change to :\n```\ncontract insur {\n\n    struct Insurance {\n        uint256 id; //each insuance has their own id\n        uint256 startTime; //timestamp of starttime\n        uint256 endTime; //timestamp of endtime\n        uint256 amount; //insured amount\n        bytes32 target; //target id in bytes32\n        address insured; //the address holds the right to get insured\n        bool status; //true if insurance is not expired or redeemed\n    }\n\n     mapping(uint256 => Insurance) public insurances;\n\n    function coba() public {\n\n        uint256 _id = 10;\n        uint256 _endTime = 10;\n        uint256 _amount = 12;\n        bytes32 _target = bytes32(uint256(10));\n\n\n        insurances[_id] = Insurance(\n            _id,\n            block.timestamp,\n            _endTime,\n            _amount,\n            _target,\n            msg.sender,\n            true\n        );\n        \n\n    }\n}\n//154610 gas \n```\n\n## Tools Used\nremix\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/122/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/122/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/121","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/121/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/121/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/121/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/121","id":1099511042,"node_id":"I_kwDOGhqIJ85BiTUC","number":121,"title":"unnecessary double `totalLiquidity()` call in function availableBalance","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T18:51:41Z","updated_at":"2022-01-25T13:49:30Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomio\n\n\n# Vulnerability details\n\n## Impact\nby saving `totalLiquidity()` to memory can save more gas instead of doing double function call\n\n## Proof of Concept\nBefore: https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L829\n// gas cost 23862\n\nAfter:\n```\nfunction totalLiquidity() public view returns (uint256){\n     return 10;\n }   \n\nfunction availableBalance()public view returns (uint256 _balance)\n    {\n        uint256 saveTotalLiquidity = totalLiquidity();\n        if (saveTotalLiquidity > 0) {\n            return saveTotalLiquidity - lockedAmount;\n        } else {\n            return 0;\n        }\n    }\n```\n// gas cost 23840\n\n## Tools Used\nRemix\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/121/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/121/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/120","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/120/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/120/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/120/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/120","id":1099506248,"node_id":"I_kwDOGhqIJ85BiSJI","number":120,"title":"Lack of inputs in Factory","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-11T18:45:22Z","updated_at":"2022-01-31T07:44:32Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\n0x1f8b\n\n\n# Vulnerability details\n\n## Impact\nWrong deployment.\n\n## Proof of Concept\nThe factory contract haven't got any check of `_registry` and `_ownership` and both values must be defined or the logic inside the contract will fault.\n\n## Tools Used\nManual review.\n\n## Recommended Mitigation Steps\nIt's mandatory to check that the address are not zero or the contract could be wrong deployed.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/120/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/120/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/118","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/118/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/118/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/118/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/118","id":1099503139,"node_id":"I_kwDOGhqIJ85BiRYj","number":118,"title":"Gas saving caching the value","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-11T18:41:23Z","updated_at":"2022-01-28T00:52:59Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\n0x1f8b\n\n\n# Vulnerability details\n\n## Impact\nGas saving.\n\n## Proof of Concept\nThere are multiple methods in `Registry` that check a value inside the storage and if it's not defined, use the default one. It's better to cache the value in order to save gas if it was defined avoiding double reading.\n\nFor example, instead of the following code:\n```\n    function getCDS(address _address) external view override returns (address) {\n        if (cds[_address] == address(0)) {\n            return cds[address(0)];\n        } else {\n            return cds[_address];\n        }\n    }\n```\nuse\n```\n    function getCDS(address _address) external view override returns (address) {\n        address val =cds[_address];\n        if ( val== address(0)) {\n            return cds[address(0)];\n        } else {\n            return val;\n        }\n    }\n```\n\n## Tools Used\nManual review.\n\n## Recommended Mitigation Steps\nCache the value.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/118/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/118/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/113","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/113/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/113/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/113/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/113","id":1099473549,"node_id":"I_kwDOGhqIJ85BiKKN","number":113,"title":"split one require to two require can save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T18:05:49Z","updated_at":"2022-01-25T13:54:15Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nFitraldys\n\n\n# Vulnerability details\n\n## Impact\nin line https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L260 have two check inside the require which is `marketStatus == MarketStatus.Trading` and `paused == false` and by spliting this check we can save gas. \n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L260\n\n```\nfunction woi() public {\n\n        require(\n            marketStatus == MarketStatus.Trading && paused == false,\n            \"ERROR: DEPOSIT_DISABLED\"\n        );\n\n    }\n// 23645 gas\n``` \n\ncan be change to \n\n```\nfunction woi() public{ \n\n        require(\n            marketStatus == MarketStatus.Trading, \"ERROR: DEPOSIT_DISABLED\"\n        );\n        require(  \n            paused == false, \"ERROR: DEPOSIT_DISABLED\"\n        );\n\n    }\n//23637 gas\n```\n\n\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/113/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/113/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/111","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/111/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/111/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/111/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/111","id":1099398620,"node_id":"I_kwDOGhqIJ85Bh33c","number":111,"title":"avoid using 'else' code can save gas in function pendingPremium","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T16:46:10Z","updated_at":"2022-01-25T13:55:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomio\n\n\n# Vulnerability details\n\n## Impact\nby changing the code from `if (_credit == 0) {` to `if (_credit != 0) {` and remove the else we can save gas when contract is deploy and we can save gas when `_credit` is equal to 0. because if `_credit` equal to 0 the original function will return 0 which a default value for uint256\n\n## Proof of Concept\nBefore: https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L776\n// gas 24307\n\nAfter:\n```\nfunction pendingPremium(address _index)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 _credit = indicies[_index].credit;\n       if (_credit != 0) {\n            return\n                _sub(\n                    (_credit * rewardPerCredit) / MAGIC_SCALE_1E6,\n                    indicies[_index].rewardDebt\n                );\n        }\n    }\n```\n// gas 24286\n\n\n## Tools Used\nRemix\n\n## Recommended Mitigation Steps\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/111/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/111/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/110","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/110/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/110/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/110/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/110","id":1099318263,"node_id":"I_kwDOGhqIJ85BhkP3","number":110,"title":"Missing validation of address argument could indefinitely lock Registry contract","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-11T15:42:06Z","updated_at":"2022-01-27T07:08:10Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ndefsec\n\n\n# Vulnerability details\n\n## Impact\n\nthe owner parameter are used for the onlyOwner modifier. In the state variable , proper check up should be done , other wise error in these state variable can lead to redeployment of contract. If the zero address is assigned to rebalanceManager parameter, that will fail all Owner functions.\n\n## Proof of Concept\n\n1. Navigate to the following contract functions.\n\n\"https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Registry.sol#L31\"\n\n2. Adding zero address into the owner leads to failure of onlyOwner only functions.\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nAdd proper zero address validation.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/110/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/110/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/108","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/108/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/108/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/108/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/108","id":1099241880,"node_id":"I_kwDOGhqIJ85BhRmY","number":108,"title":"in function _sub, less gas used using unchecked","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-11T14:38:29Z","updated_at":"2022-01-24T11:26:12Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomio\n\n\n# Vulnerability details\n\n## Impact\nby using 'unchecked' you can save  +-182 gas\n\n## Proof of Concept\nbefore: https://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L938\n//22378 before\n\nafter:\n```\nfunction _sub(uint256 a, uint256 b) public pure returns (uint256) {\n        if (a < b) {\n            return 0;\n        } else {\n            unchecked {return a - b;}\n        }\n    }  \n```\n//22196 after\n\n\n## Tools Used\nRemix\n\n## Recommended Mitigation Steps\nused 'unchecked' in function _sub\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/108/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/108/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/94","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/94/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/94/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/94/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/94","id":1097650479,"node_id":"I_kwDOGhqIJ85BbNEv","number":94,"title":"Uncontrolled call to controller, which can be the zero address","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"pontagon333","id":87188356,"node_id":"MDQ6VXNlcjg3MTg4MzU2","avatar_url":"https://avatars.githubusercontent.com/u/87188356?v=4","gravatar_id":"","url":"https://api.github.com/users/pontagon333","html_url":"https://github.com/pontagon333","followers_url":"https://api.github.com/users/pontagon333/followers","following_url":"https://api.github.com/users/pontagon333/following{/other_user}","gists_url":"https://api.github.com/users/pontagon333/gists{/gist_id}","starred_url":"https://api.github.com/users/pontagon333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pontagon333/subscriptions","organizations_url":"https://api.github.com/users/pontagon333/orgs","repos_url":"https://api.github.com/users/pontagon333/repos","events_url":"https://api.github.com/users/pontagon333/events{/privacy}","received_events_url":"https://api.github.com/users/pontagon333/received_events","type":"User","site_admin":false},"assignees":[{"login":"pontagon333","id":87188356,"node_id":"MDQ6VXNlcjg3MTg4MzU2","avatar_url":"https://avatars.githubusercontent.com/u/87188356?v=4","gravatar_id":"","url":"https://api.github.com/users/pontagon333","html_url":"https://github.com/pontagon333","followers_url":"https://api.github.com/users/pontagon333/followers","following_url":"https://api.github.com/users/pontagon333/following{/other_user}","gists_url":"https://api.github.com/users/pontagon333/gists{/gist_id}","starred_url":"https://api.github.com/users/pontagon333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pontagon333/subscriptions","organizations_url":"https://api.github.com/users/pontagon333/orgs","repos_url":"https://api.github.com/users/pontagon333/repos","events_url":"https://api.github.com/users/pontagon333/events{/privacy}","received_events_url":"https://api.github.com/users/pontagon333/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-10T09:28:51Z","updated_at":"2022-02-02T10:24:18Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ncamden\n\n\n# Vulnerability details\n\n## Impact\nThe `utilize()` function can be called while the controller is the zero address. This will fail. A comment in the constructor says that the controller shouldn't be the zero address.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L350\n\n## Recommended Mitigation Steps\n`utilize` should have a check to see if the controller is not the zero address (like `_unutilize`) and give an appropriate error message.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/94/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/94/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/89","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/89/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/89/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/89/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/89","id":1097304636,"node_id":"I_kwDOGhqIJ85BZ4o8","number":89,"title":"Gas optimization in Vault.addValueBatch()","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T21:14:29Z","updated_at":"2022-01-25T14:00:02Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ntqts\n\n\n# Vulnerability details\n\n## Impact\nNone\n\n## Proof of Concept\nThe `for` loop at [L109-113](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L109-L113) can be unrolled to remove the overhead of the loop itself, and avoid using an initialized-to-zero uint128 variable.\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nReplace L109-113 with:\n```\nuint256 _allocation = (_shares[0] * _attributions) / MAGIC_SCALE_1E6;\nattributions[_beneficiaries[0]] += _allocation;\n_allocations[0] = _allocation;\n\n_allocation = (_shares[1] * _attributions) / MAGIC_SCALE_1E6;\nattributions[_beneficiaries[1]] += _allocation;\n_allocations[1] = _allocation;\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/89/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/89/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/87","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/87/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/87/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/87/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/87","id":1097235350,"node_id":"I_kwDOGhqIJ85BZnuW","number":87,"title":"Shorten Error Messages to Save Gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2022-01-09T16:08:20Z","updated_at":"2022-01-28T00:52:05Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\n0xngndev\n\n\n# Vulnerability details\n\n## Impact\n\nError Messages that have a length of 32 or more one require one additional slot to be stored, causing extra gas costs when deploying the contract and when the function is executed and it reverts.\n\n## Proof of Concept\n\nI put together a quick proof to show the different impact of the errors we can have in Solidity:\n\n- Long require errors => more than 32 bytes\n- Short require errors => less than 32 bytes\n- Custom errors\n\nHere are the contract size findings:\n\n```rust\n//SPDX-License-Identifier: unlicensed\npragma solidity 0.8.10;\n\ncontract Errors {\n  bool public thisIsFalse;\n  error WithdrawalExceeded();\n\n  /*\n    Contract Size with just this function: 333 bytes;\n  */\n  function moreThan32Bytes() public {\n    require(thisIsFalse, \"ERROR: WITHDRAWAL_EXCEEDED_REQUEST\");\n  }\n\n  /*\n    Contract Size with just this function: 295 bytes;\n//   */\n  function lessThan32Bytes() public {\n    require(thisIsFalse, \"WITHDRAWAL_EXCEEDED_REQUEST\");\n  }\n\n  /*\n    Contract Size with just this function: 242 bytes;\n  */\n  function customError() public {\n    if (!thisIsFalse) revert WithdrawalExceeded();\n  }\n}\n```\n\nI then run tests to see the gas costs of having the functions revert, and although these are not very accurate due to the fact that it’s hard to isolate the gas costs of a reverting function due to the order of execution (I can’t have an event that logs the gas before the function revert and another one after because the one after the revert will never be reached), it still shows some differences.\n\n```rust\n//SPDX-License-Identifier: unlicensed\npragma solidity 0.8.10;\n\nimport \"ds-test/test.sol\";\nimport \"../Errors.sol\";\n\ncontract ErrorsTest is DSTest {\n  Errors errors;\n\n  function setUp() public {\n    errors = new Errors();\n  }\n\n  function testFailLessThan32Bytes() public logs_gas {\n    errors.lessThan32Bytes();\n  }\n\n  function testFailMoreThan32Bytes() public logs_gas {\n    errors.moreThan32Bytes();\n  }\n\n  function testFailCustomError() public logs_gas {\n    errors.customError();\n  }\n}\n```\n\n```rust\nRunning 3 tests for \"ErrorsTest.json\":ErrorsTest\n[PASS] testFailCustomError() (gas: 3161)\n[PASS] testFailLessThan32Bytes() (gas: 3314)\n[PASS] testFailMoreThan32Bytes() (gas: 3401)\n```\n\n## Tools Used\n\nDappTools/Foundry\n\n## Recommended Mitigation Steps\n\nPersonally, I would switch to custom errors and reverts to maximize the savings, but if you dislike revert syntax, then I would suggest to check which of your require errors have a length longer than 32, and shorten them so that their length is less than 32.\n\nHere are some examples of the errors you could shorten in your `CDSTemplate.sol` contract:\n\n- `ERROR: INITIALIZATION_BAD_CONDITIONS`\n- `ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST`\n- `ERROR: WITHDRAWAL_EXCEEDED_REQUEST`\n\nRemoving the “ERROR” keyword should be enough for most of these. Bear in mind you can always have concise error messages and a section in your documentation that explains them further or have your natspec expand on them if you find them too cryptic. \n\nAn example of how to apply a custom error in the first error would be to just have the error `say BadConditions()`. The user knows it’s an error because the function call failed, and the user knows it has happened in the initialize function because he called it, so `BadConditions()` should be a clear message despite being concise\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/87/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/87/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/84","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/84/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/84/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/84/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/84","id":1097219846,"node_id":"I_kwDOGhqIJ85BZj8G","number":84,"title":"Loss of precision and increased gas cost with double assignment on a calculation  ","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-09T15:06:17Z","updated_at":"2022-01-28T00:51:39Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\nIn `IndexTemplate.sol:withdrawable()`, the following can be optimized to save gas and avoid a loss of precision, from:\n```\n                uint256 _necessaryAmount = _targetLockedCreditScore * totalAllocPoint /  _targetAllocPoint;\n                _necessaryAmount = _necessaryAmount *  MAGIC_SCALE_1E6 / targetLev;\n```\nto\n```\n                uint256 _necessaryAmount = _targetLockedCreditScore * totalAllocPoint *  MAGIC_SCALE_1E6 /  (_targetAllocPoint * targetLev);\n```\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/84/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/84/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/83","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/83/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/83/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/83/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/83","id":1097217916,"node_id":"I_kwDOGhqIJ85BZjd8","number":83,"title":"Gas: Use `else if` to save gas and simplify code","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T14:58:36Z","updated_at":"2022-01-25T14:05:27Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nIncreased gas cost\n\n## Proof of Concept\nIn `IndexTemplate.sol:_adjustAlloc()`, the 3 following conditions are always evaluated:\n```\n                //Withdraw or Deposit credit\n                if (_current > _target && _available != 0) {\n                    //if allocated credit is higher than the target, try to decrease\n                    uint256 _decrease = _current - _target;\n                    IPoolTemplate(_poolList[i].addr).withdrawCredit(_decrease);\n                    totalAllocatedCredit -= _decrease;\n                }\n                if (_current < _target) {\n                    uint256 _allocate = _target - _current;\n                    IPoolTemplate(_poolList[i].addr).allocateCredit(_allocate);\n                    totalAllocatedCredit += _allocate;\n                }\n                if (_current == _target) {\n                    IPoolTemplate(_poolList[i].addr).allocateCredit(0);\n                }\n```\nThe code can be optimized to save some gas:\n```\n                if (_current == _target) {\n                    IPoolTemplate(_poolList[i].addr).allocateCredit(0);\n                } else if (_current < _target) {\n                    uint256 _allocate = _target - _current;\n                    IPoolTemplate(_poolList[i].addr).allocateCredit(_allocate);\n                    totalAllocatedCredit += _allocate;\n                } else if (_current > _target && _available != 0) {\n                    //Withdraw or Deposit credit\n                    //if allocated credit is higher than the target, try to decrease\n                    uint256 _decrease = _current - _target;\n                    IPoolTemplate(_poolList[i].addr).withdrawCredit(_decrease);\n                    totalAllocatedCredit -= _decrease;\n                }\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nApply the refacto\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/83/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/83/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/82","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/82/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/82/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/82/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/82","id":1097216182,"node_id":"I_kwDOGhqIJ85BZjC2","number":82,"title":"Gas: Short-circuiting in an if-statement","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T14:51:20Z","updated_at":"2022-01-28T00:50:59Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\n> The operators “||” and “&&” apply the common short-circuiting rules. This means that in the expression “f(x) || g(y)”, if “f(x)” evaluates to true, “g(y)” will not be evaluated even if it may have side-effects.\n\nSource: https://docs.soliditylang.org/en/v0.5.4/types.html#booleans\n\n## Proof of Concept\nIn `IndexTemplate.sol:withdrawable()`, there's an if-statement as such:\n```\n293:                         if (i == 0 || _availableRate < _lowestAvailableRate) {\n```\nHere, the condition `i == 0` is always evaluated and is always equal to `false` when `i > 0`, meaning here a total of `poolList.length - 1` evaluations are always evaluated to `false`.\n\nIt's best to reorder the conditions such as this condition doesn't get evaluated if `_availableRate < _lowestAvailableRate` is satisfied:\n```\n293:                         if (_availableRate < _lowestAvailableRate || i == 0 ) {\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nApply the refacto\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/82/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/82/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/81","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/81/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/81/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/81/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/81","id":1097212143,"node_id":"I_kwDOGhqIJ85BZiDv","number":81,"title":"Gas: Redundant if-statement with the for-loop condition","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T14:34:36Z","updated_at":"2022-01-25T14:10:17Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nIncreased gas cost\n\n## Proof of Concept\nIn `Factory.sol`, the following `> 0` checks are redundant with the for-loop condition, because if `_references.length == 0` or `_conditions.length == 0`, the condition `uint256 i = 0; i <(_conditions)|(_references).length` will never be satisfied and the for-loop won't iterate:\n```\n175:         if (_references.length > 0) {\n176:             for (uint256 i = 0; i < _references.length; i++) {\n177:                 require(\n178:                     reflist[address(_template)][i][_references[i]] == true ||\n179:                         reflist[address(_template)][i][address(0)] == true,\n180:                     \"ERROR: UNAUTHORIZED_REFERENCE\"\n181:                 );\n182:             }\n183:         }\n184: \n185:         if (_conditions.length > 0) {\n186:             for (uint256 i = 0; i < _conditions.length; i++) {\n187:                 if (conditionlist[address(_template)][i] > 0) {\n188:                     _conditions[i] = conditionlist[address(_template)][i];\n189:                 }\n190:             }\n191:         }\n\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nRemove these 2 if-statements\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/81/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/81/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/80","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/80/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/80/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/80/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/80","id":1097210696,"node_id":"I_kwDOGhqIJ85BZhtI","number":80,"title":"Gas: Avoid double assignment on variable","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T14:28:28Z","updated_at":"2022-01-25T14:16:36Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nIncreased gas cost\n\n## Proof of Concept\nThe variable `T_0` can go through 2 assignments in a row:\nHere:\n```\n75:         uint256 T_0 = _totalLiquidity;\n76:         if (T_0 > T_1) {\n77:             T_0 = T_1;\n78:         }\n```\nAnd here:\n```\n134:         uint256 T_0 = _totalLiquidity;\n135:         if (T_0 > T_1) {\n136:             T_0 = T_1;\n137:         }\n```\n\nThe code can be optimized as such to save some gas:\n```\n        uint256 T_0 = _totalLiquidity > T_1 ? _totalLiquidity : T_1;\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nApply the refacto \n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/80/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/80/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/79","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/79/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/79/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/79/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/79","id":1097209438,"node_id":"I_kwDOGhqIJ85BZhZe","number":79,"title":"`CDSTemplate.sol:compensate` code optimization","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T14:22:55Z","updated_at":"2022-01-26T07:44:05Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nDuplicated code, loss of maintainability, increased contract size which leads to increased gas cost\n\n## Proof of Concept\nThe following can be simplified:\n```\n260:         if (_available >= _amount) {\n261:             _compensated = _amount;\n262:             _attributionLoss = vault.transferValue(_amount, msg.sender);\n263:             emit Compensated(msg.sender, _amount);\n264:         } else {\n265:             //when CDS cannot afford, pay as much as possible\n266:             _compensated = _available;\n267:             _attributionLoss = vault.transferValue(_available, msg.sender);\n268:             emit Compensated(msg.sender, _available);\n269:         }\n```\nto\n```\n260:         _compensated = _available >= _amount ? _amount : _available; //when CDS cannot afford, pay as much as possible\n261:         _attributionLoss = vault.transferValue(_compensated, msg.sender);\n262:         emit Compensated(msg.sender, _compensated);\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nApply the refacto and look out for duplicated code\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/79/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/79/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/78","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/78/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/78/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/78/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/78","id":1097195204,"node_id":"I_kwDOGhqIJ85BZd7E","number":78,"title":"Gas: Contracts inheriting `InsureDAOERC20` don't need to import some dependencies *again*","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T13:23:46Z","updated_at":"2022-01-25T14:49:42Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nWhen a contract imports and implements an interface or another contracts, it doesn't need to import the libraries that were already imported there.\n\nRemoving these imports will save gas.\n\n## Proof of Concept\n`InsureDAOERC20` imports the following: \n```\n5: import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n6: import \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n```\n\nThe following contracts inherit `InsureDAOERC20` and also make those imports: `CDSTemplate`, `IndexTemplate`, `PoolTemplate`\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nRemove the unused imports to reduce the size of the contract and save some deployment gas.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/78/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/78/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/76","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/76/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/76/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/76/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/76","id":1097135368,"node_id":"I_kwDOGhqIJ85BZPUI","number":76,"title":"unnecessary checked postfix arithmetics","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T08:19:51Z","updated_at":"2022-01-24T11:26:09Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\negjlmn1\n\n\n# Vulnerability details\n\nin all of your for loops, you increase your loop variable using `i++`\nit has 2 problems:\n1. postfix increment is more wasteful than prefix increment (`++i` instead of `i++`)\n2. there is no risk for overflow, so you can use `unchecked{}`\n\n## Impact\nprefix arithmetic is a bit cheaper than postfix arithmetic, but if you do it in a for loop, this small amount of gas can pile up and be a big waste.\nalso, in solidity 0.8.0+, every arithmetic operation is checked for overflow and underflow, which adds a lot of gas to a single operation. Since in your for loop you don't have the risk for overflow, you can surround the operation in `unchecked{}` to save a lot of gas (which will save a huge amount since it saves a lot in a single loop iteration.)\n\n## Proof of Concept\nChecked on remix\n\n## Tools Used\nmanual code review\n\n## Recommended Mitigation Steps\nchange every `i++` in your for loops to `unchecked{++i}`\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/76/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/76/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/72","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/72/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/72/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/72/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/72","id":1097105600,"node_id":"I_kwDOGhqIJ85BZIDA","number":72,"title":"Gas: Consider making variables that aren't updated outside the constructor as `immutable`","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-09T04:52:30Z","updated_at":"2022-01-25T14:50:30Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nThe compiler won't reserve a storage slot for `immutable` variables\n\n## Proof of Concept\nThe following variables are initialized in the contract's constructor and can't get updated after:\n```\nFactory.sol:registry\nFactory.sol:ownership\nParameters:ownership\nBondingPremium:ownership\nRegistry:ownership\nVault:ownership\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nMake these variables `immutable`\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/72/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/72/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/69","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/69/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/69/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/69/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/69","id":1097102482,"node_id":"I_kwDOGhqIJ85BZHSS","number":69,"title":"Gas: Costly operations inside a loop (`IndexTemplate._adjustAlloc()`)","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T04:27:39Z","updated_at":"2022-01-25T14:52:37Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nRepetitive and expensive SSTORE opcode operations inside loops\n\n## Proof of Concept\n```\n\ttotalAllocatedCredit -= _available (contracts/IndexTemplate.sol#368)\n\ttotalAllocatedCredit -= _decrease (contracts/IndexTemplate.sol#395)\n\ttotalAllocatedCredit += _allocate (contracts/IndexTemplate.sol#401)\n```\n\n## Tools Used\nSlither\n\n## Recommended Mitigation Steps\nCreate a memory variable which will be used to compute a `_totalAllocatedCredit` that will get added to `totalAllocatedCredit` storage variable outside the loop.\nAs an idea, you could create 1 such `int` variable and use it's value after the for-loop, or you could create 2 uint variables where 1 would store the _totalDecrease and 1 would store the _totalAllocate, and respectively substract and add them.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/69/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/69/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/68","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/68/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/68/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/68/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/68","id":1097101285,"node_id":"I_kwDOGhqIJ85BZG_l","number":68,"title":"Gas: Storage variable `IndexTemplate:pendingEnd#62` is never used and should be deleted","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T04:17:30Z","updated_at":"2022-01-25T14:53:46Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nIncreased gas cost (1 slot)\n\n## Proof of Concept\nIndexTemplate.pendingEnd (contracts/IndexTemplate.sol#62) should be deleted as it's never used by the contract\n\n## Tools Used\nSlither\n\n## Recommended Mitigation Steps\nDelete the variable `IndexTemplate.pendingEnd`\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/68/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/68/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/66","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/66/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/66/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/66/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/66","id":1097096335,"node_id":"I_kwDOGhqIJ85BZFyP","number":66,"title":"Gas: Unnecessary checked arithmetic when no overflow/underflow possible","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-09T03:38:27Z","updated_at":"2022-01-28T00:17:56Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact \nIncreased gas cost. \n\n## Proof of Concept \nSolidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers.\n\nWhen an overflow or an underflow isn't possible (as an example, when a comparison is made before the arithmetic operation, or the operation doesn't depend on user input), some gas can be saved by using an `unchecked` block.\n\nhttps://docs.soliditylang.org/en/v0.8.10/control-structures.html#checked-or-unchecked-arithmetic\n\nThese lines are the obvious ones that can't underflow or overflow (operations on constants or checks already made before the operations with `require` statements or `if` statements):\n``` \nPremiumModels\\BondingPremium.sol:47:        T_1 = 1000000 * DECIMAL;\nPremiumModels\\BondingPremium.sol:130:        uint256 u1 = BASE - ((_lockedAmount * BASE) / _totalLiquidity); //util rate before. 1000000 = 100.000%\nPremiumModels\\BondingPremium.sol:132:            (((_lockedAmount + _amount) * BASE) / _totalLiquidity); //util rate after. 1000000 = 100.000%\nIndexTemplate.sol:292:                        uint256 _lockedCredit = _allocated - _availableBalance;\nPoolTemplate.sol:942:            return a - b;\nIndexTemplate.sol:308:                    _retVal = _totalLiquidity - _necessaryAmount;\nIndexTemplate.sol:393:                    uint256 _decrease = _current - _target;\nIndexTemplate.sol:399:                    uint256 _allocate = _target - _current;\nIndexTemplate.sol:441:                _shortage = _amount - _value;\nInsureDAOERC20.sol:255:        _balances[sender] = senderBalance - amount;\nInsureDAOERC20.sol:303:        _balances[account] = accountBalance - amount;\nVault.sol:165:            uint256 _shortage = _amount - available();\nVault.sol:310:            uint256 _shortage = _retVal - available();\n``` \n\n## Tools Used \nVS Code \n\n## Recommended Mitigation Steps\nUncheck arithmetic operations when the risk of underflow or overflow is already contained.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/66/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/66/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/65","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/65/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/65/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/65/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/65","id":1097093680,"node_id":"I_kwDOGhqIJ85BZFIw","number":65,"title":"too much centralization in the vault, the vault owner can withdraw all the value in the vault","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637960,"node_id":"LA_kwDOGhqIJ87Y4TWI","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20acknowledged","name":"sponsor acknowledged","color":"1D76DB","default":false,"description":"Technically the issue is correct, but we're not going to resolve it for XYZ reasons"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-09T03:17:49Z","updated_at":"2022-01-13T14:13:13Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nbugwriter001\n\n\n# Vulnerability details\n\n## Impact\n\nsmall to project, big for end-user.\n\nat the Vault.sol contract, there is a func called `borrowValue`, which allows the market can borrow the whole vaule locked in the vault. there is no limit to the amount.\n\nand in the registry.sol contract, there is a func called `supportMarket` , which allows owner to add any account as the market. so basically, the owner can add an EOA account to the allMarkets, and then use the EOA to borrowVaule of all.\n\n## Proof of Concept\n\nN/A\n\n## Tools Used\n\n## Recommended Mitigation Steps\n\nthe supportMarket should add an modifier to limit the market must be an contract instead of EOA.\n\nsuch as the isContract modifier in the openzeppelin.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/65/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/65/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/64","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/64/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/64/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/64/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/64","id":1097089282,"node_id":"I_kwDOGhqIJ85BZEEC","number":64,"title":"Gas: Use `calldata` instead of `memory` for external functions where the function argument is read-only.","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T02:45:20Z","updated_at":"2022-01-25T14:54:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact  \nOn external functions, when using the `memory` keyword with a function argument, what's happening is that a `memory` acts as an intermediate.  \n  \nReading directly from `calldata` using `calldataload` instead of going via `memory` saves the gas from the intermediate memory operations that carry the values.  \n  \nAs an extract from https://ethereum.stackexchange.com/questions/74442/when-should-i-use-calldata-and-when-should-i-use-memory :  \n> `memory` and `calldata` (as well as `storage`) are keywords that define the data area where a variable is stored. To answer your question directly, `memory` should be used when declaring variables (both function parameters as well as inside the logic of a function) that you want stored in memory (temporary), and `calldata` _must_ be used when declaring an **external** function's **dynamic** parameters. The easiest way to think about the difference is that `calldata` is a non-modifiable, non-persistent area where function arguments are stored, and behaves mostly like memory.  \n  \n## Proof of Concept  \n```  \nVault.sol:92:        address[2] memory _beneficiaries,\nVault.sol:93:        uint256[2] memory _shares\n```  \n  \n## Tools Used  \nVS Code  \n  \n## Recommended Mitigation Steps  \nUse `calldata` instead of `memory` for external functions where the function argument is read-only.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/64/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/64/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/63","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/63/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/63/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/63/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/63","id":1097087329,"node_id":"I_kwDOGhqIJ85BZDlh","number":63,"title":"Gas: Unused Named Returns","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-09T02:29:50Z","updated_at":"2022-01-28T00:50:07Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact  \nUsing both named returns and a return statement isn't necessary.\nRemoving unused named return variables can reduce gas usage and improve code clarity. To save gas and improve code quality: consider using only one of those.  \n  \n## Proof of Concept  \nInstances include:  \n```\nCDSTemplate.sol:287:    function totalLiquidity() public view returns (uint256 _balance) {\nIndexTemplate.sol:491:    function leverage() public view returns (uint256 _rate) {\nIndexTemplate.sol:504:    function totalLiquidity() public view returns (uint256 _balance) {\nPoolTemplate.sol:628:        returns (uint256 premium)\nPoolTemplate.sol:833:        returns (uint256 _balance)\nPoolTemplate.sol:846:    function utilizationRate() public view override returns (uint256 _rate) {\nPoolTemplate.sol:858:    function totalLiquidity() public view override returns (uint256 _balance) {\nPoolTemplate.sol:866:    function originalLiquidity() public view returns (uint256 _balance) {\n``` \n  \n## Tools Used  \nVS Code  \n  \n## Recommended Mitigation Steps  \nRemove the unused named returns\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/63/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/63/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/62","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/62/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/62/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/62/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/62","id":1097084542,"node_id":"I_kwDOGhqIJ85BZC5-","number":62,"title":"Gas: Usage of a non-native 256 bits uint as a counter in for-loops increases gas cost","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-09T02:09:12Z","updated_at":"2022-01-25T14:57:35Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact  \nDue to how the EVM natively works on 256 bit numbers, using a 8 bit number in for-loops introduces additional costs as the EVM has to properly enforce the limits of this smaller type.\n\nSee the warning at this link: https://docs.soliditylang.org/en/v0.8.0/internals/layout_in_storage.html#layout-of-state-variables-in-storage :\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n> It is only beneficial to use reduced-size arguments if you are dealing with storage values because the compiler will pack multiple elements into one storage slot, and thus, combine multiple reads or writes into a single operation. When dealing with function arguments or memory values, there is no inherent benefit because the compiler does not pack these values.\n  \n## Proof of Concept  \n```\nVault.sol:109:        for (uint128 i = 0; i < 2; i++) {\n``` \n## Tools Used  \nVS Code  \n  \n## Recommended Mitigation Steps  \nUse `uint256` as a counter in for-loops.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/62/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/62/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/59","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/59/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/59/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/59","id":1097063681,"node_id":"I_kwDOGhqIJ85BY90B","number":59,"title":"Gas optimization in PoolTemplate.withdraw()","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-08T23:58:37Z","updated_at":"2022-01-25T14:58:57Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ntqts\n\n\n# Vulnerability details\n\n## Impact\nNone\n\n## Proof of Concept\nThe `withdrawalReq[msg.sender].timestamp` and `parameters.getLockup(msg.sender)` values are used twice in the `require` statements, and both times summed. \n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nCache the sum value in a new variable. I've sent a similar report for IndexTemplate.withdraw() with a similar issue.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/59/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/59/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/58","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/58/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/58/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/58/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/58","id":1097056488,"node_id":"I_kwDOGhqIJ85BY8Do","number":58,"title":"Gas optimization in IndexTemplate._adjustAlloc()","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637962,"node_id":"LA_kwDOGhqIJ87Y4TWK","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20disputed","name":"sponsor disputed","color":"B60205","default":false,"description":"Sponsor cannot duplicate the issue, or otherwise disagrees this is an issue"}],"state":"open","locked":false,"assignee":{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false},"assignees":[{"login":"kohshiba","id":4516944,"node_id":"MDQ6VXNlcjQ1MTY5NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/4516944?v=4","gravatar_id":"","url":"https://api.github.com/users/kohshiba","html_url":"https://github.com/kohshiba","followers_url":"https://api.github.com/users/kohshiba/followers","following_url":"https://api.github.com/users/kohshiba/following{/other_user}","gists_url":"https://api.github.com/users/kohshiba/gists{/gist_id}","starred_url":"https://api.github.com/users/kohshiba/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kohshiba/subscriptions","organizations_url":"https://api.github.com/users/kohshiba/orgs","repos_url":"https://api.github.com/users/kohshiba/repos","events_url":"https://api.github.com/users/kohshiba/events{/privacy}","received_events_url":"https://api.github.com/users/kohshiba/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-08T23:12:12Z","updated_at":"2022-02-02T10:23:40Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ntqts\n\n\n# Vulnerability details\n\n## Impact\nNone\n\n## Proof of Concept\nThe number of iterations in the second `for` loop, at [L381-402](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L381-L407) of IndexTemplate.sol can be reduced, and the zero-address check can be eliminated.\n\nIf the check in [L363-366](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L363-L366) succeeds, `poolList[i].addr` gets assigned `address(0)`, and this is checked in the second for loop.\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nIn the `else` block at [L372-377](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L372-L377) a new index variable (let's call it `skippedAmount`, for the example) should be used for `_poolList` and incremented for each skipped withdraw. This, (along with removing L369), reduces effectively the number of loops in the next `for` loop, whose index should now go from 0 to `skippedAmount`, and doesn't need the `if` check of L382.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/58/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/58/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/56","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/56/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/56/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/56/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/56","id":1097033324,"node_id":"I_kwDOGhqIJ85BY2Zs","number":56,"title":"Gas optimization in IndexTemplate.requestWithdraw()","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-08T20:48:50Z","updated_at":"2022-01-26T07:43:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ntqts\n\n\n# Vulnerability details\n\n## Impact\nNone\n\n## Proof of Concept\nIn [L197](https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L197) of IndexTemplate, a `_balance` variable is created and initialized to the balance of `msg.sender`. However that variable is used only once in the function.\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nReplace L198 with `require(balanceOf(msg.sender) >= _amount, \"ERROR: REQUEST_EXCEED_BALANCE\");` and remove L197\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/56/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/56/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/51","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/51/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/51/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/51/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/51","id":1096925967,"node_id":"I_kwDOGhqIJ85BYcMP","number":51,"title":"_depositFrom() does not  ensure that _from arg is not the contract itself ","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637962,"node_id":"LA_kwDOGhqIJ87Y4TWK","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20disputed","name":"sponsor disputed","color":"B60205","default":false,"description":"Sponsor cannot duplicate the issue, or otherwise disagrees this is an issue"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-08T13:20:24Z","updated_at":"2022-01-27T15:53:33Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\njayjonah8\n\n\n# Vulnerability details\n\n## Impact\nIn PoolTemplate.sol the _depositFrom() function allows third parties to make deposits.  It accepts the _amount and _from args and then mints the _mintAmount to the _from address.  The function does not require that the _from arg is not the PoolTemplate contract itself.  This makes it possible for addValue() to be called in the same function with the _from and _beneficiary args being the same address.  Failure to perform this check is an attack vector that can be used to manipulate the protocol. \n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L255\n\n## Tools Used\nManual code review \n\n## Recommended Mitigation Steps\nAdd in _depositFrom():    require(_from != address(this), \"Cannot be Pool contract\")\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/51/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/51/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/48","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/48/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/48/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/48/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/48","id":1096408773,"node_id":"I_kwDOGhqIJ85BWd7F","number":48,"title":"pool can't be initialized","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637962,"node_id":"LA_kwDOGhqIJ87Y4TWK","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20disputed","name":"sponsor disputed","color":"B60205","default":false,"description":"Sponsor cannot duplicate the issue, or otherwise disagrees this is an issue"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-07T15:16:21Z","updated_at":"2022-01-27T15:43:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ndanb\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/PoolTemplate.sol#L157\n\ninitialize requires `initialize` to be false, but it's set in the constructor to true.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/48/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/48/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/47","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/47/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/47/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/47/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/47","id":1096299091,"node_id":"I_kwDOGhqIJ85BWDJT","number":47,"title":"Update to solc-0.8.10+","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-07T13:03:15Z","updated_at":"2022-01-28T00:49:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomFrenchBlockchain\n\n\n# Vulnerability details\n\n## Impact\nGas costs\n\n## Proof of Concept\n\nSolidity 0.8.10 has a useful change which reduced gas costs of external calls which expect a return value: https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/\n\n> Code Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist\n\nInsureDAO is using 0.8.7: \nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L8\n\nUpdating to the newer version of solc will allow InsureDAO to take advantage of these lower costs for external calls.\n\n## Recommended Mitigation Steps\n\nUpdate to solc 0.8.10 or above\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/47/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/47/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/44","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/44/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/44/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/44/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/44","id":1096008768,"node_id":"I_kwDOGhqIJ85BU8RA","number":44,"title":"Parameters.sol lacks input validation","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-07T05:52:00Z","updated_at":"2022-01-31T12:32:23Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\ncccz\n\n\n# Vulnerability details\n\n## Impact\nWhen setting parameters in the Parameters contract, the input parameters are not verified.\n\nFor example, in the setFeeRate function, the _target parameter is not limited. When _target is greater than 1e6, DOS will occur when used in the insure function of the PoolTemplate contract\n```\n    function setFeeRate(address _address, uint256 _target)\n        external\n        override\n        onlyOwner\n    {\n        _fee[_address] = _target;\n        emit FeeRateSet(_address, _target);\n    }\n   ...\n   function insure(\n        uint256 _amount,\n        uint256 _maxCost,\n        uint256 _span,\n        bytes32 _target\n    ) external returns (uint256) {\n        //Distribute premium and fee\n        uint256 _endTime = _span + block.timestamp;\n        uint256 _premium = getPremium(_amount, _span);\n        uint256 _fee = parameters.getFeeRate(msg.sender);\n\n        require(\n            _amount <= availableBalance(),\n            \"ERROR: INSURE_EXCEEDED_AVAILABLE_BALANCE\"\n        );\n        require(_premium <= _maxCost, \"ERROR: INSURE_EXCEEDED_MAX_COST\");\n        require(_span <= 365 days, \"ERROR: INSURE_EXCEEDED_MAX_SPAN\");\n        require(\n            parameters.getMinDate(msg.sender) <= _span,\n            \"ERROR: INSURE_SPAN_BELOW_MIN\"\n        );\n\n        require(\n            marketStatus == MarketStatus.Trading,\n            \"ERROR: INSURE_MARKET_PENDING\"\n        );\n        require(paused == false, \"ERROR: INSURE_MARKET_PAUSED\");\n\n        //current liquidity\n        uint256 _liquidity = totalLiquidity();\n        uint256 _totalCredit = totalCredit;\n\n        //accrue premium/fee\n        uint256[2] memory _newAttribution = vault.addValueBatch(\n            _premium,\n            msg.sender,\n            [address(this), parameters.getOwner()],\n            [MAGIC_SCALE_1E6-_fee, _fee]\n        );\n```\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-01-insure/blob/main/contracts/Parameters.sol\n\n## Tools Used\n\nManual analysis\n\n\n## Recommended Mitigation Steps\n\nWhen setting parameters in the Parameters contract, verify the input parameters\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/44/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/44/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/43","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/43/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/43/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/43/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/43","id":1095909350,"node_id":"I_kwDOGhqIJ85BUj_m","number":43,"title":"Gas: An array's length should be cached to save gas in for-loops","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-07T02:02:54Z","updated_at":"2022-01-25T06:47:14Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact  \nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  \n  \nCaching the array length in the stack saves around 3 gas per iteration.  \n  \n## Proof of Concept  \n```  \nFactory.sol:176:            for (uint256 i = 0; i < _references.length; i++) {\nFactory.sol:186:            for (uint256 i = 0; i < _conditions.length; i++) {\nIndexTemplate.sol:655:        for (uint256 i = 0; i < poolList.length; i++) {\nPoolTemplate.sol:343:        for (uint256 i = 0; i < _ids.length; i++) {\nPoolTemplate.sol:671:        for (uint256 i = 0; i < indexList.length; i++) {\nPoolTemplate.sol:703:        for (uint256 i = 0; i < indexList.length; i++) {\n```  \n## Tools Used  \nVS Code  \n  \n## Recommended Mitigation Steps  \nStore the array's length in a variable before the for-loop, and use it instead.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/43/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/43/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/41","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/41/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/41/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/41/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/41","id":1095907239,"node_id":"I_kwDOGhqIJ85BUjen","number":41,"title":"Redundant if statements in market deployment function","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-07T01:58:09Z","updated_at":"2022-01-25T06:47:11Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomFrenchBlockchain\n\n\n# Vulnerability details\n\n## Impact\ngas costs\n\n## Proof of Concept\n\nHere if the lengths of these arrays are zero we'll fall straight through the for loops so there's no need for the if statements.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L175-L191\n\n## Recommended Mitigation Steps\n\nRemove if statements\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/41/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/41/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/40","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/40/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/40/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/40/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/40","id":1095906748,"node_id":"I_kwDOGhqIJ85BUjW8","number":40,"title":"Gas: No need to initialize variables with default values","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-07T01:56:50Z","updated_at":"2022-01-25T06:47:07Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact  \nIf a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n  \n## Proof of Concept  \nInstances include:  \n```  \nFactory.sol:176:            for (uint256 i = 0; i < _references.length; i++) {\nFactory.sol:186:            for (uint256 i = 0; i < _conditions.length; i++) {\nIndexTemplate.sol:280:            for (uint256 i = 0; i < _length; i++) {\nIndexTemplate.sol:348:        for (uint256 i = 0; i < _length; i++) {\nIndexTemplate.sol:381:        for (uint256 i = 0; i < _length; i++) {\nIndexTemplate.sol:462:        for (uint256 i = 0; i < _poolLength; i++) {\nIndexTemplate.sol:655:        for (uint256 i = 0; i < poolList.length; i++) {\nPoolTemplate.sol:343:        for (uint256 i = 0; i < _ids.length; i++) {\nPoolTemplate.sol:671:        for (uint256 i = 0; i < indexList.length; i++) {\nPoolTemplate.sol:703:        for (uint256 i = 0; i < indexList.length; i++) {\nVault.sol:109:        for (uint128 i = 0; i < 2; i++) {\n```  \n  \n## Tools Used  \nManual Analysis  \n  \n## Recommended Mitigation Steps  \nRemove explicit initialization for default values.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/40/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/40/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/39","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/39/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/39/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/39/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/39","id":1095906596,"node_id":"I_kwDOGhqIJ85BUjUk","number":39,"title":"Redundant tracking of markets in factory","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-07T01:56:28Z","updated_at":"2022-01-25T06:47:04Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomFrenchBlockchain\n\n\n# Vulnerability details\n\n## Impact\n\nGas costs\n\n## Proof of Concept\n\nHere we push a new market onto an array in the factory whilst we just added the market to the registry.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L214-L216\n\n## Recommended Mitigation Steps\n\nThis array on the factory seems redundant and so it can be removed.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/39/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/39/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/38","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/38/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/38/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/38/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/38","id":1095905478,"node_id":"I_kwDOGhqIJ85BUjDG","number":38,"title":"Gas: SafeMath is not needed when using Solidity version 0.8.*","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-07T01:53:43Z","updated_at":"2022-01-25T06:47:01Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact  \nIncreased gas cost  \n  \n## Proof of Concept  \nSolidity version 0.8.* already implements overflow and underflow checks by default. \nUsing the SafeMath library from OpenZeppelin (which is more gas expensive than the 0.8.* overflow checks) is therefore redundant.  \n  \nInstances include: \n```  \nmocks\\ERC20.sol:4:import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nmocks\\ERC20.sol:30:    using SafeMath for uint256;\nmocks\\TestPremiumModel.sol:3:import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nmocks\\TestPremiumModel.sol:7:    using SafeMath for uint256;\nPremiumModels\\BondingPremium.sol:10:import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n```  \n  \n## Tools Used  \nVS Code  \n  \n## Recommended Mitigation Steps  \nUse the built-in checks instead of SafeMath and remove SafeMath from the dependencies\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/38/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/38/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/37","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/37/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/37/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/37/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/37","id":1095904953,"node_id":"I_kwDOGhqIJ85BUi65","number":37,"title":"allocatedCredit and availableBalance are always read together so should be returned together.","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2022-01-07T01:52:27Z","updated_at":"2022-01-28T01:12:03Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomFrenchBlockchain\n\n\n# Vulnerability details\n\n## Impact\n\nGas costs\n\n## Proof of Concept\n\nIt seems that we always want to get a pool's `allocatedCredit` and `availableBalance` together, suggesting that these values are tightly coupled. \n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L284-L287\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L356-L360\n\nIf we're regularly going to be requesting these values together it may be worth considering having a single function in the pool template which returns both of these values. This would save gas costs of performing an extra external call to the pool contract.\n\n## Recommended Mitigation Steps\n\nConsider having a function which returns both of these values to avoid repeated calls into the same contract for related info.\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/37/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/37/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/36","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/36/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/36/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/36/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/36","id":1095904564,"node_id":"I_kwDOGhqIJ85BUi00","number":36,"title":"Gas: `> 0` is less efficient than `!= 0` for unsigned integers","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-07T01:51:34Z","updated_at":"2022-01-25T06:46:57Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact  \n`!= 0` costs less gas compared to `> 0` for unsigned integer  \n  \n## Proof of Concept  \n`> 0` is used in the following location(s):\n```  \nCDSTemplate.sol:100:                bytes(_metaData).length > 0 &&\nCDSTemplate.sol:132:        require(_amount > 0, \"ERROR: DEPOSIT_ZERO\");\nCDSTemplate.sol:140:        if (_supply > 0 && _liquidity > 0) {\nCDSTemplate.sol:142:        } else if (_supply > 0 && _liquidity == 0) {\nCDSTemplate.sol:191:        require(_amount > 0, \"ERROR: REQUEST_ZERO\");\nCDSTemplate.sol:223:        require(_amount > 0, \"ERROR: WITHDRAWAL_ZERO\");\nCDSTemplate.sol:296:        if (totalSupply() > 0) {\nFactory.sol:175:        if (_references.length > 0) {\nFactory.sol:185:        if (_conditions.length > 0) {\nFactory.sol:187:                if (conditionlist[address(_template)][i] > 0) {\nIndexTemplate.sol:133:                bytes(_metaData).length > 0 &&\nIndexTemplate.sol:166:        require(_amount > 0, \"ERROR: DEPOSIT_ZERO\");\nIndexTemplate.sol:172:        if (_supply > 0 && _totalLiquidity > 0) {\nIndexTemplate.sol:174:        } else if (_supply > 0 && _totalLiquidity == 0) {\nIndexTemplate.sol:199:        require(_amount > 0, \"ERROR: REQUEST_ZERO\");\nIndexTemplate.sol:231:        require(_amount > 0, \"ERROR: WITHDRAWAL_ZERO\");\nIndexTemplate.sol:246:        if (_liquidityAfter > 0) {\nIndexTemplate.sol:274:        if(_totalLiquidity > 0){\nIndexTemplate.sol:283:                if (_allocPoint > 0) {\nIndexTemplate.sol:391:                if (_current > _target && _available != 0) {\nIndexTemplate.sol:427:            allocPoints[msg.sender] > 0,\nIndexTemplate.sol:477:        require(allocPoints[msg.sender] > 0);\nIndexTemplate.sol:493:        if (totalLiquidity() > 0) {\nIndexTemplate.sol:513:        if (totalSupply() > 0) {\nIndexTemplate.sol:612:        if (totalAllocPoint > 0) {\nIndexTemplate.sol:656:            if (allocPoints[poolList[i]] > 0) {\nInsureDAOERC20.sol:302:        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\nParameters.sol:31:    mapping(address => uint256) private _fee; //fee rate in 1e6 (100% = 1e6)\nPoolTemplate.sol:185:                bytes(_metaData).length > 0 &&\nPoolTemplate.sol:218:        if (_conditions[1] > 0) {\nPoolTemplate.sol:237:        require(_amount > 0, \"ERROR: DEPOSIT_ZERO\");\nPoolTemplate.sol:263:        require(_amount > 0, \"ERROR: DEPOSIT_ZERO\");\nPoolTemplate.sol:282:        require(_amount > 0, \"ERROR: REQUEST_ZERO\");\nPoolTemplate.sol:321:        require(_amount > 0, \"ERROR: WITHDRAWAL_ZERO\");\nPoolTemplate.sol:391:        } else if (_index.credit > 0) {\nPoolTemplate.sol:396:            if (_pending > 0) {\nPoolTemplate.sol:401:        if (_credit > 0) {\nPoolTemplate.sol:437:        if (_credit > 0) {\nPoolTemplate.sol:444:        if (_pending > 0) {\nPoolTemplate.sol:521:        if (_totalCredit > 0) {\nPoolTemplate.sol:672:            if (indicies[indexList[i]].credit > 0) {\nPoolTemplate.sol:706:            if (_credit > 0) {\nPoolTemplate.sol:726:        if (_deductionFromPool > 0) {\nPoolTemplate.sol:745:        if (totalSupply() > 0) {\nPoolTemplate.sol:802:        if (_supply > 0 && _originalLiquidity > 0) {\nPoolTemplate.sol:804:        } else if (_supply > 0 && _originalLiquidity == 0) {\nPoolTemplate.sol:835:        if (totalLiquidity() > 0) {\nPoolTemplate.sol:847:        if (lockedAmount > 0) {\nPoolTemplate.sol:929:        require(b > 0);\nVault.sol:154:            attributions[msg.sender] > 0 &&\nVault.sol:187:            attributions[msg.sender] > 0 &&\nVault.sol:220:            attributions[msg.sender] > 0 &&\nVault.sol:347:        if (_amount > 0) {\nVault.sol:388:        if (totalAttributions > 0 && _attribution > 0) {\nVault.sol:406:        if (attributions[_target] > 0) {\nVault.sol:473:        } else if (IERC20(_token).balanceOf(address(this)) > 0) {\n```  \n  \n## Tools Used  \nVS Code  \n  \n## Recommended Mitigation Steps  \nChange `> 0` with `!= 0`.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/36/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/36/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/32","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/32/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/32/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/32/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/32","id":1095884111,"node_id":"I_kwDOGhqIJ85BUd1P","number":32,"title":"Unnecessary market status check on redemption","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-01-07T01:14:52Z","updated_at":"2022-01-25T06:46:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomFrenchBlockchain\n\n\n# Vulnerability details\n\n## Impact\n\ngas costs\n\n## Proof of Concept\n\nHere on L563 we check the market status however we have already done this on L558\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L557-L567\n\n## Recommended Mitigation Steps\n\nRemove redundant check (check other market templates as well)\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/32/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/32/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/31","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/31/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/31/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/31/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/31","id":1095882076,"node_id":"I_kwDOGhqIJ85BUdVc","number":31,"title":"Skip balance check in _beforeTokenTransfer if no withdrawalRequest exists","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"pontagon333","id":87188356,"node_id":"MDQ6VXNlcjg3MTg4MzU2","avatar_url":"https://avatars.githubusercontent.com/u/87188356?v=4","gravatar_id":"","url":"https://api.github.com/users/pontagon333","html_url":"https://github.com/pontagon333","followers_url":"https://api.github.com/users/pontagon333/followers","following_url":"https://api.github.com/users/pontagon333/following{/other_user}","gists_url":"https://api.github.com/users/pontagon333/gists{/gist_id}","starred_url":"https://api.github.com/users/pontagon333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pontagon333/subscriptions","organizations_url":"https://api.github.com/users/pontagon333/orgs","repos_url":"https://api.github.com/users/pontagon333/repos","events_url":"https://api.github.com/users/pontagon333/events{/privacy}","received_events_url":"https://api.github.com/users/pontagon333/received_events","type":"User","site_admin":false},"assignees":[{"login":"pontagon333","id":87188356,"node_id":"MDQ6VXNlcjg3MTg4MzU2","avatar_url":"https://avatars.githubusercontent.com/u/87188356?v=4","gravatar_id":"","url":"https://api.github.com/users/pontagon333","html_url":"https://github.com/pontagon333","followers_url":"https://api.github.com/users/pontagon333/followers","following_url":"https://api.github.com/users/pontagon333/following{/other_user}","gists_url":"https://api.github.com/users/pontagon333/gists{/gist_id}","starred_url":"https://api.github.com/users/pontagon333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pontagon333/subscriptions","organizations_url":"https://api.github.com/users/pontagon333/orgs","repos_url":"https://api.github.com/users/pontagon333/repos","events_url":"https://api.github.com/users/pontagon333/events{/privacy}","received_events_url":"https://api.github.com/users/pontagon333/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-07T01:11:01Z","updated_at":"2022-01-26T08:52:42Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomFrenchBlockchain\n\n\n# Vulnerability details\n\n## Impact\n\nGas costs\n\n## Proof of Concept\n\nWhen transferring any of the market tokens, a check is performed to see if they have a pending withdrawal and reduce it if their balance falls below the requested amount.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PoolTemplate.sol#L910-L923\n\nIn the case where a user has no pending withdrawal we then perform an unnecessary check on their balance. We could save an SLOAD by changing it to the below\n\n```\nif (from != address(0)) {\n    uint256 reqAmount = withdrawalReq[from].amount\n    if (reqAmount > 0){\n        uint256 _after = balanceOf(from) - amount;\n        if (_after < reqAmount) {\n            withdrawalReq[from].amount = _after;\n        }\n    } \n}\n```\n\n## Recommended Mitigation Steps\n\nAs above\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/31/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/31/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/30","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/30/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/30/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/30/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/30","id":1095879904,"node_id":"I_kwDOGhqIJ85BUczg","number":30,"title":"Gas: Consider making some constants as non-public to save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-07T01:06:28Z","updated_at":"2022-01-25T06:46:43Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact  \nReducing from public to private will save gas\n  \n## Proof of Concept  \n```  \nPremiumModels\\BondingPremium.sol:26:    //constants\nPremiumModels\\BondingPremium.sol:27:    uint256 public constant DECIMAL = uint256(1e6); //Decimals of USDC\nPremiumModels\\BondingPremium.sol:28:    uint256 public constant BASE = uint256(1e6); //bonding curve graph takes 1e6 as 100.0000%\nPremiumModels\\BondingPremium.sol:29:    uint256 public constant BASE_x2 = uint256(1e12); //BASE^2\nPremiumModels\\BondingPremium.sol:30:    uint256 public constant ADJUSTER = uint256(10); //adjuster of 1e6 to 1e5 (100.0000% to 100.000%)\nCDSTemplate.sol:55:    uint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\nIndexTemplate.sol:95:    uint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\nPoolTemplate.sol:146:    uint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\nVault.sol:38:    uint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\n```  \n## Tools Used  \nVS Code  \n  \n## Recommended Mitigation Steps  \nTheses constants can simply be read from the verified contract, i.e., it is unnecessary to expose it with a public function.\nAlso, constants having \"1E6\" in their name aren't even \"nice to have public constants\", as their value is obvious.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/30/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/30/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/27","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/27/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/27/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/27/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/27","id":1095863784,"node_id":"I_kwDOGhqIJ85BUY3o","number":27,"title":"Withdrawal struct can be packed to save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-07T00:40:01Z","updated_at":"2022-01-28T00:47:53Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomFrenchBlockchain\n\n\n# Vulnerability details\n\n## Impact\nDetailed description of the impact of this finding.\n\n## Proof of Concept\n\nThe `Withdrawal` struct in `IndexTemplate.sol` contains a timestamp and the amount of tokens which the user requests to withdraw.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L81-L84\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L198\n\nIf we make the safe assumption that the user's balance does not exceed 2^192 then we can pack this struct into a single storage slot to save an SLOAD by changing the definition to:\n\n```\nstruct Withdrawal {\n    uint64 timestamp;\n    uint192 amount;\n}\n```\n\n## Recommended Mitigation Steps\n\nAs above\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/27/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/27/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/26","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/26/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/26/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/26/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/26","id":1095858043,"node_id":"I_kwDOGhqIJ85BUXd7","number":26,"title":"sqrt can be made unchecked to save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-01-07T00:33:27Z","updated_at":"2022-01-24T11:26:20Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nTomFrenchBlockchain\n\n\n# Vulnerability details\n\n## Impact\n\ngas costs\n\n## Proof of Concept\n\nIn the sqrt function it is known that the while loop will not overflow so it can be safely left unchecked to save gas.\n\nhttps://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/PremiumModels/BondingPremium.sol#L238-L245\n\n```\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        unchecked {\n            y = x;\n            while (z < y) {\n                y = z;\n                z = (x / z + z) / 2;\n            }\n        }\n    }\n```\n## Recommended Mitigation Steps\n\nwrap entire function body in a unchecked block as above\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/26/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/26/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/22","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/22/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/22/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/22/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/22","id":1095836558,"node_id":"I_kwDOGhqIJ85BUSOO","number":22,"title":"Never used parameters","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637920,"node_id":"LA_kwDOGhqIJ87Y4TVg","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/0%20(Non-critical)","name":"0 (Non-critical)","color":"25EC98","default":false,"description":"Code style, clarity, syntax, versioning, off-chain monitoring (events etc), exclude gas optimisation"},{"id":3638637962,"node_id":"LA_kwDOGhqIJ87Y4TWK","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20disputed","name":"sponsor disputed","color":"B60205","default":false,"description":"Sponsor cannot duplicate the issue, or otherwise disagrees this is an issue"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-01-07T00:17:11Z","updated_at":"2022-01-27T23:01:26Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nrobee\n\n\n# Vulnerability details\n\nThose are functions and parameters pairs that the function doesn't use the parameter. In case those functions are external/public this is even worst since the user is required to put value that never used and can misslead him and waste its time. \n\n        CDSTemplate.sol: function initialize parameter _conditions isn't used. (initialize is external)\n        IndexTemplate.sol: function initialize parameter _conditions isn't used. (initialize is external)\n        InsureDAOERC20.sol: function _beforeTokenTransfer parameter from isn't used. (_beforeTokenTransfer is internal)\n        InsureDAOERC20.sol: function _beforeTokenTransfer parameter to isn't used. (_beforeTokenTransfer is internal)\n        InsureDAOERC20.sol: function _beforeTokenTransfer parameter amount isn't used. (_beforeTokenTransfer is internal)\n        InsureDAOERC20.sol: function _afterTokenTransfer parameter from isn't used. (_afterTokenTransfer is internal)\n        InsureDAOERC20.sol: function _afterTokenTransfer parameter to isn't used. (_afterTokenTransfer is internal)\n        InsureDAOERC20.sol: function _afterTokenTransfer parameter amount isn't used. (_afterTokenTransfer is internal)\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/22/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/22/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/21","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/21/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/21/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/21/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/21","id":1095836314,"node_id":"I_kwDOGhqIJ85BUSKa","number":21,"title":"Assert instead require to validate user inputs","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-07T00:17:02Z","updated_at":"2022-01-24T09:13:40Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nrobee\n\n\n# Vulnerability details\n\nFrom solidity docs: Properly functioning code should never reach a failing assert statement; if this happens there is a bug in your contract which you should fix.\nWith assert the user pays the gas and with require it doesn't. The ETH network gas isn't cheap and users can see it as a scam. \nYou have reachable asserts in the following locations (which should be replaced by require / are mistakenly left from development phase):\n\n        InsureDAOERC20.sol : reachable assert in line 31\n        Vault.sol : reachable assert in line 167\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/21/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/21/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/20","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/20/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/20/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/20/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/20","id":1095836023,"node_id":"I_kwDOGhqIJ85BUSF3","number":20,"title":"Two Steps Verification before Transferring Ownership","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637962,"node_id":"LA_kwDOGhqIJ87Y4TWK","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20disputed","name":"sponsor disputed","color":"B60205","default":false,"description":"Sponsor cannot duplicate the issue, or otherwise disagrees this is an issue"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2022-01-07T00:16:51Z","updated_at":"2022-02-02T06:44:17Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nrobee\n\n\n# Vulnerability details\n\nThe following contracts have a function that allows them an admin to change it to a different address. If the admin accidentally uses an invalid address for which they do not have the private key, then the system gets locked.\nIt is important to have two steps admin change where the first is announcing a pending new admin and the new address should then claim its ownership. \nA similar issue was reported in a previous contest and was assigned a severity of medium: [code-423n4/2021-06-realitycards-findings#105](https://github.com/code-423n4/2021-06-realitycards-findings/issues/105) \n\n        Ownership.sol\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/20/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/20/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/18","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/18/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/18/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/18/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/18","id":1095835470,"node_id":"I_kwDOGhqIJ85BUR9O","number":18,"title":"Named return issue","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"taka0409","id":32897506,"node_id":"MDQ6VXNlcjMyODk3NTA2","avatar_url":"https://avatars.githubusercontent.com/u/32897506?v=4","gravatar_id":"","url":"https://api.github.com/users/taka0409","html_url":"https://github.com/taka0409","followers_url":"https://api.github.com/users/taka0409/followers","following_url":"https://api.github.com/users/taka0409/following{/other_user}","gists_url":"https://api.github.com/users/taka0409/gists{/gist_id}","starred_url":"https://api.github.com/users/taka0409/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/taka0409/subscriptions","organizations_url":"https://api.github.com/users/taka0409/orgs","repos_url":"https://api.github.com/users/taka0409/repos","events_url":"https://api.github.com/users/taka0409/events{/privacy}","received_events_url":"https://api.github.com/users/taka0409/received_events","type":"User","site_admin":false},"assignees":[{"login":"taka0409","id":32897506,"node_id":"MDQ6VXNlcjMyODk3NTA2","avatar_url":"https://avatars.githubusercontent.com/u/32897506?v=4","gravatar_id":"","url":"https://api.github.com/users/taka0409","html_url":"https://github.com/taka0409","followers_url":"https://api.github.com/users/taka0409/followers","following_url":"https://api.github.com/users/taka0409/following{/other_user}","gists_url":"https://api.github.com/users/taka0409/gists{/gist_id}","starred_url":"https://api.github.com/users/taka0409/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/taka0409/subscriptions","organizations_url":"https://api.github.com/users/taka0409/orgs","repos_url":"https://api.github.com/users/taka0409/repos","events_url":"https://api.github.com/users/taka0409/events{/privacy}","received_events_url":"https://api.github.com/users/taka0409/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2022-01-07T00:16:29Z","updated_at":"2022-02-02T05:48:32Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nrobee\n\n\n# Vulnerability details\n\nUsers can mistakenly think that the return value is the named return, but it is actually the actualreturn statement that comes after. To know that the user needs to read the code and is confusing.\nFurthermore, removing either the actual return or the named return will save gas. \n\n        CDSTemplate.sol, totalLiquidity\n        Factory.sol, _createClone\n        IndexTemplate.sol, withdrawable\n        IndexTemplate.sol, leverage\n        IndexTemplate.sol, totalLiquidity\n        PoolTemplate.sol, availableBalance\n        PoolTemplate.sol, utilizationRate\n        PoolTemplate.sol, totalLiquidity\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/18/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/18/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/15","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/15/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/15/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/15/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/15","id":1095834552,"node_id":"I_kwDOGhqIJ85BURu4","number":15,"title":"Require with empty message","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637927,"node_id":"LA_kwDOGhqIJ87Y4TVn","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/1%20(Low%20Risk)","name":"1 (Low Risk)","color":"1D76DB","default":false,"description":"Assets are not at risk. State handling, function incorrect as to spec, issues with comments"},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"calldata","id":10724779,"node_id":"MDQ6VXNlcjEwNzI0Nzc5","avatar_url":"https://avatars.githubusercontent.com/u/10724779?v=4","gravatar_id":"","url":"https://api.github.com/users/calldata","html_url":"https://github.com/calldata","followers_url":"https://api.github.com/users/calldata/followers","following_url":"https://api.github.com/users/calldata/following{/other_user}","gists_url":"https://api.github.com/users/calldata/gists{/gist_id}","starred_url":"https://api.github.com/users/calldata/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/calldata/subscriptions","organizations_url":"https://api.github.com/users/calldata/orgs","repos_url":"https://api.github.com/users/calldata/repos","events_url":"https://api.github.com/users/calldata/events{/privacy}","received_events_url":"https://api.github.com/users/calldata/received_events","type":"User","site_admin":false},"assignees":[{"login":"calldata","id":10724779,"node_id":"MDQ6VXNlcjEwNzI0Nzc5","avatar_url":"https://avatars.githubusercontent.com/u/10724779?v=4","gravatar_id":"","url":"https://api.github.com/users/calldata","html_url":"https://github.com/calldata","followers_url":"https://api.github.com/users/calldata/followers","following_url":"https://api.github.com/users/calldata/following{/other_user}","gists_url":"https://api.github.com/users/calldata/gists{/gist_id}","starred_url":"https://api.github.com/users/calldata/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/calldata/subscriptions","organizations_url":"https://api.github.com/users/calldata/orgs","repos_url":"https://api.github.com/users/calldata/repos","events_url":"https://api.github.com/users/calldata/events{/privacy}","received_events_url":"https://api.github.com/users/calldata/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-07T00:15:52Z","updated_at":"2022-01-26T09:29:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nrobee\n\n\n# Vulnerability details\n\nThe following requires are with empty messages. \nThis is very important to add a message for any require. Such that the user has enough \ninformation to know the reason of failure: \n\n        Solidity file: CDSTemplate.sol, In line 253 with Empty Require message.\n        Solidity file: Factory.sol, In line 100 with Empty Require message.\n        Solidity file: IndexTemplate.sol, In line 477 with Empty Require message.\n        Solidity file: PoolTemplate.sol, In line 929 with Empty Require message.\n        Solidity file: Vault.sol, In line 66 with Empty Require message.\n        Solidity file: Vault.sol, In line 67 with Empty Require message.\n        Solidity file: Vault.sol, In line 68 with Empty Require message.\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/15/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/15/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/13","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/13/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/13/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/13/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/13","id":1095833981,"node_id":"I_kwDOGhqIJ85BURl9","number":13,"title":"Check if amount is not zero to save gas","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-07T00:15:30Z","updated_at":"2022-01-28T00:45:34Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nrobee\n\n\n# Vulnerability details\n\nThe following functions could skip other steps if the amount is 0. (A similar issue: https://github.com/code-423n4/2021-10-badgerdao-findings/issues/82) \n\n        InsureDAOERC20.sol, name\n        InsureDAOERC20.sol, symbol\n        InsureDAOERC20.sol, decimals\n        InsureDAOERC20.sol, totalSupply\n        InsureDAOERC20.sol, balanceOf\n        InsureDAOERC20.sol, transfer\n        InsureDAOERC20.sol, allowance\n        InsureDAOERC20.sol, approve\n        InsureDAOERC20.sol, transferFrom\n        InsureDAOERC20.sol, increaseAllowance\n        InsureDAOERC20.sol, decreaseAllowance\n        InsureDAOERC20.sol, _transfer\n        InsureDAOERC20.sol, _mint\n        InsureDAOERC20.sol, _burn\n        InsureDAOERC20.sol, _approve\n        InsureDAOERC20.sol, _beforeTokenTransfer\n        InsureDAOERC20.sol, _afterTokenTransfer\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/13/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/13/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/7","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/7/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/7/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/7/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/7","id":1095831111,"node_id":"I_kwDOGhqIJ85BUQ5H","number":7,"title":"Public functions to external","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-01-07T00:13:38Z","updated_at":"2022-01-24T11:25:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nrobee\n\n\n# Vulnerability details\n\nThe following functions could be set external to save gas and improve code quality. \nExternal call cost is less expensive than of public functions. \n\n        The function totalLiquidity in CDSTemplate.sol could be set external\n        The function valueOfUnderlying in CDSTemplate.sol could be set external\n        The function createMarket in Factory.sol could be set external\n        The function totalLiquidity in IndexTemplate.sol could be set external\n        The function set in IndexTemplate.sol could be set external\n        The function leverage in IndexTemplate.sol could be set external\n        The function withdrawable in IndexTemplate.sol could be set external\n        The function valueOfUnderlying in IndexTemplate.sol could be set external\n        The function deposit in IndexTemplate.sol could be set external\n        The function adjustAlloc in IndexTemplate.sol could be set external\n        The function allowance in InsureDAOERC20.sol could be set external\n        The function decimals in InsureDAOERC20.sol could be set external\n        The function totalSupply in InsureDAOERC20.sol could be set external\n        The function name in InsureDAOERC20.sol could be set external\n        The function transfer in InsureDAOERC20.sol could be set external\n        The function increaseAllowance in InsureDAOERC20.sol could be set external\n        The function transferFrom in InsureDAOERC20.sol could be set external\n        The function decreaseAllowance in InsureDAOERC20.sol could be set external\n        The function balanceOf in InsureDAOERC20.sol could be set external\n        The function symbol in InsureDAOERC20.sol could be set external\n        The function approve in InsureDAOERC20.sol could be set external\n        The function getOwner in Parameters.sol could be set external\n        The function utilizationRate in PoolTemplate.sol could be set external\n        The function totalLiquidity in PoolTemplate.sol could be set external\n        The function availableBalance in PoolTemplate.sol could be set external\n        The function getPremium in PoolTemplate.sol could be set external\n        The function valueOfUnderlying in PoolTemplate.sol could be set external\n        The function unlock in PoolTemplate.sol could be set external\n        The function originalLiquidity in PoolTemplate.sol could be set external\n        The function deposit in PoolTemplate.sol could be set external\n        The function allocatedCredit in PoolTemplate.sol could be set external\n        The function getPremiumRate in BondingPremium.sol could be set external\n        The function getCurrentPremiumRate in BondingPremium.sol could be set external\n        The function getPricePerFullShare in Vault.sol could be set external\n        The function valueAll in Vault.sol could be set external\n        The function setController in Vault.sol could be set external\n        The function underlyingValue in Vault.sol could be set external\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/7/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/7/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/5","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/5/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/5/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/5/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/5","id":1095830592,"node_id":"I_kwDOGhqIJ85BUQxA","number":5,"title":"Storage double reading. Could save SLOAD","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2022-01-07T00:13:18Z","updated_at":"2022-01-24T11:25:07Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nrobee\n\n\n# Vulnerability details\n\nReading a storage variable is gas costly (SLOAD). In cases of multiple read of a storage variable in the same scope, caching the first read (i.e saving as a local variable) can save gas and decrease the\n overall gas uses. The following is a list of functions and the storage variables that you read twice: \n\n        CDSTemplate.sol: parameters.getLockup is read twice in withdraw\n        Factory.sol: registry is read twice in createMarket\n        IndexTemplate.sol: totalAllocPoint is read twice in set\n        IndexTemplate.sol: MAGIC_SCALE_1E6 is read twice in withdrawable\n        PoolTemplate.sol: parameters.getLockup is read twice in withdraw\n        PoolTemplate.sol: lockedAmount is read twice in utilizationRate\n        PoolTemplate.sol: MAGIC_SCALE_1E6 is read twice in allocateCredit\n        PoolTemplate.sol: MAGIC_SCALE_1E6 is read twice in withdrawCredit\n        PoolTemplate.sol: MAGIC_SCALE_1E6 is read twice in insure\n        PoolTemplate.sol: MAGIC_SCALE_1E6 is read twice in resume\n        BondingPremium.sol: k is read twice in getCurrentPremiumRate\n        BondingPremium.sol: k is read twice in getPremiumRate\n        BondingPremium.sol: c is read twice in getPremiumRate\n        BondingPremium.sol: b is read twice in getCurrentPremiumRate\n        BondingPremium.sol: b is read twice in getPremiumRate\n        BondingPremium.sol: T_1 is read twice in getCurrentPremiumRate\n        BondingPremium.sol: T_1 is read twice in getPremiumRate\n        BondingPremium.sol: BASE is read twice in getCurrentPremiumRate\n        BondingPremium.sol: BASE is read twice in getPremiumRate\n        BondingPremium.sol: BASE_x2 is read twice in getCurrentPremiumRate\n        BondingPremium.sol: BASE_x2 is read twice in getPremiumRate\n        Vault.sol: token is read twice in repayDebt\n        Vault.sol: token is read twice in utilize\n        Vault.sol: token is read twice in withdrawRedundant\n        Vault.sol: totalAttributions is read twice in attributionValue\n        Vault.sol: balance is read twice in valueAll\n        Vault.sol: balance is read twice in withdrawRedundant\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/5/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/5/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/3","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/3/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/3/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/3/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/3","id":1095829581,"node_id":"I_kwDOGhqIJ85BUQhN","number":3,"title":"Unused state variables","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-07T00:12:37Z","updated_at":"2022-01-24T11:24:59Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nrobee\n\n\n# Vulnerability details\n\nUnused state variables are gas consuming at deployment (since they are located in storage) and are \na bad code practice. Removing those variables will decrease deployment gas cost and improve code quality. \nThis is a full list of all the unused storage variables we found in your code base. \nThe format is <solidity file>, <unused storage variable name>: \n\n        IndexTemplate.sol, pendingEnd\n        BondingPremium.sol, ADJUSTER\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/3/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/3/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/1","repository_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings","labels_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/1/labels{/name}","comments_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/1/comments","events_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/1/events","html_url":"https://github.com/code-423n4/2022-01-insure-findings/issues/1","id":1095829034,"node_id":"I_kwDOGhqIJ85BUQYq","number":1,"title":"Unused imports","user":{"login":"code423n4","id":81770958,"node_id":"MDQ6VXNlcjgxNzcwOTU4","avatar_url":"https://avatars.githubusercontent.com/u/81770958?v=4","gravatar_id":"","url":"https://api.github.com/users/code423n4","html_url":"https://github.com/code423n4","followers_url":"https://api.github.com/users/code423n4/followers","following_url":"https://api.github.com/users/code423n4/following{/other_user}","gists_url":"https://api.github.com/users/code423n4/gists{/gist_id}","starred_url":"https://api.github.com/users/code423n4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code423n4/subscriptions","organizations_url":"https://api.github.com/users/code423n4/orgs","repos_url":"https://api.github.com/users/code423n4/repos","events_url":"https://api.github.com/users/code423n4/events{/privacy}","received_events_url":"https://api.github.com/users/code423n4/received_events","type":"User","site_admin":false},"labels":[{"id":3638633443,"node_id":"LA_kwDOGhqIJ87Y4SPj","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3638637947,"node_id":"LA_kwDOGhqIJ87Y4TV7","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/G%20(Gas%20Optimization)","name":"G (Gas Optimization)","color":"D4C5F9","default":false,"description":""},{"id":3638637959,"node_id":"LA_kwDOGhqIJ87Y4TWH","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/resolved","name":"resolved","color":"0E8A16","default":false,"description":"Finding has been patched by sponsor (sponsor pls link to PR containing fix)"},{"id":3638637961,"node_id":"LA_kwDOGhqIJ87Y4TWJ","url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/labels/sponsor%20confirmed","name":"sponsor confirmed","color":"0E8A16","default":false,"description":"Sponsor agrees this is a problem and intends to fix it (OK to use w/ \"disagree with severity\")"}],"state":"open","locked":false,"assignee":{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false},"assignees":[{"login":"blue32captain","id":80493974,"node_id":"MDQ6VXNlcjgwNDkzOTc0","avatar_url":"https://avatars.githubusercontent.com/u/80493974?v=4","gravatar_id":"","url":"https://api.github.com/users/blue32captain","html_url":"https://github.com/blue32captain","followers_url":"https://api.github.com/users/blue32captain/followers","following_url":"https://api.github.com/users/blue32captain/following{/other_user}","gists_url":"https://api.github.com/users/blue32captain/gists{/gist_id}","starred_url":"https://api.github.com/users/blue32captain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blue32captain/subscriptions","organizations_url":"https://api.github.com/users/blue32captain/orgs","repos_url":"https://api.github.com/users/blue32captain/repos","events_url":"https://api.github.com/users/blue32captain/events{/privacy}","received_events_url":"https://api.github.com/users/blue32captain/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-01-07T00:12:17Z","updated_at":"2022-01-24T11:24:52Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Handle\n\nrobee\n\n\n# Vulnerability details\n\nIn the following files there are contract imports that aren't used. \nImport of unnecessary files costs deployment gas (and is a bad coding practice that is important to ignore). \nThe following is a full list of all unused imports, we went through the whole code to find it :) <solidity file> <line number> <actual import line>: \n\n        Factory.sol, line 13, import \"hardhat/console.sol\";\n        IndexTemplate.sol, line 6, import \"hardhat/console.sol\";\n        Parameters.sol, line 12, import \"hardhat/console.sol\";\n        BondingPremium.sol, line 9, import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n\n","reactions":{"url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/1/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/code-423n4/2022-01-insure-findings/issues/1/timeline","performed_via_github_app":null}]